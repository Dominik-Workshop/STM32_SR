
timer_blink.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000034bc  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08003644  08003644  00013644  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800368c  0800368c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800368c  0800368c  0001368c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003694  08003694  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003694  08003694  00013694  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003698  08003698  00013698  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800369c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ec  2000000c  080036a8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000f8  080036a8  000200f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000eb88  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001d52  00000000  00000000  0002ebc4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e38  00000000  00000000  00030918  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d30  00000000  00000000  00031750  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00026584  00000000  00000000  00032480  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c1f1  00000000  00000000  00058a04  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ef9f6  00000000  00000000  00064bf5  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001545eb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b10  00000000  00000000  00154668  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800362c 	.word	0x0800362c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	0800362c 	.word	0x0800362c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b08a      	sub	sp, #40	; 0x28
 80004cc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004ce:	f107 0314 	add.w	r3, r7, #20
 80004d2:	2200      	movs	r2, #0
 80004d4:	601a      	str	r2, [r3, #0]
 80004d6:	605a      	str	r2, [r3, #4]
 80004d8:	609a      	str	r2, [r3, #8]
 80004da:	60da      	str	r2, [r3, #12]
 80004dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004de:	4b2b      	ldr	r3, [pc, #172]	; (800058c <MX_GPIO_Init+0xc4>)
 80004e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004e2:	4a2a      	ldr	r2, [pc, #168]	; (800058c <MX_GPIO_Init+0xc4>)
 80004e4:	f043 0304 	orr.w	r3, r3, #4
 80004e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004ea:	4b28      	ldr	r3, [pc, #160]	; (800058c <MX_GPIO_Init+0xc4>)
 80004ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004ee:	f003 0304 	and.w	r3, r3, #4
 80004f2:	613b      	str	r3, [r7, #16]
 80004f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80004f6:	4b25      	ldr	r3, [pc, #148]	; (800058c <MX_GPIO_Init+0xc4>)
 80004f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004fa:	4a24      	ldr	r2, [pc, #144]	; (800058c <MX_GPIO_Init+0xc4>)
 80004fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000500:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000502:	4b22      	ldr	r3, [pc, #136]	; (800058c <MX_GPIO_Init+0xc4>)
 8000504:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000506:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800050a:	60fb      	str	r3, [r7, #12]
 800050c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800050e:	4b1f      	ldr	r3, [pc, #124]	; (800058c <MX_GPIO_Init+0xc4>)
 8000510:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000512:	4a1e      	ldr	r2, [pc, #120]	; (800058c <MX_GPIO_Init+0xc4>)
 8000514:	f043 0301 	orr.w	r3, r3, #1
 8000518:	64d3      	str	r3, [r2, #76]	; 0x4c
 800051a:	4b1c      	ldr	r3, [pc, #112]	; (800058c <MX_GPIO_Init+0xc4>)
 800051c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800051e:	f003 0301 	and.w	r3, r3, #1
 8000522:	60bb      	str	r3, [r7, #8]
 8000524:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000526:	4b19      	ldr	r3, [pc, #100]	; (800058c <MX_GPIO_Init+0xc4>)
 8000528:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800052a:	4a18      	ldr	r2, [pc, #96]	; (800058c <MX_GPIO_Init+0xc4>)
 800052c:	f043 0302 	orr.w	r3, r3, #2
 8000530:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000532:	4b16      	ldr	r3, [pc, #88]	; (800058c <MX_GPIO_Init+0xc4>)
 8000534:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000536:	f003 0302 	and.w	r3, r3, #2
 800053a:	607b      	str	r3, [r7, #4]
 800053c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800053e:	2200      	movs	r2, #0
 8000540:	2120      	movs	r1, #32
 8000542:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000546:	f000 fd8b 	bl	8001060 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800054a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800054e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000550:	4b0f      	ldr	r3, [pc, #60]	; (8000590 <MX_GPIO_Init+0xc8>)
 8000552:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000554:	2300      	movs	r3, #0
 8000556:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000558:	f107 0314 	add.w	r3, r7, #20
 800055c:	4619      	mov	r1, r3
 800055e:	480d      	ldr	r0, [pc, #52]	; (8000594 <MX_GPIO_Init+0xcc>)
 8000560:	f000 fbd6 	bl	8000d10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000564:	2320      	movs	r3, #32
 8000566:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000568:	2301      	movs	r3, #1
 800056a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800056c:	2300      	movs	r3, #0
 800056e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000570:	2300      	movs	r3, #0
 8000572:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000574:	f107 0314 	add.w	r3, r7, #20
 8000578:	4619      	mov	r1, r3
 800057a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800057e:	f000 fbc7 	bl	8000d10 <HAL_GPIO_Init>

}
 8000582:	bf00      	nop
 8000584:	3728      	adds	r7, #40	; 0x28
 8000586:	46bd      	mov	sp, r7
 8000588:	bd80      	pop	{r7, pc}
 800058a:	bf00      	nop
 800058c:	40021000 	.word	0x40021000
 8000590:	10210000 	.word	0x10210000
 8000594:	48000800 	.word	0x48000800

08000598 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000598:	b580      	push	{r7, lr}
 800059a:	b082      	sub	sp, #8
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
	if(htim == &htim6){
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	4a06      	ldr	r2, [pc, #24]	; (80005bc <HAL_TIM_PeriodElapsedCallback+0x24>)
 80005a4:	4293      	cmp	r3, r2
 80005a6:	d104      	bne.n	80005b2 <HAL_TIM_PeriodElapsedCallback+0x1a>
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80005a8:	2120      	movs	r1, #32
 80005aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005ae:	f000 fd6f 	bl	8001090 <HAL_GPIO_TogglePin>
	}
}
 80005b2:	bf00      	nop
 80005b4:	3708      	adds	r7, #8
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bd80      	pop	{r7, pc}
 80005ba:	bf00      	nop
 80005bc:	20000028 	.word	0x20000028

080005c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c4:	f000 fa16 	bl	80009f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005c8:	f000 f80c 	bl	80005e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005cc:	f7ff ff7c 	bl	80004c8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005d0:	f000 f974 	bl	80008bc <MX_USART2_UART_Init>
  MX_TIM6_Init();
 80005d4:	f000 f914 	bl	8000800 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim6);
 80005d8:	4801      	ldr	r0, [pc, #4]	; (80005e0 <main+0x20>)
 80005da:	f002 f8c9 	bl	8002770 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005de:	e7fe      	b.n	80005de <main+0x1e>
 80005e0:	20000028 	.word	0x20000028

080005e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b0b8      	sub	sp, #224	; 0xe0
 80005e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ea:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80005ee:	2244      	movs	r2, #68	; 0x44
 80005f0:	2100      	movs	r1, #0
 80005f2:	4618      	mov	r0, r3
 80005f4:	f003 f812 	bl	800361c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005f8:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80005fc:	2200      	movs	r2, #0
 80005fe:	601a      	str	r2, [r3, #0]
 8000600:	605a      	str	r2, [r3, #4]
 8000602:	609a      	str	r2, [r3, #8]
 8000604:	60da      	str	r2, [r3, #12]
 8000606:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000608:	463b      	mov	r3, r7
 800060a:	2288      	movs	r2, #136	; 0x88
 800060c:	2100      	movs	r1, #0
 800060e:	4618      	mov	r0, r3
 8000610:	f003 f804 	bl	800361c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000614:	2302      	movs	r3, #2
 8000616:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800061a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800061e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000622:	2310      	movs	r3, #16
 8000624:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000628:	2302      	movs	r3, #2
 800062a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800062e:	2302      	movs	r3, #2
 8000630:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000634:	2301      	movs	r3, #1
 8000636:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 800063a:	230a      	movs	r3, #10
 800063c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000640:	2307      	movs	r3, #7
 8000642:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000646:	2302      	movs	r3, #2
 8000648:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800064c:	2302      	movs	r3, #2
 800064e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000652:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000656:	4618      	mov	r0, r3
 8000658:	f000 fd98 	bl	800118c <HAL_RCC_OscConfig>
 800065c:	4603      	mov	r3, r0
 800065e:	2b00      	cmp	r3, #0
 8000660:	d001      	beq.n	8000666 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000662:	f000 f834 	bl	80006ce <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000666:	230f      	movs	r3, #15
 8000668:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800066c:	2303      	movs	r3, #3
 800066e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000672:	2300      	movs	r3, #0
 8000674:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000678:	2300      	movs	r3, #0
 800067a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800067e:	2300      	movs	r3, #0
 8000680:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000684:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000688:	2104      	movs	r1, #4
 800068a:	4618      	mov	r0, r3
 800068c:	f001 f964 	bl	8001958 <HAL_RCC_ClockConfig>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000696:	f000 f81a 	bl	80006ce <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800069a:	2302      	movs	r3, #2
 800069c:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800069e:	2300      	movs	r3, #0
 80006a0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006a2:	463b      	mov	r3, r7
 80006a4:	4618      	mov	r0, r3
 80006a6:	f001 fb5b 	bl	8001d60 <HAL_RCCEx_PeriphCLKConfig>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80006b0:	f000 f80d 	bl	80006ce <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80006b4:	f44f 7000 	mov.w	r0, #512	; 0x200
 80006b8:	f000 fd12 	bl	80010e0 <HAL_PWREx_ControlVoltageScaling>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <SystemClock_Config+0xe2>
  {
    Error_Handler();
 80006c2:	f000 f804 	bl	80006ce <Error_Handler>
  }
}
 80006c6:	bf00      	nop
 80006c8:	37e0      	adds	r7, #224	; 0xe0
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}

080006ce <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006ce:	b480      	push	{r7}
 80006d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80006d2:	bf00      	nop
 80006d4:	46bd      	mov	sp, r7
 80006d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006da:	4770      	bx	lr

080006dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006dc:	b480      	push	{r7}
 80006de:	b083      	sub	sp, #12
 80006e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006e2:	4b0f      	ldr	r3, [pc, #60]	; (8000720 <HAL_MspInit+0x44>)
 80006e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80006e6:	4a0e      	ldr	r2, [pc, #56]	; (8000720 <HAL_MspInit+0x44>)
 80006e8:	f043 0301 	orr.w	r3, r3, #1
 80006ec:	6613      	str	r3, [r2, #96]	; 0x60
 80006ee:	4b0c      	ldr	r3, [pc, #48]	; (8000720 <HAL_MspInit+0x44>)
 80006f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80006f2:	f003 0301 	and.w	r3, r3, #1
 80006f6:	607b      	str	r3, [r7, #4]
 80006f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006fa:	4b09      	ldr	r3, [pc, #36]	; (8000720 <HAL_MspInit+0x44>)
 80006fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006fe:	4a08      	ldr	r2, [pc, #32]	; (8000720 <HAL_MspInit+0x44>)
 8000700:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000704:	6593      	str	r3, [r2, #88]	; 0x58
 8000706:	4b06      	ldr	r3, [pc, #24]	; (8000720 <HAL_MspInit+0x44>)
 8000708:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800070a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800070e:	603b      	str	r3, [r7, #0]
 8000710:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000712:	bf00      	nop
 8000714:	370c      	adds	r7, #12
 8000716:	46bd      	mov	sp, r7
 8000718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071c:	4770      	bx	lr
 800071e:	bf00      	nop
 8000720:	40021000 	.word	0x40021000

08000724 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000724:	b480      	push	{r7}
 8000726:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000728:	bf00      	nop
 800072a:	46bd      	mov	sp, r7
 800072c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000730:	4770      	bx	lr

08000732 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000732:	b480      	push	{r7}
 8000734:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000736:	e7fe      	b.n	8000736 <HardFault_Handler+0x4>

08000738 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000738:	b480      	push	{r7}
 800073a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800073c:	e7fe      	b.n	800073c <MemManage_Handler+0x4>

0800073e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800073e:	b480      	push	{r7}
 8000740:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000742:	e7fe      	b.n	8000742 <BusFault_Handler+0x4>

08000744 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000744:	b480      	push	{r7}
 8000746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000748:	e7fe      	b.n	8000748 <UsageFault_Handler+0x4>

0800074a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800074a:	b480      	push	{r7}
 800074c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800074e:	bf00      	nop
 8000750:	46bd      	mov	sp, r7
 8000752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000756:	4770      	bx	lr

08000758 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000758:	b480      	push	{r7}
 800075a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800075c:	bf00      	nop
 800075e:	46bd      	mov	sp, r7
 8000760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000764:	4770      	bx	lr

08000766 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000766:	b480      	push	{r7}
 8000768:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800076a:	bf00      	nop
 800076c:	46bd      	mov	sp, r7
 800076e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000772:	4770      	bx	lr

08000774 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000778:	f000 f998 	bl	8000aac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800077c:	bf00      	nop
 800077e:	bd80      	pop	{r7, pc}

08000780 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000784:	4802      	ldr	r0, [pc, #8]	; (8000790 <TIM6_DAC_IRQHandler+0x10>)
 8000786:	f002 f863 	bl	8002850 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800078a:	bf00      	nop
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	20000028 	.word	0x20000028

08000794 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000794:	b480      	push	{r7}
 8000796:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000798:	4b17      	ldr	r3, [pc, #92]	; (80007f8 <SystemInit+0x64>)
 800079a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800079e:	4a16      	ldr	r2, [pc, #88]	; (80007f8 <SystemInit+0x64>)
 80007a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80007a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80007a8:	4b14      	ldr	r3, [pc, #80]	; (80007fc <SystemInit+0x68>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	4a13      	ldr	r2, [pc, #76]	; (80007fc <SystemInit+0x68>)
 80007ae:	f043 0301 	orr.w	r3, r3, #1
 80007b2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80007b4:	4b11      	ldr	r3, [pc, #68]	; (80007fc <SystemInit+0x68>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80007ba:	4b10      	ldr	r3, [pc, #64]	; (80007fc <SystemInit+0x68>)
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	4a0f      	ldr	r2, [pc, #60]	; (80007fc <SystemInit+0x68>)
 80007c0:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80007c4:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80007c8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80007ca:	4b0c      	ldr	r3, [pc, #48]	; (80007fc <SystemInit+0x68>)
 80007cc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80007d0:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80007d2:	4b0a      	ldr	r3, [pc, #40]	; (80007fc <SystemInit+0x68>)
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	4a09      	ldr	r2, [pc, #36]	; (80007fc <SystemInit+0x68>)
 80007d8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80007dc:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80007de:	4b07      	ldr	r3, [pc, #28]	; (80007fc <SystemInit+0x68>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80007e4:	4b04      	ldr	r3, [pc, #16]	; (80007f8 <SystemInit+0x64>)
 80007e6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80007ea:	609a      	str	r2, [r3, #8]
#endif
}
 80007ec:	bf00      	nop
 80007ee:	46bd      	mov	sp, r7
 80007f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f4:	4770      	bx	lr
 80007f6:	bf00      	nop
 80007f8:	e000ed00 	.word	0xe000ed00
 80007fc:	40021000 	.word	0x40021000

08000800 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b084      	sub	sp, #16
 8000804:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000806:	1d3b      	adds	r3, r7, #4
 8000808:	2200      	movs	r2, #0
 800080a:	601a      	str	r2, [r3, #0]
 800080c:	605a      	str	r2, [r3, #4]
 800080e:	609a      	str	r2, [r3, #8]

  htim6.Instance = TIM6;
 8000810:	4b15      	ldr	r3, [pc, #84]	; (8000868 <MX_TIM6_Init+0x68>)
 8000812:	4a16      	ldr	r2, [pc, #88]	; (800086c <MX_TIM6_Init+0x6c>)
 8000814:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = TIM6_PRESCALER;
 8000816:	4b14      	ldr	r3, [pc, #80]	; (8000868 <MX_TIM6_Init+0x68>)
 8000818:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800081c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800081e:	4b12      	ldr	r3, [pc, #72]	; (8000868 <MX_TIM6_Init+0x68>)
 8000820:	2200      	movs	r2, #0
 8000822:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = TIM6_PERIOD;
 8000824:	4b10      	ldr	r3, [pc, #64]	; (8000868 <MX_TIM6_Init+0x68>)
 8000826:	f242 720f 	movw	r2, #9999	; 0x270f
 800082a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800082c:	4b0e      	ldr	r3, [pc, #56]	; (8000868 <MX_TIM6_Init+0x68>)
 800082e:	2200      	movs	r2, #0
 8000830:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000832:	480d      	ldr	r0, [pc, #52]	; (8000868 <MX_TIM6_Init+0x68>)
 8000834:	f001 ff44 	bl	80026c0 <HAL_TIM_Base_Init>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 800083e:	f7ff ff46 	bl	80006ce <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000842:	2300      	movs	r3, #0
 8000844:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000846:	2300      	movs	r3, #0
 8000848:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800084a:	1d3b      	adds	r3, r7, #4
 800084c:	4619      	mov	r1, r3
 800084e:	4806      	ldr	r0, [pc, #24]	; (8000868 <MX_TIM6_Init+0x68>)
 8000850:	f002 f9e0 	bl	8002c14 <HAL_TIMEx_MasterConfigSynchronization>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 800085a:	f7ff ff38 	bl	80006ce <Error_Handler>
  }

}
 800085e:	bf00      	nop
 8000860:	3710      	adds	r7, #16
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	20000028 	.word	0x20000028
 800086c:	40001000 	.word	0x40001000

08000870 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b084      	sub	sp, #16
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	4a0d      	ldr	r2, [pc, #52]	; (80008b4 <HAL_TIM_Base_MspInit+0x44>)
 800087e:	4293      	cmp	r3, r2
 8000880:	d113      	bne.n	80008aa <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000882:	4b0d      	ldr	r3, [pc, #52]	; (80008b8 <HAL_TIM_Base_MspInit+0x48>)
 8000884:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000886:	4a0c      	ldr	r2, [pc, #48]	; (80008b8 <HAL_TIM_Base_MspInit+0x48>)
 8000888:	f043 0310 	orr.w	r3, r3, #16
 800088c:	6593      	str	r3, [r2, #88]	; 0x58
 800088e:	4b0a      	ldr	r3, [pc, #40]	; (80008b8 <HAL_TIM_Base_MspInit+0x48>)
 8000890:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000892:	f003 0310 	and.w	r3, r3, #16
 8000896:	60fb      	str	r3, [r7, #12]
 8000898:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800089a:	2200      	movs	r2, #0
 800089c:	2100      	movs	r1, #0
 800089e:	2036      	movs	r0, #54	; 0x36
 80008a0:	f000 f9ff 	bl	8000ca2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80008a4:	2036      	movs	r0, #54	; 0x36
 80008a6:	f000 fa18 	bl	8000cda <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 80008aa:	bf00      	nop
 80008ac:	3710      	adds	r7, #16
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	40001000 	.word	0x40001000
 80008b8:	40021000 	.word	0x40021000

080008bc <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 80008c0:	4b14      	ldr	r3, [pc, #80]	; (8000914 <MX_USART2_UART_Init+0x58>)
 80008c2:	4a15      	ldr	r2, [pc, #84]	; (8000918 <MX_USART2_UART_Init+0x5c>)
 80008c4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008c6:	4b13      	ldr	r3, [pc, #76]	; (8000914 <MX_USART2_UART_Init+0x58>)
 80008c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008cc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008ce:	4b11      	ldr	r3, [pc, #68]	; (8000914 <MX_USART2_UART_Init+0x58>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008d4:	4b0f      	ldr	r3, [pc, #60]	; (8000914 <MX_USART2_UART_Init+0x58>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008da:	4b0e      	ldr	r3, [pc, #56]	; (8000914 <MX_USART2_UART_Init+0x58>)
 80008dc:	2200      	movs	r2, #0
 80008de:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008e0:	4b0c      	ldr	r3, [pc, #48]	; (8000914 <MX_USART2_UART_Init+0x58>)
 80008e2:	220c      	movs	r2, #12
 80008e4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008e6:	4b0b      	ldr	r3, [pc, #44]	; (8000914 <MX_USART2_UART_Init+0x58>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008ec:	4b09      	ldr	r3, [pc, #36]	; (8000914 <MX_USART2_UART_Init+0x58>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008f2:	4b08      	ldr	r3, [pc, #32]	; (8000914 <MX_USART2_UART_Init+0x58>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008f8:	4b06      	ldr	r3, [pc, #24]	; (8000914 <MX_USART2_UART_Init+0x58>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008fe:	4805      	ldr	r0, [pc, #20]	; (8000914 <MX_USART2_UART_Init+0x58>)
 8000900:	f002 fa2e 	bl	8002d60 <HAL_UART_Init>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d001      	beq.n	800090e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800090a:	f7ff fee0 	bl	80006ce <Error_Handler>
  }

}
 800090e:	bf00      	nop
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	20000074 	.word	0x20000074
 8000918:	40004400 	.word	0x40004400

0800091c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b08a      	sub	sp, #40	; 0x28
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000924:	f107 0314 	add.w	r3, r7, #20
 8000928:	2200      	movs	r2, #0
 800092a:	601a      	str	r2, [r3, #0]
 800092c:	605a      	str	r2, [r3, #4]
 800092e:	609a      	str	r2, [r3, #8]
 8000930:	60da      	str	r2, [r3, #12]
 8000932:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	4a17      	ldr	r2, [pc, #92]	; (8000998 <HAL_UART_MspInit+0x7c>)
 800093a:	4293      	cmp	r3, r2
 800093c:	d128      	bne.n	8000990 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800093e:	4b17      	ldr	r3, [pc, #92]	; (800099c <HAL_UART_MspInit+0x80>)
 8000940:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000942:	4a16      	ldr	r2, [pc, #88]	; (800099c <HAL_UART_MspInit+0x80>)
 8000944:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000948:	6593      	str	r3, [r2, #88]	; 0x58
 800094a:	4b14      	ldr	r3, [pc, #80]	; (800099c <HAL_UART_MspInit+0x80>)
 800094c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800094e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000952:	613b      	str	r3, [r7, #16]
 8000954:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000956:	4b11      	ldr	r3, [pc, #68]	; (800099c <HAL_UART_MspInit+0x80>)
 8000958:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800095a:	4a10      	ldr	r2, [pc, #64]	; (800099c <HAL_UART_MspInit+0x80>)
 800095c:	f043 0301 	orr.w	r3, r3, #1
 8000960:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000962:	4b0e      	ldr	r3, [pc, #56]	; (800099c <HAL_UART_MspInit+0x80>)
 8000964:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000966:	f003 0301 	and.w	r3, r3, #1
 800096a:	60fb      	str	r3, [r7, #12]
 800096c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800096e:	230c      	movs	r3, #12
 8000970:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000972:	2302      	movs	r3, #2
 8000974:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000976:	2300      	movs	r3, #0
 8000978:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800097a:	2303      	movs	r3, #3
 800097c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800097e:	2307      	movs	r3, #7
 8000980:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000982:	f107 0314 	add.w	r3, r7, #20
 8000986:	4619      	mov	r1, r3
 8000988:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800098c:	f000 f9c0 	bl	8000d10 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000990:	bf00      	nop
 8000992:	3728      	adds	r7, #40	; 0x28
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}
 8000998:	40004400 	.word	0x40004400
 800099c:	40021000 	.word	0x40021000

080009a0 <Reset_Handler>:
 80009a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009d8 <LoopForever+0x2>
 80009a4:	f7ff fef6 	bl	8000794 <SystemInit>
 80009a8:	2100      	movs	r1, #0
 80009aa:	e003      	b.n	80009b4 <LoopCopyDataInit>

080009ac <CopyDataInit>:
 80009ac:	4b0b      	ldr	r3, [pc, #44]	; (80009dc <LoopForever+0x6>)
 80009ae:	585b      	ldr	r3, [r3, r1]
 80009b0:	5043      	str	r3, [r0, r1]
 80009b2:	3104      	adds	r1, #4

080009b4 <LoopCopyDataInit>:
 80009b4:	480a      	ldr	r0, [pc, #40]	; (80009e0 <LoopForever+0xa>)
 80009b6:	4b0b      	ldr	r3, [pc, #44]	; (80009e4 <LoopForever+0xe>)
 80009b8:	1842      	adds	r2, r0, r1
 80009ba:	429a      	cmp	r2, r3
 80009bc:	d3f6      	bcc.n	80009ac <CopyDataInit>
 80009be:	4a0a      	ldr	r2, [pc, #40]	; (80009e8 <LoopForever+0x12>)
 80009c0:	e002      	b.n	80009c8 <LoopFillZerobss>

080009c2 <FillZerobss>:
 80009c2:	2300      	movs	r3, #0
 80009c4:	f842 3b04 	str.w	r3, [r2], #4

080009c8 <LoopFillZerobss>:
 80009c8:	4b08      	ldr	r3, [pc, #32]	; (80009ec <LoopForever+0x16>)
 80009ca:	429a      	cmp	r2, r3
 80009cc:	d3f9      	bcc.n	80009c2 <FillZerobss>
 80009ce:	f002 fe01 	bl	80035d4 <__libc_init_array>
 80009d2:	f7ff fdf5 	bl	80005c0 <main>

080009d6 <LoopForever>:
 80009d6:	e7fe      	b.n	80009d6 <LoopForever>
 80009d8:	20018000 	.word	0x20018000
 80009dc:	0800369c 	.word	0x0800369c
 80009e0:	20000000 	.word	0x20000000
 80009e4:	2000000c 	.word	0x2000000c
 80009e8:	2000000c 	.word	0x2000000c
 80009ec:	200000f8 	.word	0x200000f8

080009f0 <ADC1_2_IRQHandler>:
 80009f0:	e7fe      	b.n	80009f0 <ADC1_2_IRQHandler>
	...

080009f4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b082      	sub	sp, #8
 80009f8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80009fa:	2300      	movs	r3, #0
 80009fc:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009fe:	4b0c      	ldr	r3, [pc, #48]	; (8000a30 <HAL_Init+0x3c>)
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	4a0b      	ldr	r2, [pc, #44]	; (8000a30 <HAL_Init+0x3c>)
 8000a04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a08:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a0a:	2003      	movs	r0, #3
 8000a0c:	f000 f93e 	bl	8000c8c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a10:	2000      	movs	r0, #0
 8000a12:	f000 f80f 	bl	8000a34 <HAL_InitTick>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d002      	beq.n	8000a22 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000a1c:	2301      	movs	r3, #1
 8000a1e:	71fb      	strb	r3, [r7, #7]
 8000a20:	e001      	b.n	8000a26 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a22:	f7ff fe5b 	bl	80006dc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a26:	79fb      	ldrb	r3, [r7, #7]
}
 8000a28:	4618      	mov	r0, r3
 8000a2a:	3708      	adds	r7, #8
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	40022000 	.word	0x40022000

08000a34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b084      	sub	sp, #16
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000a40:	4b17      	ldr	r3, [pc, #92]	; (8000aa0 <HAL_InitTick+0x6c>)
 8000a42:	781b      	ldrb	r3, [r3, #0]
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d023      	beq.n	8000a90 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000a48:	4b16      	ldr	r3, [pc, #88]	; (8000aa4 <HAL_InitTick+0x70>)
 8000a4a:	681a      	ldr	r2, [r3, #0]
 8000a4c:	4b14      	ldr	r3, [pc, #80]	; (8000aa0 <HAL_InitTick+0x6c>)
 8000a4e:	781b      	ldrb	r3, [r3, #0]
 8000a50:	4619      	mov	r1, r3
 8000a52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a56:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f000 f949 	bl	8000cf6 <HAL_SYSTICK_Config>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d10f      	bne.n	8000a8a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	2b0f      	cmp	r3, #15
 8000a6e:	d809      	bhi.n	8000a84 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a70:	2200      	movs	r2, #0
 8000a72:	6879      	ldr	r1, [r7, #4]
 8000a74:	f04f 30ff 	mov.w	r0, #4294967295
 8000a78:	f000 f913 	bl	8000ca2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a7c:	4a0a      	ldr	r2, [pc, #40]	; (8000aa8 <HAL_InitTick+0x74>)
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	6013      	str	r3, [r2, #0]
 8000a82:	e007      	b.n	8000a94 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000a84:	2301      	movs	r3, #1
 8000a86:	73fb      	strb	r3, [r7, #15]
 8000a88:	e004      	b.n	8000a94 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000a8a:	2301      	movs	r3, #1
 8000a8c:	73fb      	strb	r3, [r7, #15]
 8000a8e:	e001      	b.n	8000a94 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000a90:	2301      	movs	r3, #1
 8000a92:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000a94:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a96:	4618      	mov	r0, r3
 8000a98:	3710      	adds	r7, #16
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	20000008 	.word	0x20000008
 8000aa4:	20000000 	.word	0x20000000
 8000aa8:	20000004 	.word	0x20000004

08000aac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ab0:	4b06      	ldr	r3, [pc, #24]	; (8000acc <HAL_IncTick+0x20>)
 8000ab2:	781b      	ldrb	r3, [r3, #0]
 8000ab4:	461a      	mov	r2, r3
 8000ab6:	4b06      	ldr	r3, [pc, #24]	; (8000ad0 <HAL_IncTick+0x24>)
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	4413      	add	r3, r2
 8000abc:	4a04      	ldr	r2, [pc, #16]	; (8000ad0 <HAL_IncTick+0x24>)
 8000abe:	6013      	str	r3, [r2, #0]
}
 8000ac0:	bf00      	nop
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop
 8000acc:	20000008 	.word	0x20000008
 8000ad0:	200000f4 	.word	0x200000f4

08000ad4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ad8:	4b03      	ldr	r3, [pc, #12]	; (8000ae8 <HAL_GetTick+0x14>)
 8000ada:	681b      	ldr	r3, [r3, #0]
}
 8000adc:	4618      	mov	r0, r3
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop
 8000ae8:	200000f4 	.word	0x200000f4

08000aec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000aec:	b480      	push	{r7}
 8000aee:	b085      	sub	sp, #20
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	f003 0307 	and.w	r3, r3, #7
 8000afa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000afc:	4b0c      	ldr	r3, [pc, #48]	; (8000b30 <__NVIC_SetPriorityGrouping+0x44>)
 8000afe:	68db      	ldr	r3, [r3, #12]
 8000b00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b02:	68ba      	ldr	r2, [r7, #8]
 8000b04:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b08:	4013      	ands	r3, r2
 8000b0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b10:	68bb      	ldr	r3, [r7, #8]
 8000b12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b14:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b1e:	4a04      	ldr	r2, [pc, #16]	; (8000b30 <__NVIC_SetPriorityGrouping+0x44>)
 8000b20:	68bb      	ldr	r3, [r7, #8]
 8000b22:	60d3      	str	r3, [r2, #12]
}
 8000b24:	bf00      	nop
 8000b26:	3714      	adds	r7, #20
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2e:	4770      	bx	lr
 8000b30:	e000ed00 	.word	0xe000ed00

08000b34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b38:	4b04      	ldr	r3, [pc, #16]	; (8000b4c <__NVIC_GetPriorityGrouping+0x18>)
 8000b3a:	68db      	ldr	r3, [r3, #12]
 8000b3c:	0a1b      	lsrs	r3, r3, #8
 8000b3e:	f003 0307 	and.w	r3, r3, #7
}
 8000b42:	4618      	mov	r0, r3
 8000b44:	46bd      	mov	sp, r7
 8000b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4a:	4770      	bx	lr
 8000b4c:	e000ed00 	.word	0xe000ed00

08000b50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b50:	b480      	push	{r7}
 8000b52:	b083      	sub	sp, #12
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	4603      	mov	r3, r0
 8000b58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	db0b      	blt.n	8000b7a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b62:	79fb      	ldrb	r3, [r7, #7]
 8000b64:	f003 021f 	and.w	r2, r3, #31
 8000b68:	4907      	ldr	r1, [pc, #28]	; (8000b88 <__NVIC_EnableIRQ+0x38>)
 8000b6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b6e:	095b      	lsrs	r3, r3, #5
 8000b70:	2001      	movs	r0, #1
 8000b72:	fa00 f202 	lsl.w	r2, r0, r2
 8000b76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000b7a:	bf00      	nop
 8000b7c:	370c      	adds	r7, #12
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop
 8000b88:	e000e100 	.word	0xe000e100

08000b8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	b083      	sub	sp, #12
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	4603      	mov	r3, r0
 8000b94:	6039      	str	r1, [r7, #0]
 8000b96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	db0a      	blt.n	8000bb6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ba0:	683b      	ldr	r3, [r7, #0]
 8000ba2:	b2da      	uxtb	r2, r3
 8000ba4:	490c      	ldr	r1, [pc, #48]	; (8000bd8 <__NVIC_SetPriority+0x4c>)
 8000ba6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000baa:	0112      	lsls	r2, r2, #4
 8000bac:	b2d2      	uxtb	r2, r2
 8000bae:	440b      	add	r3, r1
 8000bb0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bb4:	e00a      	b.n	8000bcc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bb6:	683b      	ldr	r3, [r7, #0]
 8000bb8:	b2da      	uxtb	r2, r3
 8000bba:	4908      	ldr	r1, [pc, #32]	; (8000bdc <__NVIC_SetPriority+0x50>)
 8000bbc:	79fb      	ldrb	r3, [r7, #7]
 8000bbe:	f003 030f 	and.w	r3, r3, #15
 8000bc2:	3b04      	subs	r3, #4
 8000bc4:	0112      	lsls	r2, r2, #4
 8000bc6:	b2d2      	uxtb	r2, r2
 8000bc8:	440b      	add	r3, r1
 8000bca:	761a      	strb	r2, [r3, #24]
}
 8000bcc:	bf00      	nop
 8000bce:	370c      	adds	r7, #12
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd6:	4770      	bx	lr
 8000bd8:	e000e100 	.word	0xe000e100
 8000bdc:	e000ed00 	.word	0xe000ed00

08000be0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000be0:	b480      	push	{r7}
 8000be2:	b089      	sub	sp, #36	; 0x24
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	60f8      	str	r0, [r7, #12]
 8000be8:	60b9      	str	r1, [r7, #8]
 8000bea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	f003 0307 	and.w	r3, r3, #7
 8000bf2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bf4:	69fb      	ldr	r3, [r7, #28]
 8000bf6:	f1c3 0307 	rsb	r3, r3, #7
 8000bfa:	2b04      	cmp	r3, #4
 8000bfc:	bf28      	it	cs
 8000bfe:	2304      	movcs	r3, #4
 8000c00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c02:	69fb      	ldr	r3, [r7, #28]
 8000c04:	3304      	adds	r3, #4
 8000c06:	2b06      	cmp	r3, #6
 8000c08:	d902      	bls.n	8000c10 <NVIC_EncodePriority+0x30>
 8000c0a:	69fb      	ldr	r3, [r7, #28]
 8000c0c:	3b03      	subs	r3, #3
 8000c0e:	e000      	b.n	8000c12 <NVIC_EncodePriority+0x32>
 8000c10:	2300      	movs	r3, #0
 8000c12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c14:	f04f 32ff 	mov.w	r2, #4294967295
 8000c18:	69bb      	ldr	r3, [r7, #24]
 8000c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c1e:	43da      	mvns	r2, r3
 8000c20:	68bb      	ldr	r3, [r7, #8]
 8000c22:	401a      	ands	r2, r3
 8000c24:	697b      	ldr	r3, [r7, #20]
 8000c26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c28:	f04f 31ff 	mov.w	r1, #4294967295
 8000c2c:	697b      	ldr	r3, [r7, #20]
 8000c2e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c32:	43d9      	mvns	r1, r3
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c38:	4313      	orrs	r3, r2
         );
}
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	3724      	adds	r7, #36	; 0x24
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c44:	4770      	bx	lr
	...

08000c48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b082      	sub	sp, #8
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	3b01      	subs	r3, #1
 8000c54:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c58:	d301      	bcc.n	8000c5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	e00f      	b.n	8000c7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c5e:	4a0a      	ldr	r2, [pc, #40]	; (8000c88 <SysTick_Config+0x40>)
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	3b01      	subs	r3, #1
 8000c64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c66:	210f      	movs	r1, #15
 8000c68:	f04f 30ff 	mov.w	r0, #4294967295
 8000c6c:	f7ff ff8e 	bl	8000b8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c70:	4b05      	ldr	r3, [pc, #20]	; (8000c88 <SysTick_Config+0x40>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c76:	4b04      	ldr	r3, [pc, #16]	; (8000c88 <SysTick_Config+0x40>)
 8000c78:	2207      	movs	r2, #7
 8000c7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c7c:	2300      	movs	r3, #0
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	3708      	adds	r7, #8
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	e000e010 	.word	0xe000e010

08000c8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b082      	sub	sp, #8
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c94:	6878      	ldr	r0, [r7, #4]
 8000c96:	f7ff ff29 	bl	8000aec <__NVIC_SetPriorityGrouping>
}
 8000c9a:	bf00      	nop
 8000c9c:	3708      	adds	r7, #8
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}

08000ca2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ca2:	b580      	push	{r7, lr}
 8000ca4:	b086      	sub	sp, #24
 8000ca6:	af00      	add	r7, sp, #0
 8000ca8:	4603      	mov	r3, r0
 8000caa:	60b9      	str	r1, [r7, #8]
 8000cac:	607a      	str	r2, [r7, #4]
 8000cae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000cb4:	f7ff ff3e 	bl	8000b34 <__NVIC_GetPriorityGrouping>
 8000cb8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cba:	687a      	ldr	r2, [r7, #4]
 8000cbc:	68b9      	ldr	r1, [r7, #8]
 8000cbe:	6978      	ldr	r0, [r7, #20]
 8000cc0:	f7ff ff8e 	bl	8000be0 <NVIC_EncodePriority>
 8000cc4:	4602      	mov	r2, r0
 8000cc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cca:	4611      	mov	r1, r2
 8000ccc:	4618      	mov	r0, r3
 8000cce:	f7ff ff5d 	bl	8000b8c <__NVIC_SetPriority>
}
 8000cd2:	bf00      	nop
 8000cd4:	3718      	adds	r7, #24
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}

08000cda <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cda:	b580      	push	{r7, lr}
 8000cdc:	b082      	sub	sp, #8
 8000cde:	af00      	add	r7, sp, #0
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ce4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f7ff ff31 	bl	8000b50 <__NVIC_EnableIRQ>
}
 8000cee:	bf00      	nop
 8000cf0:	3708      	adds	r7, #8
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}

08000cf6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cf6:	b580      	push	{r7, lr}
 8000cf8:	b082      	sub	sp, #8
 8000cfa:	af00      	add	r7, sp, #0
 8000cfc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cfe:	6878      	ldr	r0, [r7, #4]
 8000d00:	f7ff ffa2 	bl	8000c48 <SysTick_Config>
 8000d04:	4603      	mov	r3, r0
}
 8000d06:	4618      	mov	r0, r3
 8000d08:	3708      	adds	r7, #8
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
	...

08000d10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d10:	b480      	push	{r7}
 8000d12:	b087      	sub	sp, #28
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
 8000d18:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d1e:	e17f      	b.n	8001020 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	681a      	ldr	r2, [r3, #0]
 8000d24:	2101      	movs	r1, #1
 8000d26:	697b      	ldr	r3, [r7, #20]
 8000d28:	fa01 f303 	lsl.w	r3, r1, r3
 8000d2c:	4013      	ands	r3, r2
 8000d2e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	f000 8171 	beq.w	800101a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	685b      	ldr	r3, [r3, #4]
 8000d3c:	2b01      	cmp	r3, #1
 8000d3e:	d00b      	beq.n	8000d58 <HAL_GPIO_Init+0x48>
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	685b      	ldr	r3, [r3, #4]
 8000d44:	2b02      	cmp	r3, #2
 8000d46:	d007      	beq.n	8000d58 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d4c:	2b11      	cmp	r3, #17
 8000d4e:	d003      	beq.n	8000d58 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	685b      	ldr	r3, [r3, #4]
 8000d54:	2b12      	cmp	r3, #18
 8000d56:	d130      	bne.n	8000dba <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	689b      	ldr	r3, [r3, #8]
 8000d5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000d5e:	697b      	ldr	r3, [r7, #20]
 8000d60:	005b      	lsls	r3, r3, #1
 8000d62:	2203      	movs	r2, #3
 8000d64:	fa02 f303 	lsl.w	r3, r2, r3
 8000d68:	43db      	mvns	r3, r3
 8000d6a:	693a      	ldr	r2, [r7, #16]
 8000d6c:	4013      	ands	r3, r2
 8000d6e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000d70:	683b      	ldr	r3, [r7, #0]
 8000d72:	68da      	ldr	r2, [r3, #12]
 8000d74:	697b      	ldr	r3, [r7, #20]
 8000d76:	005b      	lsls	r3, r3, #1
 8000d78:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7c:	693a      	ldr	r2, [r7, #16]
 8000d7e:	4313      	orrs	r3, r2
 8000d80:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	693a      	ldr	r2, [r7, #16]
 8000d86:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	685b      	ldr	r3, [r3, #4]
 8000d8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000d8e:	2201      	movs	r2, #1
 8000d90:	697b      	ldr	r3, [r7, #20]
 8000d92:	fa02 f303 	lsl.w	r3, r2, r3
 8000d96:	43db      	mvns	r3, r3
 8000d98:	693a      	ldr	r2, [r7, #16]
 8000d9a:	4013      	ands	r3, r2
 8000d9c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	685b      	ldr	r3, [r3, #4]
 8000da2:	091b      	lsrs	r3, r3, #4
 8000da4:	f003 0201 	and.w	r2, r3, #1
 8000da8:	697b      	ldr	r3, [r7, #20]
 8000daa:	fa02 f303 	lsl.w	r3, r2, r3
 8000dae:	693a      	ldr	r2, [r7, #16]
 8000db0:	4313      	orrs	r3, r2
 8000db2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	693a      	ldr	r2, [r7, #16]
 8000db8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	685b      	ldr	r3, [r3, #4]
 8000dbe:	f003 0303 	and.w	r3, r3, #3
 8000dc2:	2b03      	cmp	r3, #3
 8000dc4:	d118      	bne.n	8000df8 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000dcc:	2201      	movs	r2, #1
 8000dce:	697b      	ldr	r3, [r7, #20]
 8000dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd4:	43db      	mvns	r3, r3
 8000dd6:	693a      	ldr	r2, [r7, #16]
 8000dd8:	4013      	ands	r3, r2
 8000dda:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	685b      	ldr	r3, [r3, #4]
 8000de0:	08db      	lsrs	r3, r3, #3
 8000de2:	f003 0201 	and.w	r2, r3, #1
 8000de6:	697b      	ldr	r3, [r7, #20]
 8000de8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dec:	693a      	ldr	r2, [r7, #16]
 8000dee:	4313      	orrs	r3, r2
 8000df0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	693a      	ldr	r2, [r7, #16]
 8000df6:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	68db      	ldr	r3, [r3, #12]
 8000dfc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000dfe:	697b      	ldr	r3, [r7, #20]
 8000e00:	005b      	lsls	r3, r3, #1
 8000e02:	2203      	movs	r2, #3
 8000e04:	fa02 f303 	lsl.w	r3, r2, r3
 8000e08:	43db      	mvns	r3, r3
 8000e0a:	693a      	ldr	r2, [r7, #16]
 8000e0c:	4013      	ands	r3, r2
 8000e0e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	689a      	ldr	r2, [r3, #8]
 8000e14:	697b      	ldr	r3, [r7, #20]
 8000e16:	005b      	lsls	r3, r3, #1
 8000e18:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1c:	693a      	ldr	r2, [r7, #16]
 8000e1e:	4313      	orrs	r3, r2
 8000e20:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	693a      	ldr	r2, [r7, #16]
 8000e26:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	685b      	ldr	r3, [r3, #4]
 8000e2c:	2b02      	cmp	r3, #2
 8000e2e:	d003      	beq.n	8000e38 <HAL_GPIO_Init+0x128>
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	685b      	ldr	r3, [r3, #4]
 8000e34:	2b12      	cmp	r3, #18
 8000e36:	d123      	bne.n	8000e80 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000e38:	697b      	ldr	r3, [r7, #20]
 8000e3a:	08da      	lsrs	r2, r3, #3
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	3208      	adds	r2, #8
 8000e40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e44:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000e46:	697b      	ldr	r3, [r7, #20]
 8000e48:	f003 0307 	and.w	r3, r3, #7
 8000e4c:	009b      	lsls	r3, r3, #2
 8000e4e:	220f      	movs	r2, #15
 8000e50:	fa02 f303 	lsl.w	r3, r2, r3
 8000e54:	43db      	mvns	r3, r3
 8000e56:	693a      	ldr	r2, [r7, #16]
 8000e58:	4013      	ands	r3, r2
 8000e5a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	691a      	ldr	r2, [r3, #16]
 8000e60:	697b      	ldr	r3, [r7, #20]
 8000e62:	f003 0307 	and.w	r3, r3, #7
 8000e66:	009b      	lsls	r3, r3, #2
 8000e68:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6c:	693a      	ldr	r2, [r7, #16]
 8000e6e:	4313      	orrs	r3, r2
 8000e70:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000e72:	697b      	ldr	r3, [r7, #20]
 8000e74:	08da      	lsrs	r2, r3, #3
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	3208      	adds	r2, #8
 8000e7a:	6939      	ldr	r1, [r7, #16]
 8000e7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000e86:	697b      	ldr	r3, [r7, #20]
 8000e88:	005b      	lsls	r3, r3, #1
 8000e8a:	2203      	movs	r2, #3
 8000e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e90:	43db      	mvns	r3, r3
 8000e92:	693a      	ldr	r2, [r7, #16]
 8000e94:	4013      	ands	r3, r2
 8000e96:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	685b      	ldr	r3, [r3, #4]
 8000e9c:	f003 0203 	and.w	r2, r3, #3
 8000ea0:	697b      	ldr	r3, [r7, #20]
 8000ea2:	005b      	lsls	r3, r3, #1
 8000ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea8:	693a      	ldr	r2, [r7, #16]
 8000eaa:	4313      	orrs	r3, r2
 8000eac:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	693a      	ldr	r2, [r7, #16]
 8000eb2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	685b      	ldr	r3, [r3, #4]
 8000eb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	f000 80ac 	beq.w	800101a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ec2:	4b5e      	ldr	r3, [pc, #376]	; (800103c <HAL_GPIO_Init+0x32c>)
 8000ec4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ec6:	4a5d      	ldr	r2, [pc, #372]	; (800103c <HAL_GPIO_Init+0x32c>)
 8000ec8:	f043 0301 	orr.w	r3, r3, #1
 8000ecc:	6613      	str	r3, [r2, #96]	; 0x60
 8000ece:	4b5b      	ldr	r3, [pc, #364]	; (800103c <HAL_GPIO_Init+0x32c>)
 8000ed0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ed2:	f003 0301 	and.w	r3, r3, #1
 8000ed6:	60bb      	str	r3, [r7, #8]
 8000ed8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000eda:	4a59      	ldr	r2, [pc, #356]	; (8001040 <HAL_GPIO_Init+0x330>)
 8000edc:	697b      	ldr	r3, [r7, #20]
 8000ede:	089b      	lsrs	r3, r3, #2
 8000ee0:	3302      	adds	r3, #2
 8000ee2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ee6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000ee8:	697b      	ldr	r3, [r7, #20]
 8000eea:	f003 0303 	and.w	r3, r3, #3
 8000eee:	009b      	lsls	r3, r3, #2
 8000ef0:	220f      	movs	r2, #15
 8000ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef6:	43db      	mvns	r3, r3
 8000ef8:	693a      	ldr	r2, [r7, #16]
 8000efa:	4013      	ands	r3, r2
 8000efc:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000f04:	d025      	beq.n	8000f52 <HAL_GPIO_Init+0x242>
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	4a4e      	ldr	r2, [pc, #312]	; (8001044 <HAL_GPIO_Init+0x334>)
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	d01f      	beq.n	8000f4e <HAL_GPIO_Init+0x23e>
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	4a4d      	ldr	r2, [pc, #308]	; (8001048 <HAL_GPIO_Init+0x338>)
 8000f12:	4293      	cmp	r3, r2
 8000f14:	d019      	beq.n	8000f4a <HAL_GPIO_Init+0x23a>
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	4a4c      	ldr	r2, [pc, #304]	; (800104c <HAL_GPIO_Init+0x33c>)
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	d013      	beq.n	8000f46 <HAL_GPIO_Init+0x236>
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	4a4b      	ldr	r2, [pc, #300]	; (8001050 <HAL_GPIO_Init+0x340>)
 8000f22:	4293      	cmp	r3, r2
 8000f24:	d00d      	beq.n	8000f42 <HAL_GPIO_Init+0x232>
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	4a4a      	ldr	r2, [pc, #296]	; (8001054 <HAL_GPIO_Init+0x344>)
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	d007      	beq.n	8000f3e <HAL_GPIO_Init+0x22e>
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	4a49      	ldr	r2, [pc, #292]	; (8001058 <HAL_GPIO_Init+0x348>)
 8000f32:	4293      	cmp	r3, r2
 8000f34:	d101      	bne.n	8000f3a <HAL_GPIO_Init+0x22a>
 8000f36:	2306      	movs	r3, #6
 8000f38:	e00c      	b.n	8000f54 <HAL_GPIO_Init+0x244>
 8000f3a:	2307      	movs	r3, #7
 8000f3c:	e00a      	b.n	8000f54 <HAL_GPIO_Init+0x244>
 8000f3e:	2305      	movs	r3, #5
 8000f40:	e008      	b.n	8000f54 <HAL_GPIO_Init+0x244>
 8000f42:	2304      	movs	r3, #4
 8000f44:	e006      	b.n	8000f54 <HAL_GPIO_Init+0x244>
 8000f46:	2303      	movs	r3, #3
 8000f48:	e004      	b.n	8000f54 <HAL_GPIO_Init+0x244>
 8000f4a:	2302      	movs	r3, #2
 8000f4c:	e002      	b.n	8000f54 <HAL_GPIO_Init+0x244>
 8000f4e:	2301      	movs	r3, #1
 8000f50:	e000      	b.n	8000f54 <HAL_GPIO_Init+0x244>
 8000f52:	2300      	movs	r3, #0
 8000f54:	697a      	ldr	r2, [r7, #20]
 8000f56:	f002 0203 	and.w	r2, r2, #3
 8000f5a:	0092      	lsls	r2, r2, #2
 8000f5c:	4093      	lsls	r3, r2
 8000f5e:	693a      	ldr	r2, [r7, #16]
 8000f60:	4313      	orrs	r3, r2
 8000f62:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000f64:	4936      	ldr	r1, [pc, #216]	; (8001040 <HAL_GPIO_Init+0x330>)
 8000f66:	697b      	ldr	r3, [r7, #20]
 8000f68:	089b      	lsrs	r3, r3, #2
 8000f6a:	3302      	adds	r3, #2
 8000f6c:	693a      	ldr	r2, [r7, #16]
 8000f6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000f72:	4b3a      	ldr	r3, [pc, #232]	; (800105c <HAL_GPIO_Init+0x34c>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	43db      	mvns	r3, r3
 8000f7c:	693a      	ldr	r2, [r7, #16]
 8000f7e:	4013      	ands	r3, r2
 8000f80:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	685b      	ldr	r3, [r3, #4]
 8000f86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d003      	beq.n	8000f96 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000f8e:	693a      	ldr	r2, [r7, #16]
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	4313      	orrs	r3, r2
 8000f94:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000f96:	4a31      	ldr	r2, [pc, #196]	; (800105c <HAL_GPIO_Init+0x34c>)
 8000f98:	693b      	ldr	r3, [r7, #16]
 8000f9a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8000f9c:	4b2f      	ldr	r3, [pc, #188]	; (800105c <HAL_GPIO_Init+0x34c>)
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	43db      	mvns	r3, r3
 8000fa6:	693a      	ldr	r2, [r7, #16]
 8000fa8:	4013      	ands	r3, r2
 8000faa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d003      	beq.n	8000fc0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000fb8:	693a      	ldr	r2, [r7, #16]
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	4313      	orrs	r3, r2
 8000fbe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000fc0:	4a26      	ldr	r2, [pc, #152]	; (800105c <HAL_GPIO_Init+0x34c>)
 8000fc2:	693b      	ldr	r3, [r7, #16]
 8000fc4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000fc6:	4b25      	ldr	r3, [pc, #148]	; (800105c <HAL_GPIO_Init+0x34c>)
 8000fc8:	689b      	ldr	r3, [r3, #8]
 8000fca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	43db      	mvns	r3, r3
 8000fd0:	693a      	ldr	r2, [r7, #16]
 8000fd2:	4013      	ands	r3, r2
 8000fd4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	685b      	ldr	r3, [r3, #4]
 8000fda:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d003      	beq.n	8000fea <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000fe2:	693a      	ldr	r2, [r7, #16]
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	4313      	orrs	r3, r2
 8000fe8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000fea:	4a1c      	ldr	r2, [pc, #112]	; (800105c <HAL_GPIO_Init+0x34c>)
 8000fec:	693b      	ldr	r3, [r7, #16]
 8000fee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000ff0:	4b1a      	ldr	r3, [pc, #104]	; (800105c <HAL_GPIO_Init+0x34c>)
 8000ff2:	68db      	ldr	r3, [r3, #12]
 8000ff4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	43db      	mvns	r3, r3
 8000ffa:	693a      	ldr	r2, [r7, #16]
 8000ffc:	4013      	ands	r3, r2
 8000ffe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	685b      	ldr	r3, [r3, #4]
 8001004:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001008:	2b00      	cmp	r3, #0
 800100a:	d003      	beq.n	8001014 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800100c:	693a      	ldr	r2, [r7, #16]
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	4313      	orrs	r3, r2
 8001012:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001014:	4a11      	ldr	r2, [pc, #68]	; (800105c <HAL_GPIO_Init+0x34c>)
 8001016:	693b      	ldr	r3, [r7, #16]
 8001018:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800101a:	697b      	ldr	r3, [r7, #20]
 800101c:	3301      	adds	r3, #1
 800101e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	681a      	ldr	r2, [r3, #0]
 8001024:	697b      	ldr	r3, [r7, #20]
 8001026:	fa22 f303 	lsr.w	r3, r2, r3
 800102a:	2b00      	cmp	r3, #0
 800102c:	f47f ae78 	bne.w	8000d20 <HAL_GPIO_Init+0x10>
  }
}
 8001030:	bf00      	nop
 8001032:	371c      	adds	r7, #28
 8001034:	46bd      	mov	sp, r7
 8001036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103a:	4770      	bx	lr
 800103c:	40021000 	.word	0x40021000
 8001040:	40010000 	.word	0x40010000
 8001044:	48000400 	.word	0x48000400
 8001048:	48000800 	.word	0x48000800
 800104c:	48000c00 	.word	0x48000c00
 8001050:	48001000 	.word	0x48001000
 8001054:	48001400 	.word	0x48001400
 8001058:	48001800 	.word	0x48001800
 800105c:	40010400 	.word	0x40010400

08001060 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001060:	b480      	push	{r7}
 8001062:	b083      	sub	sp, #12
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
 8001068:	460b      	mov	r3, r1
 800106a:	807b      	strh	r3, [r7, #2]
 800106c:	4613      	mov	r3, r2
 800106e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001070:	787b      	ldrb	r3, [r7, #1]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d003      	beq.n	800107e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001076:	887a      	ldrh	r2, [r7, #2]
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800107c:	e002      	b.n	8001084 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800107e:	887a      	ldrh	r2, [r7, #2]
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001084:	bf00      	nop
 8001086:	370c      	adds	r7, #12
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr

08001090 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001090:	b480      	push	{r7}
 8001092:	b085      	sub	sp, #20
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
 8001098:	460b      	mov	r3, r1
 800109a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	695b      	ldr	r3, [r3, #20]
 80010a0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80010a2:	887a      	ldrh	r2, [r7, #2]
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	4013      	ands	r3, r2
 80010a8:	041a      	lsls	r2, r3, #16
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	43d9      	mvns	r1, r3
 80010ae:	887b      	ldrh	r3, [r7, #2]
 80010b0:	400b      	ands	r3, r1
 80010b2:	431a      	orrs	r2, r3
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	619a      	str	r2, [r3, #24]
}
 80010b8:	bf00      	nop
 80010ba:	3714      	adds	r7, #20
 80010bc:	46bd      	mov	sp, r7
 80010be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c2:	4770      	bx	lr

080010c4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80010c8:	4b04      	ldr	r3, [pc, #16]	; (80010dc <HAL_PWREx_GetVoltageRange+0x18>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80010d0:	4618      	mov	r0, r3
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr
 80010da:	bf00      	nop
 80010dc:	40007000 	.word	0x40007000

080010e0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b085      	sub	sp, #20
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80010ee:	d130      	bne.n	8001152 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80010f0:	4b23      	ldr	r3, [pc, #140]	; (8001180 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80010f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80010fc:	d038      	beq.n	8001170 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80010fe:	4b20      	ldr	r3, [pc, #128]	; (8001180 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001106:	4a1e      	ldr	r2, [pc, #120]	; (8001180 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001108:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800110c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800110e:	4b1d      	ldr	r3, [pc, #116]	; (8001184 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	2232      	movs	r2, #50	; 0x32
 8001114:	fb02 f303 	mul.w	r3, r2, r3
 8001118:	4a1b      	ldr	r2, [pc, #108]	; (8001188 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800111a:	fba2 2303 	umull	r2, r3, r2, r3
 800111e:	0c9b      	lsrs	r3, r3, #18
 8001120:	3301      	adds	r3, #1
 8001122:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001124:	e002      	b.n	800112c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	3b01      	subs	r3, #1
 800112a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800112c:	4b14      	ldr	r3, [pc, #80]	; (8001180 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800112e:	695b      	ldr	r3, [r3, #20]
 8001130:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001134:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001138:	d102      	bne.n	8001140 <HAL_PWREx_ControlVoltageScaling+0x60>
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	2b00      	cmp	r3, #0
 800113e:	d1f2      	bne.n	8001126 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001140:	4b0f      	ldr	r3, [pc, #60]	; (8001180 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001142:	695b      	ldr	r3, [r3, #20]
 8001144:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001148:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800114c:	d110      	bne.n	8001170 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800114e:	2303      	movs	r3, #3
 8001150:	e00f      	b.n	8001172 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001152:	4b0b      	ldr	r3, [pc, #44]	; (8001180 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800115a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800115e:	d007      	beq.n	8001170 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001160:	4b07      	ldr	r3, [pc, #28]	; (8001180 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001168:	4a05      	ldr	r2, [pc, #20]	; (8001180 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800116a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800116e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001170:	2300      	movs	r3, #0
}
 8001172:	4618      	mov	r0, r3
 8001174:	3714      	adds	r7, #20
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr
 800117e:	bf00      	nop
 8001180:	40007000 	.word	0x40007000
 8001184:	20000000 	.word	0x20000000
 8001188:	431bde83 	.word	0x431bde83

0800118c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b088      	sub	sp, #32
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	2b00      	cmp	r3, #0
 8001198:	d101      	bne.n	800119e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800119a:	2301      	movs	r3, #1
 800119c:	e3d4      	b.n	8001948 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800119e:	4ba1      	ldr	r3, [pc, #644]	; (8001424 <HAL_RCC_OscConfig+0x298>)
 80011a0:	689b      	ldr	r3, [r3, #8]
 80011a2:	f003 030c 	and.w	r3, r3, #12
 80011a6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80011a8:	4b9e      	ldr	r3, [pc, #632]	; (8001424 <HAL_RCC_OscConfig+0x298>)
 80011aa:	68db      	ldr	r3, [r3, #12]
 80011ac:	f003 0303 	and.w	r3, r3, #3
 80011b0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f003 0310 	and.w	r3, r3, #16
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	f000 80e4 	beq.w	8001388 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80011c0:	69bb      	ldr	r3, [r7, #24]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d007      	beq.n	80011d6 <HAL_RCC_OscConfig+0x4a>
 80011c6:	69bb      	ldr	r3, [r7, #24]
 80011c8:	2b0c      	cmp	r3, #12
 80011ca:	f040 808b 	bne.w	80012e4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80011ce:	697b      	ldr	r3, [r7, #20]
 80011d0:	2b01      	cmp	r3, #1
 80011d2:	f040 8087 	bne.w	80012e4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80011d6:	4b93      	ldr	r3, [pc, #588]	; (8001424 <HAL_RCC_OscConfig+0x298>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f003 0302 	and.w	r3, r3, #2
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d005      	beq.n	80011ee <HAL_RCC_OscConfig+0x62>
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	699b      	ldr	r3, [r3, #24]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d101      	bne.n	80011ee <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80011ea:	2301      	movs	r3, #1
 80011ec:	e3ac      	b.n	8001948 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	6a1a      	ldr	r2, [r3, #32]
 80011f2:	4b8c      	ldr	r3, [pc, #560]	; (8001424 <HAL_RCC_OscConfig+0x298>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f003 0308 	and.w	r3, r3, #8
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d004      	beq.n	8001208 <HAL_RCC_OscConfig+0x7c>
 80011fe:	4b89      	ldr	r3, [pc, #548]	; (8001424 <HAL_RCC_OscConfig+0x298>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001206:	e005      	b.n	8001214 <HAL_RCC_OscConfig+0x88>
 8001208:	4b86      	ldr	r3, [pc, #536]	; (8001424 <HAL_RCC_OscConfig+0x298>)
 800120a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800120e:	091b      	lsrs	r3, r3, #4
 8001210:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001214:	4293      	cmp	r3, r2
 8001216:	d223      	bcs.n	8001260 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	6a1b      	ldr	r3, [r3, #32]
 800121c:	4618      	mov	r0, r3
 800121e:	f000 fd3f 	bl	8001ca0 <RCC_SetFlashLatencyFromMSIRange>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d001      	beq.n	800122c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001228:	2301      	movs	r3, #1
 800122a:	e38d      	b.n	8001948 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800122c:	4b7d      	ldr	r3, [pc, #500]	; (8001424 <HAL_RCC_OscConfig+0x298>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a7c      	ldr	r2, [pc, #496]	; (8001424 <HAL_RCC_OscConfig+0x298>)
 8001232:	f043 0308 	orr.w	r3, r3, #8
 8001236:	6013      	str	r3, [r2, #0]
 8001238:	4b7a      	ldr	r3, [pc, #488]	; (8001424 <HAL_RCC_OscConfig+0x298>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	6a1b      	ldr	r3, [r3, #32]
 8001244:	4977      	ldr	r1, [pc, #476]	; (8001424 <HAL_RCC_OscConfig+0x298>)
 8001246:	4313      	orrs	r3, r2
 8001248:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800124a:	4b76      	ldr	r3, [pc, #472]	; (8001424 <HAL_RCC_OscConfig+0x298>)
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	69db      	ldr	r3, [r3, #28]
 8001256:	021b      	lsls	r3, r3, #8
 8001258:	4972      	ldr	r1, [pc, #456]	; (8001424 <HAL_RCC_OscConfig+0x298>)
 800125a:	4313      	orrs	r3, r2
 800125c:	604b      	str	r3, [r1, #4]
 800125e:	e025      	b.n	80012ac <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001260:	4b70      	ldr	r3, [pc, #448]	; (8001424 <HAL_RCC_OscConfig+0x298>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4a6f      	ldr	r2, [pc, #444]	; (8001424 <HAL_RCC_OscConfig+0x298>)
 8001266:	f043 0308 	orr.w	r3, r3, #8
 800126a:	6013      	str	r3, [r2, #0]
 800126c:	4b6d      	ldr	r3, [pc, #436]	; (8001424 <HAL_RCC_OscConfig+0x298>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	6a1b      	ldr	r3, [r3, #32]
 8001278:	496a      	ldr	r1, [pc, #424]	; (8001424 <HAL_RCC_OscConfig+0x298>)
 800127a:	4313      	orrs	r3, r2
 800127c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800127e:	4b69      	ldr	r3, [pc, #420]	; (8001424 <HAL_RCC_OscConfig+0x298>)
 8001280:	685b      	ldr	r3, [r3, #4]
 8001282:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	69db      	ldr	r3, [r3, #28]
 800128a:	021b      	lsls	r3, r3, #8
 800128c:	4965      	ldr	r1, [pc, #404]	; (8001424 <HAL_RCC_OscConfig+0x298>)
 800128e:	4313      	orrs	r3, r2
 8001290:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001292:	69bb      	ldr	r3, [r7, #24]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d109      	bne.n	80012ac <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	6a1b      	ldr	r3, [r3, #32]
 800129c:	4618      	mov	r0, r3
 800129e:	f000 fcff 	bl	8001ca0 <RCC_SetFlashLatencyFromMSIRange>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d001      	beq.n	80012ac <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80012a8:	2301      	movs	r3, #1
 80012aa:	e34d      	b.n	8001948 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80012ac:	f000 fc36 	bl	8001b1c <HAL_RCC_GetSysClockFreq>
 80012b0:	4601      	mov	r1, r0
 80012b2:	4b5c      	ldr	r3, [pc, #368]	; (8001424 <HAL_RCC_OscConfig+0x298>)
 80012b4:	689b      	ldr	r3, [r3, #8]
 80012b6:	091b      	lsrs	r3, r3, #4
 80012b8:	f003 030f 	and.w	r3, r3, #15
 80012bc:	4a5a      	ldr	r2, [pc, #360]	; (8001428 <HAL_RCC_OscConfig+0x29c>)
 80012be:	5cd3      	ldrb	r3, [r2, r3]
 80012c0:	f003 031f 	and.w	r3, r3, #31
 80012c4:	fa21 f303 	lsr.w	r3, r1, r3
 80012c8:	4a58      	ldr	r2, [pc, #352]	; (800142c <HAL_RCC_OscConfig+0x2a0>)
 80012ca:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80012cc:	4b58      	ldr	r3, [pc, #352]	; (8001430 <HAL_RCC_OscConfig+0x2a4>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4618      	mov	r0, r3
 80012d2:	f7ff fbaf 	bl	8000a34 <HAL_InitTick>
 80012d6:	4603      	mov	r3, r0
 80012d8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80012da:	7bfb      	ldrb	r3, [r7, #15]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d052      	beq.n	8001386 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80012e0:	7bfb      	ldrb	r3, [r7, #15]
 80012e2:	e331      	b.n	8001948 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	699b      	ldr	r3, [r3, #24]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d032      	beq.n	8001352 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80012ec:	4b4d      	ldr	r3, [pc, #308]	; (8001424 <HAL_RCC_OscConfig+0x298>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4a4c      	ldr	r2, [pc, #304]	; (8001424 <HAL_RCC_OscConfig+0x298>)
 80012f2:	f043 0301 	orr.w	r3, r3, #1
 80012f6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80012f8:	f7ff fbec 	bl	8000ad4 <HAL_GetTick>
 80012fc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80012fe:	e008      	b.n	8001312 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001300:	f7ff fbe8 	bl	8000ad4 <HAL_GetTick>
 8001304:	4602      	mov	r2, r0
 8001306:	693b      	ldr	r3, [r7, #16]
 8001308:	1ad3      	subs	r3, r2, r3
 800130a:	2b02      	cmp	r3, #2
 800130c:	d901      	bls.n	8001312 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800130e:	2303      	movs	r3, #3
 8001310:	e31a      	b.n	8001948 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001312:	4b44      	ldr	r3, [pc, #272]	; (8001424 <HAL_RCC_OscConfig+0x298>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f003 0302 	and.w	r3, r3, #2
 800131a:	2b00      	cmp	r3, #0
 800131c:	d0f0      	beq.n	8001300 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800131e:	4b41      	ldr	r3, [pc, #260]	; (8001424 <HAL_RCC_OscConfig+0x298>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4a40      	ldr	r2, [pc, #256]	; (8001424 <HAL_RCC_OscConfig+0x298>)
 8001324:	f043 0308 	orr.w	r3, r3, #8
 8001328:	6013      	str	r3, [r2, #0]
 800132a:	4b3e      	ldr	r3, [pc, #248]	; (8001424 <HAL_RCC_OscConfig+0x298>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	6a1b      	ldr	r3, [r3, #32]
 8001336:	493b      	ldr	r1, [pc, #236]	; (8001424 <HAL_RCC_OscConfig+0x298>)
 8001338:	4313      	orrs	r3, r2
 800133a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800133c:	4b39      	ldr	r3, [pc, #228]	; (8001424 <HAL_RCC_OscConfig+0x298>)
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	69db      	ldr	r3, [r3, #28]
 8001348:	021b      	lsls	r3, r3, #8
 800134a:	4936      	ldr	r1, [pc, #216]	; (8001424 <HAL_RCC_OscConfig+0x298>)
 800134c:	4313      	orrs	r3, r2
 800134e:	604b      	str	r3, [r1, #4]
 8001350:	e01a      	b.n	8001388 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001352:	4b34      	ldr	r3, [pc, #208]	; (8001424 <HAL_RCC_OscConfig+0x298>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	4a33      	ldr	r2, [pc, #204]	; (8001424 <HAL_RCC_OscConfig+0x298>)
 8001358:	f023 0301 	bic.w	r3, r3, #1
 800135c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800135e:	f7ff fbb9 	bl	8000ad4 <HAL_GetTick>
 8001362:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001364:	e008      	b.n	8001378 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001366:	f7ff fbb5 	bl	8000ad4 <HAL_GetTick>
 800136a:	4602      	mov	r2, r0
 800136c:	693b      	ldr	r3, [r7, #16]
 800136e:	1ad3      	subs	r3, r2, r3
 8001370:	2b02      	cmp	r3, #2
 8001372:	d901      	bls.n	8001378 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001374:	2303      	movs	r3, #3
 8001376:	e2e7      	b.n	8001948 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001378:	4b2a      	ldr	r3, [pc, #168]	; (8001424 <HAL_RCC_OscConfig+0x298>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f003 0302 	and.w	r3, r3, #2
 8001380:	2b00      	cmp	r3, #0
 8001382:	d1f0      	bne.n	8001366 <HAL_RCC_OscConfig+0x1da>
 8001384:	e000      	b.n	8001388 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001386:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f003 0301 	and.w	r3, r3, #1
 8001390:	2b00      	cmp	r3, #0
 8001392:	d074      	beq.n	800147e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001394:	69bb      	ldr	r3, [r7, #24]
 8001396:	2b08      	cmp	r3, #8
 8001398:	d005      	beq.n	80013a6 <HAL_RCC_OscConfig+0x21a>
 800139a:	69bb      	ldr	r3, [r7, #24]
 800139c:	2b0c      	cmp	r3, #12
 800139e:	d10e      	bne.n	80013be <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80013a0:	697b      	ldr	r3, [r7, #20]
 80013a2:	2b03      	cmp	r3, #3
 80013a4:	d10b      	bne.n	80013be <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013a6:	4b1f      	ldr	r3, [pc, #124]	; (8001424 <HAL_RCC_OscConfig+0x298>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d064      	beq.n	800147c <HAL_RCC_OscConfig+0x2f0>
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d160      	bne.n	800147c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80013ba:	2301      	movs	r3, #1
 80013bc:	e2c4      	b.n	8001948 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013c6:	d106      	bne.n	80013d6 <HAL_RCC_OscConfig+0x24a>
 80013c8:	4b16      	ldr	r3, [pc, #88]	; (8001424 <HAL_RCC_OscConfig+0x298>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a15      	ldr	r2, [pc, #84]	; (8001424 <HAL_RCC_OscConfig+0x298>)
 80013ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013d2:	6013      	str	r3, [r2, #0]
 80013d4:	e01d      	b.n	8001412 <HAL_RCC_OscConfig+0x286>
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80013de:	d10c      	bne.n	80013fa <HAL_RCC_OscConfig+0x26e>
 80013e0:	4b10      	ldr	r3, [pc, #64]	; (8001424 <HAL_RCC_OscConfig+0x298>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4a0f      	ldr	r2, [pc, #60]	; (8001424 <HAL_RCC_OscConfig+0x298>)
 80013e6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013ea:	6013      	str	r3, [r2, #0]
 80013ec:	4b0d      	ldr	r3, [pc, #52]	; (8001424 <HAL_RCC_OscConfig+0x298>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4a0c      	ldr	r2, [pc, #48]	; (8001424 <HAL_RCC_OscConfig+0x298>)
 80013f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013f6:	6013      	str	r3, [r2, #0]
 80013f8:	e00b      	b.n	8001412 <HAL_RCC_OscConfig+0x286>
 80013fa:	4b0a      	ldr	r3, [pc, #40]	; (8001424 <HAL_RCC_OscConfig+0x298>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	4a09      	ldr	r2, [pc, #36]	; (8001424 <HAL_RCC_OscConfig+0x298>)
 8001400:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001404:	6013      	str	r3, [r2, #0]
 8001406:	4b07      	ldr	r3, [pc, #28]	; (8001424 <HAL_RCC_OscConfig+0x298>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	4a06      	ldr	r2, [pc, #24]	; (8001424 <HAL_RCC_OscConfig+0x298>)
 800140c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001410:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d01c      	beq.n	8001454 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800141a:	f7ff fb5b 	bl	8000ad4 <HAL_GetTick>
 800141e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001420:	e011      	b.n	8001446 <HAL_RCC_OscConfig+0x2ba>
 8001422:	bf00      	nop
 8001424:	40021000 	.word	0x40021000
 8001428:	08003644 	.word	0x08003644
 800142c:	20000000 	.word	0x20000000
 8001430:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001434:	f7ff fb4e 	bl	8000ad4 <HAL_GetTick>
 8001438:	4602      	mov	r2, r0
 800143a:	693b      	ldr	r3, [r7, #16]
 800143c:	1ad3      	subs	r3, r2, r3
 800143e:	2b64      	cmp	r3, #100	; 0x64
 8001440:	d901      	bls.n	8001446 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001442:	2303      	movs	r3, #3
 8001444:	e280      	b.n	8001948 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001446:	4baf      	ldr	r3, [pc, #700]	; (8001704 <HAL_RCC_OscConfig+0x578>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800144e:	2b00      	cmp	r3, #0
 8001450:	d0f0      	beq.n	8001434 <HAL_RCC_OscConfig+0x2a8>
 8001452:	e014      	b.n	800147e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001454:	f7ff fb3e 	bl	8000ad4 <HAL_GetTick>
 8001458:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800145a:	e008      	b.n	800146e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800145c:	f7ff fb3a 	bl	8000ad4 <HAL_GetTick>
 8001460:	4602      	mov	r2, r0
 8001462:	693b      	ldr	r3, [r7, #16]
 8001464:	1ad3      	subs	r3, r2, r3
 8001466:	2b64      	cmp	r3, #100	; 0x64
 8001468:	d901      	bls.n	800146e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800146a:	2303      	movs	r3, #3
 800146c:	e26c      	b.n	8001948 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800146e:	4ba5      	ldr	r3, [pc, #660]	; (8001704 <HAL_RCC_OscConfig+0x578>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001476:	2b00      	cmp	r3, #0
 8001478:	d1f0      	bne.n	800145c <HAL_RCC_OscConfig+0x2d0>
 800147a:	e000      	b.n	800147e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800147c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f003 0302 	and.w	r3, r3, #2
 8001486:	2b00      	cmp	r3, #0
 8001488:	d060      	beq.n	800154c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800148a:	69bb      	ldr	r3, [r7, #24]
 800148c:	2b04      	cmp	r3, #4
 800148e:	d005      	beq.n	800149c <HAL_RCC_OscConfig+0x310>
 8001490:	69bb      	ldr	r3, [r7, #24]
 8001492:	2b0c      	cmp	r3, #12
 8001494:	d119      	bne.n	80014ca <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001496:	697b      	ldr	r3, [r7, #20]
 8001498:	2b02      	cmp	r3, #2
 800149a:	d116      	bne.n	80014ca <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800149c:	4b99      	ldr	r3, [pc, #612]	; (8001704 <HAL_RCC_OscConfig+0x578>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d005      	beq.n	80014b4 <HAL_RCC_OscConfig+0x328>
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	68db      	ldr	r3, [r3, #12]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d101      	bne.n	80014b4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80014b0:	2301      	movs	r3, #1
 80014b2:	e249      	b.n	8001948 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014b4:	4b93      	ldr	r3, [pc, #588]	; (8001704 <HAL_RCC_OscConfig+0x578>)
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	691b      	ldr	r3, [r3, #16]
 80014c0:	061b      	lsls	r3, r3, #24
 80014c2:	4990      	ldr	r1, [pc, #576]	; (8001704 <HAL_RCC_OscConfig+0x578>)
 80014c4:	4313      	orrs	r3, r2
 80014c6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80014c8:	e040      	b.n	800154c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	68db      	ldr	r3, [r3, #12]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d023      	beq.n	800151a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014d2:	4b8c      	ldr	r3, [pc, #560]	; (8001704 <HAL_RCC_OscConfig+0x578>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4a8b      	ldr	r2, [pc, #556]	; (8001704 <HAL_RCC_OscConfig+0x578>)
 80014d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014de:	f7ff faf9 	bl	8000ad4 <HAL_GetTick>
 80014e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80014e4:	e008      	b.n	80014f8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014e6:	f7ff faf5 	bl	8000ad4 <HAL_GetTick>
 80014ea:	4602      	mov	r2, r0
 80014ec:	693b      	ldr	r3, [r7, #16]
 80014ee:	1ad3      	subs	r3, r2, r3
 80014f0:	2b02      	cmp	r3, #2
 80014f2:	d901      	bls.n	80014f8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80014f4:	2303      	movs	r3, #3
 80014f6:	e227      	b.n	8001948 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80014f8:	4b82      	ldr	r3, [pc, #520]	; (8001704 <HAL_RCC_OscConfig+0x578>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001500:	2b00      	cmp	r3, #0
 8001502:	d0f0      	beq.n	80014e6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001504:	4b7f      	ldr	r3, [pc, #508]	; (8001704 <HAL_RCC_OscConfig+0x578>)
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	691b      	ldr	r3, [r3, #16]
 8001510:	061b      	lsls	r3, r3, #24
 8001512:	497c      	ldr	r1, [pc, #496]	; (8001704 <HAL_RCC_OscConfig+0x578>)
 8001514:	4313      	orrs	r3, r2
 8001516:	604b      	str	r3, [r1, #4]
 8001518:	e018      	b.n	800154c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800151a:	4b7a      	ldr	r3, [pc, #488]	; (8001704 <HAL_RCC_OscConfig+0x578>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	4a79      	ldr	r2, [pc, #484]	; (8001704 <HAL_RCC_OscConfig+0x578>)
 8001520:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001524:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001526:	f7ff fad5 	bl	8000ad4 <HAL_GetTick>
 800152a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800152c:	e008      	b.n	8001540 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800152e:	f7ff fad1 	bl	8000ad4 <HAL_GetTick>
 8001532:	4602      	mov	r2, r0
 8001534:	693b      	ldr	r3, [r7, #16]
 8001536:	1ad3      	subs	r3, r2, r3
 8001538:	2b02      	cmp	r3, #2
 800153a:	d901      	bls.n	8001540 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800153c:	2303      	movs	r3, #3
 800153e:	e203      	b.n	8001948 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001540:	4b70      	ldr	r3, [pc, #448]	; (8001704 <HAL_RCC_OscConfig+0x578>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001548:	2b00      	cmp	r3, #0
 800154a:	d1f0      	bne.n	800152e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f003 0308 	and.w	r3, r3, #8
 8001554:	2b00      	cmp	r3, #0
 8001556:	d03c      	beq.n	80015d2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	695b      	ldr	r3, [r3, #20]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d01c      	beq.n	800159a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001560:	4b68      	ldr	r3, [pc, #416]	; (8001704 <HAL_RCC_OscConfig+0x578>)
 8001562:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001566:	4a67      	ldr	r2, [pc, #412]	; (8001704 <HAL_RCC_OscConfig+0x578>)
 8001568:	f043 0301 	orr.w	r3, r3, #1
 800156c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001570:	f7ff fab0 	bl	8000ad4 <HAL_GetTick>
 8001574:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001576:	e008      	b.n	800158a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001578:	f7ff faac 	bl	8000ad4 <HAL_GetTick>
 800157c:	4602      	mov	r2, r0
 800157e:	693b      	ldr	r3, [r7, #16]
 8001580:	1ad3      	subs	r3, r2, r3
 8001582:	2b02      	cmp	r3, #2
 8001584:	d901      	bls.n	800158a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001586:	2303      	movs	r3, #3
 8001588:	e1de      	b.n	8001948 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800158a:	4b5e      	ldr	r3, [pc, #376]	; (8001704 <HAL_RCC_OscConfig+0x578>)
 800158c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001590:	f003 0302 	and.w	r3, r3, #2
 8001594:	2b00      	cmp	r3, #0
 8001596:	d0ef      	beq.n	8001578 <HAL_RCC_OscConfig+0x3ec>
 8001598:	e01b      	b.n	80015d2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800159a:	4b5a      	ldr	r3, [pc, #360]	; (8001704 <HAL_RCC_OscConfig+0x578>)
 800159c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015a0:	4a58      	ldr	r2, [pc, #352]	; (8001704 <HAL_RCC_OscConfig+0x578>)
 80015a2:	f023 0301 	bic.w	r3, r3, #1
 80015a6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015aa:	f7ff fa93 	bl	8000ad4 <HAL_GetTick>
 80015ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80015b0:	e008      	b.n	80015c4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015b2:	f7ff fa8f 	bl	8000ad4 <HAL_GetTick>
 80015b6:	4602      	mov	r2, r0
 80015b8:	693b      	ldr	r3, [r7, #16]
 80015ba:	1ad3      	subs	r3, r2, r3
 80015bc:	2b02      	cmp	r3, #2
 80015be:	d901      	bls.n	80015c4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80015c0:	2303      	movs	r3, #3
 80015c2:	e1c1      	b.n	8001948 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80015c4:	4b4f      	ldr	r3, [pc, #316]	; (8001704 <HAL_RCC_OscConfig+0x578>)
 80015c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015ca:	f003 0302 	and.w	r3, r3, #2
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d1ef      	bne.n	80015b2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f003 0304 	and.w	r3, r3, #4
 80015da:	2b00      	cmp	r3, #0
 80015dc:	f000 80a6 	beq.w	800172c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015e0:	2300      	movs	r3, #0
 80015e2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80015e4:	4b47      	ldr	r3, [pc, #284]	; (8001704 <HAL_RCC_OscConfig+0x578>)
 80015e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d10d      	bne.n	800160c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015f0:	4b44      	ldr	r3, [pc, #272]	; (8001704 <HAL_RCC_OscConfig+0x578>)
 80015f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015f4:	4a43      	ldr	r2, [pc, #268]	; (8001704 <HAL_RCC_OscConfig+0x578>)
 80015f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015fa:	6593      	str	r3, [r2, #88]	; 0x58
 80015fc:	4b41      	ldr	r3, [pc, #260]	; (8001704 <HAL_RCC_OscConfig+0x578>)
 80015fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001600:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001604:	60bb      	str	r3, [r7, #8]
 8001606:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001608:	2301      	movs	r3, #1
 800160a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800160c:	4b3e      	ldr	r3, [pc, #248]	; (8001708 <HAL_RCC_OscConfig+0x57c>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001614:	2b00      	cmp	r3, #0
 8001616:	d118      	bne.n	800164a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001618:	4b3b      	ldr	r3, [pc, #236]	; (8001708 <HAL_RCC_OscConfig+0x57c>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a3a      	ldr	r2, [pc, #232]	; (8001708 <HAL_RCC_OscConfig+0x57c>)
 800161e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001622:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001624:	f7ff fa56 	bl	8000ad4 <HAL_GetTick>
 8001628:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800162a:	e008      	b.n	800163e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800162c:	f7ff fa52 	bl	8000ad4 <HAL_GetTick>
 8001630:	4602      	mov	r2, r0
 8001632:	693b      	ldr	r3, [r7, #16]
 8001634:	1ad3      	subs	r3, r2, r3
 8001636:	2b02      	cmp	r3, #2
 8001638:	d901      	bls.n	800163e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800163a:	2303      	movs	r3, #3
 800163c:	e184      	b.n	8001948 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800163e:	4b32      	ldr	r3, [pc, #200]	; (8001708 <HAL_RCC_OscConfig+0x57c>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001646:	2b00      	cmp	r3, #0
 8001648:	d0f0      	beq.n	800162c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	689b      	ldr	r3, [r3, #8]
 800164e:	2b01      	cmp	r3, #1
 8001650:	d108      	bne.n	8001664 <HAL_RCC_OscConfig+0x4d8>
 8001652:	4b2c      	ldr	r3, [pc, #176]	; (8001704 <HAL_RCC_OscConfig+0x578>)
 8001654:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001658:	4a2a      	ldr	r2, [pc, #168]	; (8001704 <HAL_RCC_OscConfig+0x578>)
 800165a:	f043 0301 	orr.w	r3, r3, #1
 800165e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001662:	e024      	b.n	80016ae <HAL_RCC_OscConfig+0x522>
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	689b      	ldr	r3, [r3, #8]
 8001668:	2b05      	cmp	r3, #5
 800166a:	d110      	bne.n	800168e <HAL_RCC_OscConfig+0x502>
 800166c:	4b25      	ldr	r3, [pc, #148]	; (8001704 <HAL_RCC_OscConfig+0x578>)
 800166e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001672:	4a24      	ldr	r2, [pc, #144]	; (8001704 <HAL_RCC_OscConfig+0x578>)
 8001674:	f043 0304 	orr.w	r3, r3, #4
 8001678:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800167c:	4b21      	ldr	r3, [pc, #132]	; (8001704 <HAL_RCC_OscConfig+0x578>)
 800167e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001682:	4a20      	ldr	r2, [pc, #128]	; (8001704 <HAL_RCC_OscConfig+0x578>)
 8001684:	f043 0301 	orr.w	r3, r3, #1
 8001688:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800168c:	e00f      	b.n	80016ae <HAL_RCC_OscConfig+0x522>
 800168e:	4b1d      	ldr	r3, [pc, #116]	; (8001704 <HAL_RCC_OscConfig+0x578>)
 8001690:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001694:	4a1b      	ldr	r2, [pc, #108]	; (8001704 <HAL_RCC_OscConfig+0x578>)
 8001696:	f023 0301 	bic.w	r3, r3, #1
 800169a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800169e:	4b19      	ldr	r3, [pc, #100]	; (8001704 <HAL_RCC_OscConfig+0x578>)
 80016a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016a4:	4a17      	ldr	r2, [pc, #92]	; (8001704 <HAL_RCC_OscConfig+0x578>)
 80016a6:	f023 0304 	bic.w	r3, r3, #4
 80016aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	689b      	ldr	r3, [r3, #8]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d016      	beq.n	80016e4 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016b6:	f7ff fa0d 	bl	8000ad4 <HAL_GetTick>
 80016ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80016bc:	e00a      	b.n	80016d4 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016be:	f7ff fa09 	bl	8000ad4 <HAL_GetTick>
 80016c2:	4602      	mov	r2, r0
 80016c4:	693b      	ldr	r3, [r7, #16]
 80016c6:	1ad3      	subs	r3, r2, r3
 80016c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80016cc:	4293      	cmp	r3, r2
 80016ce:	d901      	bls.n	80016d4 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80016d0:	2303      	movs	r3, #3
 80016d2:	e139      	b.n	8001948 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80016d4:	4b0b      	ldr	r3, [pc, #44]	; (8001704 <HAL_RCC_OscConfig+0x578>)
 80016d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016da:	f003 0302 	and.w	r3, r3, #2
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d0ed      	beq.n	80016be <HAL_RCC_OscConfig+0x532>
 80016e2:	e01a      	b.n	800171a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016e4:	f7ff f9f6 	bl	8000ad4 <HAL_GetTick>
 80016e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80016ea:	e00f      	b.n	800170c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016ec:	f7ff f9f2 	bl	8000ad4 <HAL_GetTick>
 80016f0:	4602      	mov	r2, r0
 80016f2:	693b      	ldr	r3, [r7, #16]
 80016f4:	1ad3      	subs	r3, r2, r3
 80016f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d906      	bls.n	800170c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80016fe:	2303      	movs	r3, #3
 8001700:	e122      	b.n	8001948 <HAL_RCC_OscConfig+0x7bc>
 8001702:	bf00      	nop
 8001704:	40021000 	.word	0x40021000
 8001708:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800170c:	4b90      	ldr	r3, [pc, #576]	; (8001950 <HAL_RCC_OscConfig+0x7c4>)
 800170e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001712:	f003 0302 	and.w	r3, r3, #2
 8001716:	2b00      	cmp	r3, #0
 8001718:	d1e8      	bne.n	80016ec <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800171a:	7ffb      	ldrb	r3, [r7, #31]
 800171c:	2b01      	cmp	r3, #1
 800171e:	d105      	bne.n	800172c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001720:	4b8b      	ldr	r3, [pc, #556]	; (8001950 <HAL_RCC_OscConfig+0x7c4>)
 8001722:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001724:	4a8a      	ldr	r2, [pc, #552]	; (8001950 <HAL_RCC_OscConfig+0x7c4>)
 8001726:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800172a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001730:	2b00      	cmp	r3, #0
 8001732:	f000 8108 	beq.w	8001946 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800173a:	2b02      	cmp	r3, #2
 800173c:	f040 80d0 	bne.w	80018e0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001740:	4b83      	ldr	r3, [pc, #524]	; (8001950 <HAL_RCC_OscConfig+0x7c4>)
 8001742:	68db      	ldr	r3, [r3, #12]
 8001744:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001746:	697b      	ldr	r3, [r7, #20]
 8001748:	f003 0203 	and.w	r2, r3, #3
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001750:	429a      	cmp	r2, r3
 8001752:	d130      	bne.n	80017b6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001754:	697b      	ldr	r3, [r7, #20]
 8001756:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175e:	3b01      	subs	r3, #1
 8001760:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001762:	429a      	cmp	r2, r3
 8001764:	d127      	bne.n	80017b6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001766:	697b      	ldr	r3, [r7, #20]
 8001768:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001770:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001772:	429a      	cmp	r2, r3
 8001774:	d11f      	bne.n	80017b6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001776:	697b      	ldr	r3, [r7, #20]
 8001778:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800177c:	687a      	ldr	r2, [r7, #4]
 800177e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001780:	2a07      	cmp	r2, #7
 8001782:	bf14      	ite	ne
 8001784:	2201      	movne	r2, #1
 8001786:	2200      	moveq	r2, #0
 8001788:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800178a:	4293      	cmp	r3, r2
 800178c:	d113      	bne.n	80017b6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800178e:	697b      	ldr	r3, [r7, #20]
 8001790:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001798:	085b      	lsrs	r3, r3, #1
 800179a:	3b01      	subs	r3, #1
 800179c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800179e:	429a      	cmp	r2, r3
 80017a0:	d109      	bne.n	80017b6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80017a2:	697b      	ldr	r3, [r7, #20]
 80017a4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ac:	085b      	lsrs	r3, r3, #1
 80017ae:	3b01      	subs	r3, #1
 80017b0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80017b2:	429a      	cmp	r2, r3
 80017b4:	d06e      	beq.n	8001894 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80017b6:	69bb      	ldr	r3, [r7, #24]
 80017b8:	2b0c      	cmp	r3, #12
 80017ba:	d069      	beq.n	8001890 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80017bc:	4b64      	ldr	r3, [pc, #400]	; (8001950 <HAL_RCC_OscConfig+0x7c4>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d105      	bne.n	80017d4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80017c8:	4b61      	ldr	r3, [pc, #388]	; (8001950 <HAL_RCC_OscConfig+0x7c4>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d001      	beq.n	80017d8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80017d4:	2301      	movs	r3, #1
 80017d6:	e0b7      	b.n	8001948 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80017d8:	4b5d      	ldr	r3, [pc, #372]	; (8001950 <HAL_RCC_OscConfig+0x7c4>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a5c      	ldr	r2, [pc, #368]	; (8001950 <HAL_RCC_OscConfig+0x7c4>)
 80017de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80017e2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80017e4:	f7ff f976 	bl	8000ad4 <HAL_GetTick>
 80017e8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017ea:	e008      	b.n	80017fe <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017ec:	f7ff f972 	bl	8000ad4 <HAL_GetTick>
 80017f0:	4602      	mov	r2, r0
 80017f2:	693b      	ldr	r3, [r7, #16]
 80017f4:	1ad3      	subs	r3, r2, r3
 80017f6:	2b02      	cmp	r3, #2
 80017f8:	d901      	bls.n	80017fe <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80017fa:	2303      	movs	r3, #3
 80017fc:	e0a4      	b.n	8001948 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017fe:	4b54      	ldr	r3, [pc, #336]	; (8001950 <HAL_RCC_OscConfig+0x7c4>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001806:	2b00      	cmp	r3, #0
 8001808:	d1f0      	bne.n	80017ec <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800180a:	4b51      	ldr	r3, [pc, #324]	; (8001950 <HAL_RCC_OscConfig+0x7c4>)
 800180c:	68da      	ldr	r2, [r3, #12]
 800180e:	4b51      	ldr	r3, [pc, #324]	; (8001954 <HAL_RCC_OscConfig+0x7c8>)
 8001810:	4013      	ands	r3, r2
 8001812:	687a      	ldr	r2, [r7, #4]
 8001814:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001816:	687a      	ldr	r2, [r7, #4]
 8001818:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800181a:	3a01      	subs	r2, #1
 800181c:	0112      	lsls	r2, r2, #4
 800181e:	4311      	orrs	r1, r2
 8001820:	687a      	ldr	r2, [r7, #4]
 8001822:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001824:	0212      	lsls	r2, r2, #8
 8001826:	4311      	orrs	r1, r2
 8001828:	687a      	ldr	r2, [r7, #4]
 800182a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800182c:	0852      	lsrs	r2, r2, #1
 800182e:	3a01      	subs	r2, #1
 8001830:	0552      	lsls	r2, r2, #21
 8001832:	4311      	orrs	r1, r2
 8001834:	687a      	ldr	r2, [r7, #4]
 8001836:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001838:	0852      	lsrs	r2, r2, #1
 800183a:	3a01      	subs	r2, #1
 800183c:	0652      	lsls	r2, r2, #25
 800183e:	4311      	orrs	r1, r2
 8001840:	687a      	ldr	r2, [r7, #4]
 8001842:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001844:	0912      	lsrs	r2, r2, #4
 8001846:	0452      	lsls	r2, r2, #17
 8001848:	430a      	orrs	r2, r1
 800184a:	4941      	ldr	r1, [pc, #260]	; (8001950 <HAL_RCC_OscConfig+0x7c4>)
 800184c:	4313      	orrs	r3, r2
 800184e:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001850:	4b3f      	ldr	r3, [pc, #252]	; (8001950 <HAL_RCC_OscConfig+0x7c4>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a3e      	ldr	r2, [pc, #248]	; (8001950 <HAL_RCC_OscConfig+0x7c4>)
 8001856:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800185a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800185c:	4b3c      	ldr	r3, [pc, #240]	; (8001950 <HAL_RCC_OscConfig+0x7c4>)
 800185e:	68db      	ldr	r3, [r3, #12]
 8001860:	4a3b      	ldr	r2, [pc, #236]	; (8001950 <HAL_RCC_OscConfig+0x7c4>)
 8001862:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001866:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001868:	f7ff f934 	bl	8000ad4 <HAL_GetTick>
 800186c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800186e:	e008      	b.n	8001882 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001870:	f7ff f930 	bl	8000ad4 <HAL_GetTick>
 8001874:	4602      	mov	r2, r0
 8001876:	693b      	ldr	r3, [r7, #16]
 8001878:	1ad3      	subs	r3, r2, r3
 800187a:	2b02      	cmp	r3, #2
 800187c:	d901      	bls.n	8001882 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800187e:	2303      	movs	r3, #3
 8001880:	e062      	b.n	8001948 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001882:	4b33      	ldr	r3, [pc, #204]	; (8001950 <HAL_RCC_OscConfig+0x7c4>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800188a:	2b00      	cmp	r3, #0
 800188c:	d0f0      	beq.n	8001870 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800188e:	e05a      	b.n	8001946 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001890:	2301      	movs	r3, #1
 8001892:	e059      	b.n	8001948 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001894:	4b2e      	ldr	r3, [pc, #184]	; (8001950 <HAL_RCC_OscConfig+0x7c4>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800189c:	2b00      	cmp	r3, #0
 800189e:	d152      	bne.n	8001946 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80018a0:	4b2b      	ldr	r3, [pc, #172]	; (8001950 <HAL_RCC_OscConfig+0x7c4>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a2a      	ldr	r2, [pc, #168]	; (8001950 <HAL_RCC_OscConfig+0x7c4>)
 80018a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80018aa:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80018ac:	4b28      	ldr	r3, [pc, #160]	; (8001950 <HAL_RCC_OscConfig+0x7c4>)
 80018ae:	68db      	ldr	r3, [r3, #12]
 80018b0:	4a27      	ldr	r2, [pc, #156]	; (8001950 <HAL_RCC_OscConfig+0x7c4>)
 80018b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80018b6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80018b8:	f7ff f90c 	bl	8000ad4 <HAL_GetTick>
 80018bc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018be:	e008      	b.n	80018d2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018c0:	f7ff f908 	bl	8000ad4 <HAL_GetTick>
 80018c4:	4602      	mov	r2, r0
 80018c6:	693b      	ldr	r3, [r7, #16]
 80018c8:	1ad3      	subs	r3, r2, r3
 80018ca:	2b02      	cmp	r3, #2
 80018cc:	d901      	bls.n	80018d2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80018ce:	2303      	movs	r3, #3
 80018d0:	e03a      	b.n	8001948 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018d2:	4b1f      	ldr	r3, [pc, #124]	; (8001950 <HAL_RCC_OscConfig+0x7c4>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d0f0      	beq.n	80018c0 <HAL_RCC_OscConfig+0x734>
 80018de:	e032      	b.n	8001946 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80018e0:	69bb      	ldr	r3, [r7, #24]
 80018e2:	2b0c      	cmp	r3, #12
 80018e4:	d02d      	beq.n	8001942 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018e6:	4b1a      	ldr	r3, [pc, #104]	; (8001950 <HAL_RCC_OscConfig+0x7c4>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4a19      	ldr	r2, [pc, #100]	; (8001950 <HAL_RCC_OscConfig+0x7c4>)
 80018ec:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80018f0:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80018f2:	4b17      	ldr	r3, [pc, #92]	; (8001950 <HAL_RCC_OscConfig+0x7c4>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d105      	bne.n	800190a <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80018fe:	4b14      	ldr	r3, [pc, #80]	; (8001950 <HAL_RCC_OscConfig+0x7c4>)
 8001900:	68db      	ldr	r3, [r3, #12]
 8001902:	4a13      	ldr	r2, [pc, #76]	; (8001950 <HAL_RCC_OscConfig+0x7c4>)
 8001904:	f023 0303 	bic.w	r3, r3, #3
 8001908:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800190a:	4b11      	ldr	r3, [pc, #68]	; (8001950 <HAL_RCC_OscConfig+0x7c4>)
 800190c:	68db      	ldr	r3, [r3, #12]
 800190e:	4a10      	ldr	r2, [pc, #64]	; (8001950 <HAL_RCC_OscConfig+0x7c4>)
 8001910:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001914:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001918:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800191a:	f7ff f8db 	bl	8000ad4 <HAL_GetTick>
 800191e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001920:	e008      	b.n	8001934 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001922:	f7ff f8d7 	bl	8000ad4 <HAL_GetTick>
 8001926:	4602      	mov	r2, r0
 8001928:	693b      	ldr	r3, [r7, #16]
 800192a:	1ad3      	subs	r3, r2, r3
 800192c:	2b02      	cmp	r3, #2
 800192e:	d901      	bls.n	8001934 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8001930:	2303      	movs	r3, #3
 8001932:	e009      	b.n	8001948 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001934:	4b06      	ldr	r3, [pc, #24]	; (8001950 <HAL_RCC_OscConfig+0x7c4>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800193c:	2b00      	cmp	r3, #0
 800193e:	d1f0      	bne.n	8001922 <HAL_RCC_OscConfig+0x796>
 8001940:	e001      	b.n	8001946 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001942:	2301      	movs	r3, #1
 8001944:	e000      	b.n	8001948 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8001946:	2300      	movs	r3, #0
}
 8001948:	4618      	mov	r0, r3
 800194a:	3720      	adds	r7, #32
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}
 8001950:	40021000 	.word	0x40021000
 8001954:	f99d808c 	.word	0xf99d808c

08001958 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b084      	sub	sp, #16
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
 8001960:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d101      	bne.n	800196c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001968:	2301      	movs	r3, #1
 800196a:	e0c8      	b.n	8001afe <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800196c:	4b66      	ldr	r3, [pc, #408]	; (8001b08 <HAL_RCC_ClockConfig+0x1b0>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f003 0307 	and.w	r3, r3, #7
 8001974:	683a      	ldr	r2, [r7, #0]
 8001976:	429a      	cmp	r2, r3
 8001978:	d910      	bls.n	800199c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800197a:	4b63      	ldr	r3, [pc, #396]	; (8001b08 <HAL_RCC_ClockConfig+0x1b0>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f023 0207 	bic.w	r2, r3, #7
 8001982:	4961      	ldr	r1, [pc, #388]	; (8001b08 <HAL_RCC_ClockConfig+0x1b0>)
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	4313      	orrs	r3, r2
 8001988:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800198a:	4b5f      	ldr	r3, [pc, #380]	; (8001b08 <HAL_RCC_ClockConfig+0x1b0>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f003 0307 	and.w	r3, r3, #7
 8001992:	683a      	ldr	r2, [r7, #0]
 8001994:	429a      	cmp	r2, r3
 8001996:	d001      	beq.n	800199c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001998:	2301      	movs	r3, #1
 800199a:	e0b0      	b.n	8001afe <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f003 0301 	and.w	r3, r3, #1
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d04c      	beq.n	8001a42 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	2b03      	cmp	r3, #3
 80019ae:	d107      	bne.n	80019c0 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019b0:	4b56      	ldr	r3, [pc, #344]	; (8001b0c <HAL_RCC_ClockConfig+0x1b4>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d121      	bne.n	8001a00 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80019bc:	2301      	movs	r3, #1
 80019be:	e09e      	b.n	8001afe <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	2b02      	cmp	r3, #2
 80019c6:	d107      	bne.n	80019d8 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019c8:	4b50      	ldr	r3, [pc, #320]	; (8001b0c <HAL_RCC_ClockConfig+0x1b4>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d115      	bne.n	8001a00 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80019d4:	2301      	movs	r3, #1
 80019d6:	e092      	b.n	8001afe <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d107      	bne.n	80019f0 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80019e0:	4b4a      	ldr	r3, [pc, #296]	; (8001b0c <HAL_RCC_ClockConfig+0x1b4>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f003 0302 	and.w	r3, r3, #2
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d109      	bne.n	8001a00 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80019ec:	2301      	movs	r3, #1
 80019ee:	e086      	b.n	8001afe <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019f0:	4b46      	ldr	r3, [pc, #280]	; (8001b0c <HAL_RCC_ClockConfig+0x1b4>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d101      	bne.n	8001a00 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80019fc:	2301      	movs	r3, #1
 80019fe:	e07e      	b.n	8001afe <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001a00:	4b42      	ldr	r3, [pc, #264]	; (8001b0c <HAL_RCC_ClockConfig+0x1b4>)
 8001a02:	689b      	ldr	r3, [r3, #8]
 8001a04:	f023 0203 	bic.w	r2, r3, #3
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	493f      	ldr	r1, [pc, #252]	; (8001b0c <HAL_RCC_ClockConfig+0x1b4>)
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001a12:	f7ff f85f 	bl	8000ad4 <HAL_GetTick>
 8001a16:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a18:	e00a      	b.n	8001a30 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a1a:	f7ff f85b 	bl	8000ad4 <HAL_GetTick>
 8001a1e:	4602      	mov	r2, r0
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	1ad3      	subs	r3, r2, r3
 8001a24:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a28:	4293      	cmp	r3, r2
 8001a2a:	d901      	bls.n	8001a30 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8001a2c:	2303      	movs	r3, #3
 8001a2e:	e066      	b.n	8001afe <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a30:	4b36      	ldr	r3, [pc, #216]	; (8001b0c <HAL_RCC_ClockConfig+0x1b4>)
 8001a32:	689b      	ldr	r3, [r3, #8]
 8001a34:	f003 020c 	and.w	r2, r3, #12
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	009b      	lsls	r3, r3, #2
 8001a3e:	429a      	cmp	r2, r3
 8001a40:	d1eb      	bne.n	8001a1a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f003 0302 	and.w	r3, r3, #2
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d008      	beq.n	8001a60 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a4e:	4b2f      	ldr	r3, [pc, #188]	; (8001b0c <HAL_RCC_ClockConfig+0x1b4>)
 8001a50:	689b      	ldr	r3, [r3, #8]
 8001a52:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	689b      	ldr	r3, [r3, #8]
 8001a5a:	492c      	ldr	r1, [pc, #176]	; (8001b0c <HAL_RCC_ClockConfig+0x1b4>)
 8001a5c:	4313      	orrs	r3, r2
 8001a5e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a60:	4b29      	ldr	r3, [pc, #164]	; (8001b08 <HAL_RCC_ClockConfig+0x1b0>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f003 0307 	and.w	r3, r3, #7
 8001a68:	683a      	ldr	r2, [r7, #0]
 8001a6a:	429a      	cmp	r2, r3
 8001a6c:	d210      	bcs.n	8001a90 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a6e:	4b26      	ldr	r3, [pc, #152]	; (8001b08 <HAL_RCC_ClockConfig+0x1b0>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f023 0207 	bic.w	r2, r3, #7
 8001a76:	4924      	ldr	r1, [pc, #144]	; (8001b08 <HAL_RCC_ClockConfig+0x1b0>)
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a7e:	4b22      	ldr	r3, [pc, #136]	; (8001b08 <HAL_RCC_ClockConfig+0x1b0>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f003 0307 	and.w	r3, r3, #7
 8001a86:	683a      	ldr	r2, [r7, #0]
 8001a88:	429a      	cmp	r2, r3
 8001a8a:	d001      	beq.n	8001a90 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	e036      	b.n	8001afe <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f003 0304 	and.w	r3, r3, #4
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d008      	beq.n	8001aae <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a9c:	4b1b      	ldr	r3, [pc, #108]	; (8001b0c <HAL_RCC_ClockConfig+0x1b4>)
 8001a9e:	689b      	ldr	r3, [r3, #8]
 8001aa0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	68db      	ldr	r3, [r3, #12]
 8001aa8:	4918      	ldr	r1, [pc, #96]	; (8001b0c <HAL_RCC_ClockConfig+0x1b4>)
 8001aaa:	4313      	orrs	r3, r2
 8001aac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f003 0308 	and.w	r3, r3, #8
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d009      	beq.n	8001ace <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001aba:	4b14      	ldr	r3, [pc, #80]	; (8001b0c <HAL_RCC_ClockConfig+0x1b4>)
 8001abc:	689b      	ldr	r3, [r3, #8]
 8001abe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	691b      	ldr	r3, [r3, #16]
 8001ac6:	00db      	lsls	r3, r3, #3
 8001ac8:	4910      	ldr	r1, [pc, #64]	; (8001b0c <HAL_RCC_ClockConfig+0x1b4>)
 8001aca:	4313      	orrs	r3, r2
 8001acc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001ace:	f000 f825 	bl	8001b1c <HAL_RCC_GetSysClockFreq>
 8001ad2:	4601      	mov	r1, r0
 8001ad4:	4b0d      	ldr	r3, [pc, #52]	; (8001b0c <HAL_RCC_ClockConfig+0x1b4>)
 8001ad6:	689b      	ldr	r3, [r3, #8]
 8001ad8:	091b      	lsrs	r3, r3, #4
 8001ada:	f003 030f 	and.w	r3, r3, #15
 8001ade:	4a0c      	ldr	r2, [pc, #48]	; (8001b10 <HAL_RCC_ClockConfig+0x1b8>)
 8001ae0:	5cd3      	ldrb	r3, [r2, r3]
 8001ae2:	f003 031f 	and.w	r3, r3, #31
 8001ae6:	fa21 f303 	lsr.w	r3, r1, r3
 8001aea:	4a0a      	ldr	r2, [pc, #40]	; (8001b14 <HAL_RCC_ClockConfig+0x1bc>)
 8001aec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001aee:	4b0a      	ldr	r3, [pc, #40]	; (8001b18 <HAL_RCC_ClockConfig+0x1c0>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4618      	mov	r0, r3
 8001af4:	f7fe ff9e 	bl	8000a34 <HAL_InitTick>
 8001af8:	4603      	mov	r3, r0
 8001afa:	72fb      	strb	r3, [r7, #11]

  return status;
 8001afc:	7afb      	ldrb	r3, [r7, #11]
}
 8001afe:	4618      	mov	r0, r3
 8001b00:	3710      	adds	r7, #16
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	40022000 	.word	0x40022000
 8001b0c:	40021000 	.word	0x40021000
 8001b10:	08003644 	.word	0x08003644
 8001b14:	20000000 	.word	0x20000000
 8001b18:	20000004 	.word	0x20000004

08001b1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b089      	sub	sp, #36	; 0x24
 8001b20:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001b22:	2300      	movs	r3, #0
 8001b24:	61fb      	str	r3, [r7, #28]
 8001b26:	2300      	movs	r3, #0
 8001b28:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b2a:	4b3d      	ldr	r3, [pc, #244]	; (8001c20 <HAL_RCC_GetSysClockFreq+0x104>)
 8001b2c:	689b      	ldr	r3, [r3, #8]
 8001b2e:	f003 030c 	and.w	r3, r3, #12
 8001b32:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b34:	4b3a      	ldr	r3, [pc, #232]	; (8001c20 <HAL_RCC_GetSysClockFreq+0x104>)
 8001b36:	68db      	ldr	r3, [r3, #12]
 8001b38:	f003 0303 	and.w	r3, r3, #3
 8001b3c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001b3e:	693b      	ldr	r3, [r7, #16]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d005      	beq.n	8001b50 <HAL_RCC_GetSysClockFreq+0x34>
 8001b44:	693b      	ldr	r3, [r7, #16]
 8001b46:	2b0c      	cmp	r3, #12
 8001b48:	d121      	bne.n	8001b8e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	2b01      	cmp	r3, #1
 8001b4e:	d11e      	bne.n	8001b8e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001b50:	4b33      	ldr	r3, [pc, #204]	; (8001c20 <HAL_RCC_GetSysClockFreq+0x104>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f003 0308 	and.w	r3, r3, #8
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d107      	bne.n	8001b6c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001b5c:	4b30      	ldr	r3, [pc, #192]	; (8001c20 <HAL_RCC_GetSysClockFreq+0x104>)
 8001b5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b62:	0a1b      	lsrs	r3, r3, #8
 8001b64:	f003 030f 	and.w	r3, r3, #15
 8001b68:	61fb      	str	r3, [r7, #28]
 8001b6a:	e005      	b.n	8001b78 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001b6c:	4b2c      	ldr	r3, [pc, #176]	; (8001c20 <HAL_RCC_GetSysClockFreq+0x104>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	091b      	lsrs	r3, r3, #4
 8001b72:	f003 030f 	and.w	r3, r3, #15
 8001b76:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001b78:	4a2a      	ldr	r2, [pc, #168]	; (8001c24 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b7a:	69fb      	ldr	r3, [r7, #28]
 8001b7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b80:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001b82:	693b      	ldr	r3, [r7, #16]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d10d      	bne.n	8001ba4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001b88:	69fb      	ldr	r3, [r7, #28]
 8001b8a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001b8c:	e00a      	b.n	8001ba4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001b8e:	693b      	ldr	r3, [r7, #16]
 8001b90:	2b04      	cmp	r3, #4
 8001b92:	d102      	bne.n	8001b9a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001b94:	4b24      	ldr	r3, [pc, #144]	; (8001c28 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001b96:	61bb      	str	r3, [r7, #24]
 8001b98:	e004      	b.n	8001ba4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001b9a:	693b      	ldr	r3, [r7, #16]
 8001b9c:	2b08      	cmp	r3, #8
 8001b9e:	d101      	bne.n	8001ba4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001ba0:	4b22      	ldr	r3, [pc, #136]	; (8001c2c <HAL_RCC_GetSysClockFreq+0x110>)
 8001ba2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001ba4:	693b      	ldr	r3, [r7, #16]
 8001ba6:	2b0c      	cmp	r3, #12
 8001ba8:	d133      	bne.n	8001c12 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001baa:	4b1d      	ldr	r3, [pc, #116]	; (8001c20 <HAL_RCC_GetSysClockFreq+0x104>)
 8001bac:	68db      	ldr	r3, [r3, #12]
 8001bae:	f003 0303 	and.w	r3, r3, #3
 8001bb2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001bb4:	68bb      	ldr	r3, [r7, #8]
 8001bb6:	2b02      	cmp	r3, #2
 8001bb8:	d002      	beq.n	8001bc0 <HAL_RCC_GetSysClockFreq+0xa4>
 8001bba:	2b03      	cmp	r3, #3
 8001bbc:	d003      	beq.n	8001bc6 <HAL_RCC_GetSysClockFreq+0xaa>
 8001bbe:	e005      	b.n	8001bcc <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001bc0:	4b19      	ldr	r3, [pc, #100]	; (8001c28 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001bc2:	617b      	str	r3, [r7, #20]
      break;
 8001bc4:	e005      	b.n	8001bd2 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001bc6:	4b19      	ldr	r3, [pc, #100]	; (8001c2c <HAL_RCC_GetSysClockFreq+0x110>)
 8001bc8:	617b      	str	r3, [r7, #20]
      break;
 8001bca:	e002      	b.n	8001bd2 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001bcc:	69fb      	ldr	r3, [r7, #28]
 8001bce:	617b      	str	r3, [r7, #20]
      break;
 8001bd0:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001bd2:	4b13      	ldr	r3, [pc, #76]	; (8001c20 <HAL_RCC_GetSysClockFreq+0x104>)
 8001bd4:	68db      	ldr	r3, [r3, #12]
 8001bd6:	091b      	lsrs	r3, r3, #4
 8001bd8:	f003 0307 	and.w	r3, r3, #7
 8001bdc:	3301      	adds	r3, #1
 8001bde:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001be0:	4b0f      	ldr	r3, [pc, #60]	; (8001c20 <HAL_RCC_GetSysClockFreq+0x104>)
 8001be2:	68db      	ldr	r3, [r3, #12]
 8001be4:	0a1b      	lsrs	r3, r3, #8
 8001be6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001bea:	697a      	ldr	r2, [r7, #20]
 8001bec:	fb02 f203 	mul.w	r2, r2, r3
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bf6:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001bf8:	4b09      	ldr	r3, [pc, #36]	; (8001c20 <HAL_RCC_GetSysClockFreq+0x104>)
 8001bfa:	68db      	ldr	r3, [r3, #12]
 8001bfc:	0e5b      	lsrs	r3, r3, #25
 8001bfe:	f003 0303 	and.w	r3, r3, #3
 8001c02:	3301      	adds	r3, #1
 8001c04:	005b      	lsls	r3, r3, #1
 8001c06:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001c08:	697a      	ldr	r2, [r7, #20]
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c10:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001c12:	69bb      	ldr	r3, [r7, #24]
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	3724      	adds	r7, #36	; 0x24
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1e:	4770      	bx	lr
 8001c20:	40021000 	.word	0x40021000
 8001c24:	0800365c 	.word	0x0800365c
 8001c28:	00f42400 	.word	0x00f42400
 8001c2c:	007a1200 	.word	0x007a1200

08001c30 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c30:	b480      	push	{r7}
 8001c32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c34:	4b03      	ldr	r3, [pc, #12]	; (8001c44 <HAL_RCC_GetHCLKFreq+0x14>)
 8001c36:	681b      	ldr	r3, [r3, #0]
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr
 8001c42:	bf00      	nop
 8001c44:	20000000 	.word	0x20000000

08001c48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001c4c:	f7ff fff0 	bl	8001c30 <HAL_RCC_GetHCLKFreq>
 8001c50:	4601      	mov	r1, r0
 8001c52:	4b06      	ldr	r3, [pc, #24]	; (8001c6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c54:	689b      	ldr	r3, [r3, #8]
 8001c56:	0a1b      	lsrs	r3, r3, #8
 8001c58:	f003 0307 	and.w	r3, r3, #7
 8001c5c:	4a04      	ldr	r2, [pc, #16]	; (8001c70 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001c5e:	5cd3      	ldrb	r3, [r2, r3]
 8001c60:	f003 031f 	and.w	r3, r3, #31
 8001c64:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	bd80      	pop	{r7, pc}
 8001c6c:	40021000 	.word	0x40021000
 8001c70:	08003654 	.word	0x08003654

08001c74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001c78:	f7ff ffda 	bl	8001c30 <HAL_RCC_GetHCLKFreq>
 8001c7c:	4601      	mov	r1, r0
 8001c7e:	4b06      	ldr	r3, [pc, #24]	; (8001c98 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c80:	689b      	ldr	r3, [r3, #8]
 8001c82:	0adb      	lsrs	r3, r3, #11
 8001c84:	f003 0307 	and.w	r3, r3, #7
 8001c88:	4a04      	ldr	r2, [pc, #16]	; (8001c9c <HAL_RCC_GetPCLK2Freq+0x28>)
 8001c8a:	5cd3      	ldrb	r3, [r2, r3]
 8001c8c:	f003 031f 	and.w	r3, r3, #31
 8001c90:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	bd80      	pop	{r7, pc}
 8001c98:	40021000 	.word	0x40021000
 8001c9c:	08003654 	.word	0x08003654

08001ca0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b086      	sub	sp, #24
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001ca8:	2300      	movs	r3, #0
 8001caa:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001cac:	4b2a      	ldr	r3, [pc, #168]	; (8001d58 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001cae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d003      	beq.n	8001cc0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001cb8:	f7ff fa04 	bl	80010c4 <HAL_PWREx_GetVoltageRange>
 8001cbc:	6178      	str	r0, [r7, #20]
 8001cbe:	e014      	b.n	8001cea <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001cc0:	4b25      	ldr	r3, [pc, #148]	; (8001d58 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001cc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cc4:	4a24      	ldr	r2, [pc, #144]	; (8001d58 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001cc6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cca:	6593      	str	r3, [r2, #88]	; 0x58
 8001ccc:	4b22      	ldr	r3, [pc, #136]	; (8001d58 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001cce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cd4:	60fb      	str	r3, [r7, #12]
 8001cd6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001cd8:	f7ff f9f4 	bl	80010c4 <HAL_PWREx_GetVoltageRange>
 8001cdc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001cde:	4b1e      	ldr	r3, [pc, #120]	; (8001d58 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ce0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ce2:	4a1d      	ldr	r2, [pc, #116]	; (8001d58 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ce4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ce8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001cea:	697b      	ldr	r3, [r7, #20]
 8001cec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001cf0:	d10b      	bne.n	8001d0a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2b80      	cmp	r3, #128	; 0x80
 8001cf6:	d919      	bls.n	8001d2c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2ba0      	cmp	r3, #160	; 0xa0
 8001cfc:	d902      	bls.n	8001d04 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001cfe:	2302      	movs	r3, #2
 8001d00:	613b      	str	r3, [r7, #16]
 8001d02:	e013      	b.n	8001d2c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001d04:	2301      	movs	r3, #1
 8001d06:	613b      	str	r3, [r7, #16]
 8001d08:	e010      	b.n	8001d2c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2b80      	cmp	r3, #128	; 0x80
 8001d0e:	d902      	bls.n	8001d16 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001d10:	2303      	movs	r3, #3
 8001d12:	613b      	str	r3, [r7, #16]
 8001d14:	e00a      	b.n	8001d2c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2b80      	cmp	r3, #128	; 0x80
 8001d1a:	d102      	bne.n	8001d22 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001d1c:	2302      	movs	r3, #2
 8001d1e:	613b      	str	r3, [r7, #16]
 8001d20:	e004      	b.n	8001d2c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2b70      	cmp	r3, #112	; 0x70
 8001d26:	d101      	bne.n	8001d2c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001d28:	2301      	movs	r3, #1
 8001d2a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001d2c:	4b0b      	ldr	r3, [pc, #44]	; (8001d5c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f023 0207 	bic.w	r2, r3, #7
 8001d34:	4909      	ldr	r1, [pc, #36]	; (8001d5c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001d36:	693b      	ldr	r3, [r7, #16]
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001d3c:	4b07      	ldr	r3, [pc, #28]	; (8001d5c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f003 0307 	and.w	r3, r3, #7
 8001d44:	693a      	ldr	r2, [r7, #16]
 8001d46:	429a      	cmp	r2, r3
 8001d48:	d001      	beq.n	8001d4e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	e000      	b.n	8001d50 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001d4e:	2300      	movs	r3, #0
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	3718      	adds	r7, #24
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}
 8001d58:	40021000 	.word	0x40021000
 8001d5c:	40022000 	.word	0x40022000

08001d60 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b086      	sub	sp, #24
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001d68:	2300      	movs	r3, #0
 8001d6a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d03f      	beq.n	8001dfc <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001d80:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001d84:	d01c      	beq.n	8001dc0 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8001d86:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001d8a:	d802      	bhi.n	8001d92 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d00e      	beq.n	8001dae <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8001d90:	e01f      	b.n	8001dd2 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8001d92:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001d96:	d003      	beq.n	8001da0 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8001d98:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001d9c:	d01c      	beq.n	8001dd8 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8001d9e:	e018      	b.n	8001dd2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001da0:	4b85      	ldr	r3, [pc, #532]	; (8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001da2:	68db      	ldr	r3, [r3, #12]
 8001da4:	4a84      	ldr	r2, [pc, #528]	; (8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001da6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001daa:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001dac:	e015      	b.n	8001dda <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	3304      	adds	r3, #4
 8001db2:	2100      	movs	r1, #0
 8001db4:	4618      	mov	r0, r3
 8001db6:	f000 fab9 	bl	800232c <RCCEx_PLLSAI1_Config>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001dbe:	e00c      	b.n	8001dda <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	3320      	adds	r3, #32
 8001dc4:	2100      	movs	r1, #0
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f000 fba0 	bl	800250c <RCCEx_PLLSAI2_Config>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001dd0:	e003      	b.n	8001dda <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	74fb      	strb	r3, [r7, #19]
      break;
 8001dd6:	e000      	b.n	8001dda <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8001dd8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001dda:	7cfb      	ldrb	r3, [r7, #19]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d10b      	bne.n	8001df8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001de0:	4b75      	ldr	r3, [pc, #468]	; (8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001de2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001de6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001dee:	4972      	ldr	r1, [pc, #456]	; (8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001df0:	4313      	orrs	r3, r2
 8001df2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001df6:	e001      	b.n	8001dfc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001df8:	7cfb      	ldrb	r3, [r7, #19]
 8001dfa:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d03f      	beq.n	8001e88 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001e0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e10:	d01c      	beq.n	8001e4c <HAL_RCCEx_PeriphCLKConfig+0xec>
 8001e12:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e16:	d802      	bhi.n	8001e1e <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d00e      	beq.n	8001e3a <HAL_RCCEx_PeriphCLKConfig+0xda>
 8001e1c:	e01f      	b.n	8001e5e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8001e1e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001e22:	d003      	beq.n	8001e2c <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8001e24:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001e28:	d01c      	beq.n	8001e64 <HAL_RCCEx_PeriphCLKConfig+0x104>
 8001e2a:	e018      	b.n	8001e5e <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001e2c:	4b62      	ldr	r3, [pc, #392]	; (8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001e2e:	68db      	ldr	r3, [r3, #12]
 8001e30:	4a61      	ldr	r2, [pc, #388]	; (8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001e32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e36:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001e38:	e015      	b.n	8001e66 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	3304      	adds	r3, #4
 8001e3e:	2100      	movs	r1, #0
 8001e40:	4618      	mov	r0, r3
 8001e42:	f000 fa73 	bl	800232c <RCCEx_PLLSAI1_Config>
 8001e46:	4603      	mov	r3, r0
 8001e48:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001e4a:	e00c      	b.n	8001e66 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	3320      	adds	r3, #32
 8001e50:	2100      	movs	r1, #0
 8001e52:	4618      	mov	r0, r3
 8001e54:	f000 fb5a 	bl	800250c <RCCEx_PLLSAI2_Config>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001e5c:	e003      	b.n	8001e66 <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	74fb      	strb	r3, [r7, #19]
      break;
 8001e62:	e000      	b.n	8001e66 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8001e64:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001e66:	7cfb      	ldrb	r3, [r7, #19]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d10b      	bne.n	8001e84 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001e6c:	4b52      	ldr	r3, [pc, #328]	; (8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001e6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e72:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001e7a:	494f      	ldr	r1, [pc, #316]	; (8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001e7c:	4313      	orrs	r3, r2
 8001e7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001e82:	e001      	b.n	8001e88 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001e84:	7cfb      	ldrb	r3, [r7, #19]
 8001e86:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	f000 80a0 	beq.w	8001fd6 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e96:	2300      	movs	r3, #0
 8001e98:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001e9a:	4b47      	ldr	r3, [pc, #284]	; (8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001e9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d101      	bne.n	8001eaa <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e000      	b.n	8001eac <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8001eaa:	2300      	movs	r3, #0
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d00d      	beq.n	8001ecc <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001eb0:	4b41      	ldr	r3, [pc, #260]	; (8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001eb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eb4:	4a40      	ldr	r2, [pc, #256]	; (8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001eb6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001eba:	6593      	str	r3, [r2, #88]	; 0x58
 8001ebc:	4b3e      	ldr	r3, [pc, #248]	; (8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001ebe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ec0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ec4:	60bb      	str	r3, [r7, #8]
 8001ec6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001ecc:	4b3b      	ldr	r3, [pc, #236]	; (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4a3a      	ldr	r2, [pc, #232]	; (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8001ed2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ed6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001ed8:	f7fe fdfc 	bl	8000ad4 <HAL_GetTick>
 8001edc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001ede:	e009      	b.n	8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ee0:	f7fe fdf8 	bl	8000ad4 <HAL_GetTick>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	1ad3      	subs	r3, r2, r3
 8001eea:	2b02      	cmp	r3, #2
 8001eec:	d902      	bls.n	8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8001eee:	2303      	movs	r3, #3
 8001ef0:	74fb      	strb	r3, [r7, #19]
        break;
 8001ef2:	e005      	b.n	8001f00 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001ef4:	4b31      	ldr	r3, [pc, #196]	; (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d0ef      	beq.n	8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8001f00:	7cfb      	ldrb	r3, [r7, #19]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d15c      	bne.n	8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001f06:	4b2c      	ldr	r3, [pc, #176]	; (8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001f08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f0c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f10:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001f12:	697b      	ldr	r3, [r7, #20]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d01f      	beq.n	8001f58 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001f1e:	697a      	ldr	r2, [r7, #20]
 8001f20:	429a      	cmp	r2, r3
 8001f22:	d019      	beq.n	8001f58 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001f24:	4b24      	ldr	r3, [pc, #144]	; (8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001f26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f2e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001f30:	4b21      	ldr	r3, [pc, #132]	; (8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001f32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f36:	4a20      	ldr	r2, [pc, #128]	; (8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001f38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f3c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001f40:	4b1d      	ldr	r3, [pc, #116]	; (8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001f42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f46:	4a1c      	ldr	r2, [pc, #112]	; (8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001f48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f4c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001f50:	4a19      	ldr	r2, [pc, #100]	; (8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001f52:	697b      	ldr	r3, [r7, #20]
 8001f54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	f003 0301 	and.w	r3, r3, #1
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d016      	beq.n	8001f90 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f62:	f7fe fdb7 	bl	8000ad4 <HAL_GetTick>
 8001f66:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f68:	e00b      	b.n	8001f82 <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f6a:	f7fe fdb3 	bl	8000ad4 <HAL_GetTick>
 8001f6e:	4602      	mov	r2, r0
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	1ad3      	subs	r3, r2, r3
 8001f74:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d902      	bls.n	8001f82 <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8001f7c:	2303      	movs	r3, #3
 8001f7e:	74fb      	strb	r3, [r7, #19]
            break;
 8001f80:	e006      	b.n	8001f90 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f82:	4b0d      	ldr	r3, [pc, #52]	; (8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001f84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f88:	f003 0302 	and.w	r3, r3, #2
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d0ec      	beq.n	8001f6a <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8001f90:	7cfb      	ldrb	r3, [r7, #19]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d10c      	bne.n	8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001f96:	4b08      	ldr	r3, [pc, #32]	; (8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001f98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f9c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001fa6:	4904      	ldr	r1, [pc, #16]	; (8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8001fae:	e009      	b.n	8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001fb0:	7cfb      	ldrb	r3, [r7, #19]
 8001fb2:	74bb      	strb	r3, [r7, #18]
 8001fb4:	e006      	b.n	8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8001fb6:	bf00      	nop
 8001fb8:	40021000 	.word	0x40021000
 8001fbc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001fc0:	7cfb      	ldrb	r3, [r7, #19]
 8001fc2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001fc4:	7c7b      	ldrb	r3, [r7, #17]
 8001fc6:	2b01      	cmp	r3, #1
 8001fc8:	d105      	bne.n	8001fd6 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fca:	4b9e      	ldr	r3, [pc, #632]	; (8002244 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001fcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fce:	4a9d      	ldr	r2, [pc, #628]	; (8002244 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001fd0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fd4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f003 0301 	and.w	r3, r3, #1
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d00a      	beq.n	8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001fe2:	4b98      	ldr	r3, [pc, #608]	; (8002244 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001fe4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fe8:	f023 0203 	bic.w	r2, r3, #3
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ff0:	4994      	ldr	r1, [pc, #592]	; (8002244 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f003 0302 	and.w	r3, r3, #2
 8002000:	2b00      	cmp	r3, #0
 8002002:	d00a      	beq.n	800201a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002004:	4b8f      	ldr	r3, [pc, #572]	; (8002244 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002006:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800200a:	f023 020c 	bic.w	r2, r3, #12
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002012:	498c      	ldr	r1, [pc, #560]	; (8002244 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002014:	4313      	orrs	r3, r2
 8002016:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f003 0304 	and.w	r3, r3, #4
 8002022:	2b00      	cmp	r3, #0
 8002024:	d00a      	beq.n	800203c <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002026:	4b87      	ldr	r3, [pc, #540]	; (8002244 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002028:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800202c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002034:	4983      	ldr	r1, [pc, #524]	; (8002244 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002036:	4313      	orrs	r3, r2
 8002038:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f003 0308 	and.w	r3, r3, #8
 8002044:	2b00      	cmp	r3, #0
 8002046:	d00a      	beq.n	800205e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002048:	4b7e      	ldr	r3, [pc, #504]	; (8002244 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800204a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800204e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002056:	497b      	ldr	r1, [pc, #492]	; (8002244 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002058:	4313      	orrs	r3, r2
 800205a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f003 0310 	and.w	r3, r3, #16
 8002066:	2b00      	cmp	r3, #0
 8002068:	d00a      	beq.n	8002080 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800206a:	4b76      	ldr	r3, [pc, #472]	; (8002244 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800206c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002070:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002078:	4972      	ldr	r1, [pc, #456]	; (8002244 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800207a:	4313      	orrs	r3, r2
 800207c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f003 0320 	and.w	r3, r3, #32
 8002088:	2b00      	cmp	r3, #0
 800208a:	d00a      	beq.n	80020a2 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800208c:	4b6d      	ldr	r3, [pc, #436]	; (8002244 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800208e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002092:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800209a:	496a      	ldr	r1, [pc, #424]	; (8002244 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800209c:	4313      	orrs	r3, r2
 800209e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d00a      	beq.n	80020c4 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80020ae:	4b65      	ldr	r3, [pc, #404]	; (8002244 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80020b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020b4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020bc:	4961      	ldr	r1, [pc, #388]	; (8002244 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80020be:	4313      	orrs	r3, r2
 80020c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d00a      	beq.n	80020e6 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80020d0:	4b5c      	ldr	r3, [pc, #368]	; (8002244 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80020d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020d6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020de:	4959      	ldr	r1, [pc, #356]	; (8002244 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80020e0:	4313      	orrs	r3, r2
 80020e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d00a      	beq.n	8002108 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80020f2:	4b54      	ldr	r3, [pc, #336]	; (8002244 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80020f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020f8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002100:	4950      	ldr	r1, [pc, #320]	; (8002244 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002102:	4313      	orrs	r3, r2
 8002104:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002110:	2b00      	cmp	r3, #0
 8002112:	d00a      	beq.n	800212a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002114:	4b4b      	ldr	r3, [pc, #300]	; (8002244 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002116:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800211a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002122:	4948      	ldr	r1, [pc, #288]	; (8002244 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002124:	4313      	orrs	r3, r2
 8002126:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002132:	2b00      	cmp	r3, #0
 8002134:	d00a      	beq.n	800214c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002136:	4b43      	ldr	r3, [pc, #268]	; (8002244 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002138:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800213c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002144:	493f      	ldr	r1, [pc, #252]	; (8002244 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002146:	4313      	orrs	r3, r2
 8002148:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002154:	2b00      	cmp	r3, #0
 8002156:	d028      	beq.n	80021aa <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002158:	4b3a      	ldr	r3, [pc, #232]	; (8002244 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800215a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800215e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002166:	4937      	ldr	r1, [pc, #220]	; (8002244 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002168:	4313      	orrs	r3, r2
 800216a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002172:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002176:	d106      	bne.n	8002186 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002178:	4b32      	ldr	r3, [pc, #200]	; (8002244 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800217a:	68db      	ldr	r3, [r3, #12]
 800217c:	4a31      	ldr	r2, [pc, #196]	; (8002244 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800217e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002182:	60d3      	str	r3, [r2, #12]
 8002184:	e011      	b.n	80021aa <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800218a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800218e:	d10c      	bne.n	80021aa <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	3304      	adds	r3, #4
 8002194:	2101      	movs	r1, #1
 8002196:	4618      	mov	r0, r3
 8002198:	f000 f8c8 	bl	800232c <RCCEx_PLLSAI1_Config>
 800219c:	4603      	mov	r3, r0
 800219e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80021a0:	7cfb      	ldrb	r3, [r7, #19]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d001      	beq.n	80021aa <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 80021a6:	7cfb      	ldrb	r3, [r7, #19]
 80021a8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d028      	beq.n	8002208 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80021b6:	4b23      	ldr	r3, [pc, #140]	; (8002244 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80021b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021bc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021c4:	491f      	ldr	r1, [pc, #124]	; (8002244 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80021c6:	4313      	orrs	r3, r2
 80021c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021d0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80021d4:	d106      	bne.n	80021e4 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80021d6:	4b1b      	ldr	r3, [pc, #108]	; (8002244 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80021d8:	68db      	ldr	r3, [r3, #12]
 80021da:	4a1a      	ldr	r2, [pc, #104]	; (8002244 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80021dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80021e0:	60d3      	str	r3, [r2, #12]
 80021e2:	e011      	b.n	8002208 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021e8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80021ec:	d10c      	bne.n	8002208 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	3304      	adds	r3, #4
 80021f2:	2101      	movs	r1, #1
 80021f4:	4618      	mov	r0, r3
 80021f6:	f000 f899 	bl	800232c <RCCEx_PLLSAI1_Config>
 80021fa:	4603      	mov	r3, r0
 80021fc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80021fe:	7cfb      	ldrb	r3, [r7, #19]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d001      	beq.n	8002208 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8002204:	7cfb      	ldrb	r3, [r7, #19]
 8002206:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002210:	2b00      	cmp	r3, #0
 8002212:	d02b      	beq.n	800226c <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002214:	4b0b      	ldr	r3, [pc, #44]	; (8002244 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002216:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800221a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002222:	4908      	ldr	r1, [pc, #32]	; (8002244 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002224:	4313      	orrs	r3, r2
 8002226:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800222e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002232:	d109      	bne.n	8002248 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002234:	4b03      	ldr	r3, [pc, #12]	; (8002244 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002236:	68db      	ldr	r3, [r3, #12]
 8002238:	4a02      	ldr	r2, [pc, #8]	; (8002244 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800223a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800223e:	60d3      	str	r3, [r2, #12]
 8002240:	e014      	b.n	800226c <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8002242:	bf00      	nop
 8002244:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800224c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002250:	d10c      	bne.n	800226c <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	3304      	adds	r3, #4
 8002256:	2101      	movs	r1, #1
 8002258:	4618      	mov	r0, r3
 800225a:	f000 f867 	bl	800232c <RCCEx_PLLSAI1_Config>
 800225e:	4603      	mov	r3, r0
 8002260:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002262:	7cfb      	ldrb	r3, [r7, #19]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d001      	beq.n	800226c <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8002268:	7cfb      	ldrb	r3, [r7, #19]
 800226a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002274:	2b00      	cmp	r3, #0
 8002276:	d02f      	beq.n	80022d8 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002278:	4b2b      	ldr	r3, [pc, #172]	; (8002328 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800227a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800227e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002286:	4928      	ldr	r1, [pc, #160]	; (8002328 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002288:	4313      	orrs	r3, r2
 800228a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002292:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002296:	d10d      	bne.n	80022b4 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	3304      	adds	r3, #4
 800229c:	2102      	movs	r1, #2
 800229e:	4618      	mov	r0, r3
 80022a0:	f000 f844 	bl	800232c <RCCEx_PLLSAI1_Config>
 80022a4:	4603      	mov	r3, r0
 80022a6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80022a8:	7cfb      	ldrb	r3, [r7, #19]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d014      	beq.n	80022d8 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 80022ae:	7cfb      	ldrb	r3, [r7, #19]
 80022b0:	74bb      	strb	r3, [r7, #18]
 80022b2:	e011      	b.n	80022d8 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80022b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80022bc:	d10c      	bne.n	80022d8 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	3320      	adds	r3, #32
 80022c2:	2102      	movs	r1, #2
 80022c4:	4618      	mov	r0, r3
 80022c6:	f000 f921 	bl	800250c <RCCEx_PLLSAI2_Config>
 80022ca:	4603      	mov	r3, r0
 80022cc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80022ce:	7cfb      	ldrb	r3, [r7, #19]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d001      	beq.n	80022d8 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 80022d4:	7cfb      	ldrb	r3, [r7, #19]
 80022d6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d00a      	beq.n	80022fa <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80022e4:	4b10      	ldr	r3, [pc, #64]	; (8002328 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80022e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022ea:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80022f2:	490d      	ldr	r1, [pc, #52]	; (8002328 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80022f4:	4313      	orrs	r3, r2
 80022f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002302:	2b00      	cmp	r3, #0
 8002304:	d00b      	beq.n	800231e <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002306:	4b08      	ldr	r3, [pc, #32]	; (8002328 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002308:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800230c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002316:	4904      	ldr	r1, [pc, #16]	; (8002328 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002318:	4313      	orrs	r3, r2
 800231a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800231e:	7cbb      	ldrb	r3, [r7, #18]
}
 8002320:	4618      	mov	r0, r3
 8002322:	3718      	adds	r7, #24
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}
 8002328:	40021000 	.word	0x40021000

0800232c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b084      	sub	sp, #16
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
 8002334:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002336:	2300      	movs	r3, #0
 8002338:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800233a:	4b73      	ldr	r3, [pc, #460]	; (8002508 <RCCEx_PLLSAI1_Config+0x1dc>)
 800233c:	68db      	ldr	r3, [r3, #12]
 800233e:	f003 0303 	and.w	r3, r3, #3
 8002342:	2b00      	cmp	r3, #0
 8002344:	d018      	beq.n	8002378 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002346:	4b70      	ldr	r3, [pc, #448]	; (8002508 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002348:	68db      	ldr	r3, [r3, #12]
 800234a:	f003 0203 	and.w	r2, r3, #3
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	429a      	cmp	r2, r3
 8002354:	d10d      	bne.n	8002372 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
       ||
 800235a:	2b00      	cmp	r3, #0
 800235c:	d009      	beq.n	8002372 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800235e:	4b6a      	ldr	r3, [pc, #424]	; (8002508 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002360:	68db      	ldr	r3, [r3, #12]
 8002362:	091b      	lsrs	r3, r3, #4
 8002364:	f003 0307 	and.w	r3, r3, #7
 8002368:	1c5a      	adds	r2, r3, #1
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	685b      	ldr	r3, [r3, #4]
       ||
 800236e:	429a      	cmp	r2, r3
 8002370:	d044      	beq.n	80023fc <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8002372:	2301      	movs	r3, #1
 8002374:	73fb      	strb	r3, [r7, #15]
 8002376:	e041      	b.n	80023fc <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	2b02      	cmp	r3, #2
 800237e:	d00c      	beq.n	800239a <RCCEx_PLLSAI1_Config+0x6e>
 8002380:	2b03      	cmp	r3, #3
 8002382:	d013      	beq.n	80023ac <RCCEx_PLLSAI1_Config+0x80>
 8002384:	2b01      	cmp	r3, #1
 8002386:	d120      	bne.n	80023ca <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002388:	4b5f      	ldr	r3, [pc, #380]	; (8002508 <RCCEx_PLLSAI1_Config+0x1dc>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f003 0302 	and.w	r3, r3, #2
 8002390:	2b00      	cmp	r3, #0
 8002392:	d11d      	bne.n	80023d0 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8002394:	2301      	movs	r3, #1
 8002396:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002398:	e01a      	b.n	80023d0 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800239a:	4b5b      	ldr	r3, [pc, #364]	; (8002508 <RCCEx_PLLSAI1_Config+0x1dc>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d116      	bne.n	80023d4 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 80023a6:	2301      	movs	r3, #1
 80023a8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023aa:	e013      	b.n	80023d4 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80023ac:	4b56      	ldr	r3, [pc, #344]	; (8002508 <RCCEx_PLLSAI1_Config+0x1dc>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d10f      	bne.n	80023d8 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80023b8:	4b53      	ldr	r3, [pc, #332]	; (8002508 <RCCEx_PLLSAI1_Config+0x1dc>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d109      	bne.n	80023d8 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 80023c4:	2301      	movs	r3, #1
 80023c6:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80023c8:	e006      	b.n	80023d8 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 80023ca:	2301      	movs	r3, #1
 80023cc:	73fb      	strb	r3, [r7, #15]
      break;
 80023ce:	e004      	b.n	80023da <RCCEx_PLLSAI1_Config+0xae>
      break;
 80023d0:	bf00      	nop
 80023d2:	e002      	b.n	80023da <RCCEx_PLLSAI1_Config+0xae>
      break;
 80023d4:	bf00      	nop
 80023d6:	e000      	b.n	80023da <RCCEx_PLLSAI1_Config+0xae>
      break;
 80023d8:	bf00      	nop
    }

    if(status == HAL_OK)
 80023da:	7bfb      	ldrb	r3, [r7, #15]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d10d      	bne.n	80023fc <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80023e0:	4b49      	ldr	r3, [pc, #292]	; (8002508 <RCCEx_PLLSAI1_Config+0x1dc>)
 80023e2:	68db      	ldr	r3, [r3, #12]
 80023e4:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6819      	ldr	r1, [r3, #0]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	3b01      	subs	r3, #1
 80023f2:	011b      	lsls	r3, r3, #4
 80023f4:	430b      	orrs	r3, r1
 80023f6:	4944      	ldr	r1, [pc, #272]	; (8002508 <RCCEx_PLLSAI1_Config+0x1dc>)
 80023f8:	4313      	orrs	r3, r2
 80023fa:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80023fc:	7bfb      	ldrb	r3, [r7, #15]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d17d      	bne.n	80024fe <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002402:	4b41      	ldr	r3, [pc, #260]	; (8002508 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a40      	ldr	r2, [pc, #256]	; (8002508 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002408:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800240c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800240e:	f7fe fb61 	bl	8000ad4 <HAL_GetTick>
 8002412:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002414:	e009      	b.n	800242a <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002416:	f7fe fb5d 	bl	8000ad4 <HAL_GetTick>
 800241a:	4602      	mov	r2, r0
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	1ad3      	subs	r3, r2, r3
 8002420:	2b02      	cmp	r3, #2
 8002422:	d902      	bls.n	800242a <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8002424:	2303      	movs	r3, #3
 8002426:	73fb      	strb	r3, [r7, #15]
        break;
 8002428:	e005      	b.n	8002436 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800242a:	4b37      	ldr	r3, [pc, #220]	; (8002508 <RCCEx_PLLSAI1_Config+0x1dc>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002432:	2b00      	cmp	r3, #0
 8002434:	d1ef      	bne.n	8002416 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8002436:	7bfb      	ldrb	r3, [r7, #15]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d160      	bne.n	80024fe <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d111      	bne.n	8002466 <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002442:	4b31      	ldr	r3, [pc, #196]	; (8002508 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002444:	691b      	ldr	r3, [r3, #16]
 8002446:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800244a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800244e:	687a      	ldr	r2, [r7, #4]
 8002450:	6892      	ldr	r2, [r2, #8]
 8002452:	0211      	lsls	r1, r2, #8
 8002454:	687a      	ldr	r2, [r7, #4]
 8002456:	68d2      	ldr	r2, [r2, #12]
 8002458:	0912      	lsrs	r2, r2, #4
 800245a:	0452      	lsls	r2, r2, #17
 800245c:	430a      	orrs	r2, r1
 800245e:	492a      	ldr	r1, [pc, #168]	; (8002508 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002460:	4313      	orrs	r3, r2
 8002462:	610b      	str	r3, [r1, #16]
 8002464:	e027      	b.n	80024b6 <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	2b01      	cmp	r3, #1
 800246a:	d112      	bne.n	8002492 <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800246c:	4b26      	ldr	r3, [pc, #152]	; (8002508 <RCCEx_PLLSAI1_Config+0x1dc>)
 800246e:	691b      	ldr	r3, [r3, #16]
 8002470:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002474:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002478:	687a      	ldr	r2, [r7, #4]
 800247a:	6892      	ldr	r2, [r2, #8]
 800247c:	0211      	lsls	r1, r2, #8
 800247e:	687a      	ldr	r2, [r7, #4]
 8002480:	6912      	ldr	r2, [r2, #16]
 8002482:	0852      	lsrs	r2, r2, #1
 8002484:	3a01      	subs	r2, #1
 8002486:	0552      	lsls	r2, r2, #21
 8002488:	430a      	orrs	r2, r1
 800248a:	491f      	ldr	r1, [pc, #124]	; (8002508 <RCCEx_PLLSAI1_Config+0x1dc>)
 800248c:	4313      	orrs	r3, r2
 800248e:	610b      	str	r3, [r1, #16]
 8002490:	e011      	b.n	80024b6 <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002492:	4b1d      	ldr	r3, [pc, #116]	; (8002508 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002494:	691b      	ldr	r3, [r3, #16]
 8002496:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800249a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800249e:	687a      	ldr	r2, [r7, #4]
 80024a0:	6892      	ldr	r2, [r2, #8]
 80024a2:	0211      	lsls	r1, r2, #8
 80024a4:	687a      	ldr	r2, [r7, #4]
 80024a6:	6952      	ldr	r2, [r2, #20]
 80024a8:	0852      	lsrs	r2, r2, #1
 80024aa:	3a01      	subs	r2, #1
 80024ac:	0652      	lsls	r2, r2, #25
 80024ae:	430a      	orrs	r2, r1
 80024b0:	4915      	ldr	r1, [pc, #84]	; (8002508 <RCCEx_PLLSAI1_Config+0x1dc>)
 80024b2:	4313      	orrs	r3, r2
 80024b4:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80024b6:	4b14      	ldr	r3, [pc, #80]	; (8002508 <RCCEx_PLLSAI1_Config+0x1dc>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4a13      	ldr	r2, [pc, #76]	; (8002508 <RCCEx_PLLSAI1_Config+0x1dc>)
 80024bc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80024c0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024c2:	f7fe fb07 	bl	8000ad4 <HAL_GetTick>
 80024c6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80024c8:	e009      	b.n	80024de <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80024ca:	f7fe fb03 	bl	8000ad4 <HAL_GetTick>
 80024ce:	4602      	mov	r2, r0
 80024d0:	68bb      	ldr	r3, [r7, #8]
 80024d2:	1ad3      	subs	r3, r2, r3
 80024d4:	2b02      	cmp	r3, #2
 80024d6:	d902      	bls.n	80024de <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 80024d8:	2303      	movs	r3, #3
 80024da:	73fb      	strb	r3, [r7, #15]
          break;
 80024dc:	e005      	b.n	80024ea <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80024de:	4b0a      	ldr	r3, [pc, #40]	; (8002508 <RCCEx_PLLSAI1_Config+0x1dc>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d0ef      	beq.n	80024ca <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 80024ea:	7bfb      	ldrb	r3, [r7, #15]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d106      	bne.n	80024fe <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80024f0:	4b05      	ldr	r3, [pc, #20]	; (8002508 <RCCEx_PLLSAI1_Config+0x1dc>)
 80024f2:	691a      	ldr	r2, [r3, #16]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	699b      	ldr	r3, [r3, #24]
 80024f8:	4903      	ldr	r1, [pc, #12]	; (8002508 <RCCEx_PLLSAI1_Config+0x1dc>)
 80024fa:	4313      	orrs	r3, r2
 80024fc:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80024fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002500:	4618      	mov	r0, r3
 8002502:	3710      	adds	r7, #16
 8002504:	46bd      	mov	sp, r7
 8002506:	bd80      	pop	{r7, pc}
 8002508:	40021000 	.word	0x40021000

0800250c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b084      	sub	sp, #16
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
 8002514:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002516:	2300      	movs	r3, #0
 8002518:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800251a:	4b68      	ldr	r3, [pc, #416]	; (80026bc <RCCEx_PLLSAI2_Config+0x1b0>)
 800251c:	68db      	ldr	r3, [r3, #12]
 800251e:	f003 0303 	and.w	r3, r3, #3
 8002522:	2b00      	cmp	r3, #0
 8002524:	d018      	beq.n	8002558 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002526:	4b65      	ldr	r3, [pc, #404]	; (80026bc <RCCEx_PLLSAI2_Config+0x1b0>)
 8002528:	68db      	ldr	r3, [r3, #12]
 800252a:	f003 0203 	and.w	r2, r3, #3
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	429a      	cmp	r2, r3
 8002534:	d10d      	bne.n	8002552 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
       ||
 800253a:	2b00      	cmp	r3, #0
 800253c:	d009      	beq.n	8002552 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800253e:	4b5f      	ldr	r3, [pc, #380]	; (80026bc <RCCEx_PLLSAI2_Config+0x1b0>)
 8002540:	68db      	ldr	r3, [r3, #12]
 8002542:	091b      	lsrs	r3, r3, #4
 8002544:	f003 0307 	and.w	r3, r3, #7
 8002548:	1c5a      	adds	r2, r3, #1
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	685b      	ldr	r3, [r3, #4]
       ||
 800254e:	429a      	cmp	r2, r3
 8002550:	d044      	beq.n	80025dc <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8002552:	2301      	movs	r3, #1
 8002554:	73fb      	strb	r3, [r7, #15]
 8002556:	e041      	b.n	80025dc <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	2b02      	cmp	r3, #2
 800255e:	d00c      	beq.n	800257a <RCCEx_PLLSAI2_Config+0x6e>
 8002560:	2b03      	cmp	r3, #3
 8002562:	d013      	beq.n	800258c <RCCEx_PLLSAI2_Config+0x80>
 8002564:	2b01      	cmp	r3, #1
 8002566:	d120      	bne.n	80025aa <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002568:	4b54      	ldr	r3, [pc, #336]	; (80026bc <RCCEx_PLLSAI2_Config+0x1b0>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f003 0302 	and.w	r3, r3, #2
 8002570:	2b00      	cmp	r3, #0
 8002572:	d11d      	bne.n	80025b0 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8002574:	2301      	movs	r3, #1
 8002576:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002578:	e01a      	b.n	80025b0 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800257a:	4b50      	ldr	r3, [pc, #320]	; (80026bc <RCCEx_PLLSAI2_Config+0x1b0>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002582:	2b00      	cmp	r3, #0
 8002584:	d116      	bne.n	80025b4 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8002586:	2301      	movs	r3, #1
 8002588:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800258a:	e013      	b.n	80025b4 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800258c:	4b4b      	ldr	r3, [pc, #300]	; (80026bc <RCCEx_PLLSAI2_Config+0x1b0>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002594:	2b00      	cmp	r3, #0
 8002596:	d10f      	bne.n	80025b8 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002598:	4b48      	ldr	r3, [pc, #288]	; (80026bc <RCCEx_PLLSAI2_Config+0x1b0>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d109      	bne.n	80025b8 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 80025a4:	2301      	movs	r3, #1
 80025a6:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80025a8:	e006      	b.n	80025b8 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 80025aa:	2301      	movs	r3, #1
 80025ac:	73fb      	strb	r3, [r7, #15]
      break;
 80025ae:	e004      	b.n	80025ba <RCCEx_PLLSAI2_Config+0xae>
      break;
 80025b0:	bf00      	nop
 80025b2:	e002      	b.n	80025ba <RCCEx_PLLSAI2_Config+0xae>
      break;
 80025b4:	bf00      	nop
 80025b6:	e000      	b.n	80025ba <RCCEx_PLLSAI2_Config+0xae>
      break;
 80025b8:	bf00      	nop
    }

    if(status == HAL_OK)
 80025ba:	7bfb      	ldrb	r3, [r7, #15]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d10d      	bne.n	80025dc <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80025c0:	4b3e      	ldr	r3, [pc, #248]	; (80026bc <RCCEx_PLLSAI2_Config+0x1b0>)
 80025c2:	68db      	ldr	r3, [r3, #12]
 80025c4:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6819      	ldr	r1, [r3, #0]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	3b01      	subs	r3, #1
 80025d2:	011b      	lsls	r3, r3, #4
 80025d4:	430b      	orrs	r3, r1
 80025d6:	4939      	ldr	r1, [pc, #228]	; (80026bc <RCCEx_PLLSAI2_Config+0x1b0>)
 80025d8:	4313      	orrs	r3, r2
 80025da:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80025dc:	7bfb      	ldrb	r3, [r7, #15]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d167      	bne.n	80026b2 <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80025e2:	4b36      	ldr	r3, [pc, #216]	; (80026bc <RCCEx_PLLSAI2_Config+0x1b0>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4a35      	ldr	r2, [pc, #212]	; (80026bc <RCCEx_PLLSAI2_Config+0x1b0>)
 80025e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025ee:	f7fe fa71 	bl	8000ad4 <HAL_GetTick>
 80025f2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80025f4:	e009      	b.n	800260a <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80025f6:	f7fe fa6d 	bl	8000ad4 <HAL_GetTick>
 80025fa:	4602      	mov	r2, r0
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	1ad3      	subs	r3, r2, r3
 8002600:	2b02      	cmp	r3, #2
 8002602:	d902      	bls.n	800260a <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8002604:	2303      	movs	r3, #3
 8002606:	73fb      	strb	r3, [r7, #15]
        break;
 8002608:	e005      	b.n	8002616 <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800260a:	4b2c      	ldr	r3, [pc, #176]	; (80026bc <RCCEx_PLLSAI2_Config+0x1b0>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002612:	2b00      	cmp	r3, #0
 8002614:	d1ef      	bne.n	80025f6 <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8002616:	7bfb      	ldrb	r3, [r7, #15]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d14a      	bne.n	80026b2 <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d111      	bne.n	8002646 <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002622:	4b26      	ldr	r3, [pc, #152]	; (80026bc <RCCEx_PLLSAI2_Config+0x1b0>)
 8002624:	695b      	ldr	r3, [r3, #20]
 8002626:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800262a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800262e:	687a      	ldr	r2, [r7, #4]
 8002630:	6892      	ldr	r2, [r2, #8]
 8002632:	0211      	lsls	r1, r2, #8
 8002634:	687a      	ldr	r2, [r7, #4]
 8002636:	68d2      	ldr	r2, [r2, #12]
 8002638:	0912      	lsrs	r2, r2, #4
 800263a:	0452      	lsls	r2, r2, #17
 800263c:	430a      	orrs	r2, r1
 800263e:	491f      	ldr	r1, [pc, #124]	; (80026bc <RCCEx_PLLSAI2_Config+0x1b0>)
 8002640:	4313      	orrs	r3, r2
 8002642:	614b      	str	r3, [r1, #20]
 8002644:	e011      	b.n	800266a <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002646:	4b1d      	ldr	r3, [pc, #116]	; (80026bc <RCCEx_PLLSAI2_Config+0x1b0>)
 8002648:	695b      	ldr	r3, [r3, #20]
 800264a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800264e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002652:	687a      	ldr	r2, [r7, #4]
 8002654:	6892      	ldr	r2, [r2, #8]
 8002656:	0211      	lsls	r1, r2, #8
 8002658:	687a      	ldr	r2, [r7, #4]
 800265a:	6912      	ldr	r2, [r2, #16]
 800265c:	0852      	lsrs	r2, r2, #1
 800265e:	3a01      	subs	r2, #1
 8002660:	0652      	lsls	r2, r2, #25
 8002662:	430a      	orrs	r2, r1
 8002664:	4915      	ldr	r1, [pc, #84]	; (80026bc <RCCEx_PLLSAI2_Config+0x1b0>)
 8002666:	4313      	orrs	r3, r2
 8002668:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800266a:	4b14      	ldr	r3, [pc, #80]	; (80026bc <RCCEx_PLLSAI2_Config+0x1b0>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4a13      	ldr	r2, [pc, #76]	; (80026bc <RCCEx_PLLSAI2_Config+0x1b0>)
 8002670:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002674:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002676:	f7fe fa2d 	bl	8000ad4 <HAL_GetTick>
 800267a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800267c:	e009      	b.n	8002692 <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800267e:	f7fe fa29 	bl	8000ad4 <HAL_GetTick>
 8002682:	4602      	mov	r2, r0
 8002684:	68bb      	ldr	r3, [r7, #8]
 8002686:	1ad3      	subs	r3, r2, r3
 8002688:	2b02      	cmp	r3, #2
 800268a:	d902      	bls.n	8002692 <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 800268c:	2303      	movs	r3, #3
 800268e:	73fb      	strb	r3, [r7, #15]
          break;
 8002690:	e005      	b.n	800269e <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002692:	4b0a      	ldr	r3, [pc, #40]	; (80026bc <RCCEx_PLLSAI2_Config+0x1b0>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800269a:	2b00      	cmp	r3, #0
 800269c:	d0ef      	beq.n	800267e <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 800269e:	7bfb      	ldrb	r3, [r7, #15]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d106      	bne.n	80026b2 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80026a4:	4b05      	ldr	r3, [pc, #20]	; (80026bc <RCCEx_PLLSAI2_Config+0x1b0>)
 80026a6:	695a      	ldr	r2, [r3, #20]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	695b      	ldr	r3, [r3, #20]
 80026ac:	4903      	ldr	r1, [pc, #12]	; (80026bc <RCCEx_PLLSAI2_Config+0x1b0>)
 80026ae:	4313      	orrs	r3, r2
 80026b0:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80026b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	3710      	adds	r7, #16
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}
 80026bc:	40021000 	.word	0x40021000

080026c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b082      	sub	sp, #8
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d101      	bne.n	80026d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80026ce:	2301      	movs	r3, #1
 80026d0:	e049      	b.n	8002766 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026d8:	b2db      	uxtb	r3, r3
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d106      	bne.n	80026ec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2200      	movs	r2, #0
 80026e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80026e6:	6878      	ldr	r0, [r7, #4]
 80026e8:	f7fe f8c2 	bl	8000870 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2202      	movs	r2, #2
 80026f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681a      	ldr	r2, [r3, #0]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	3304      	adds	r3, #4
 80026fc:	4619      	mov	r1, r3
 80026fe:	4610      	mov	r0, r2
 8002700:	f000 f9ee 	bl	8002ae0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2201      	movs	r2, #1
 8002708:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2201      	movs	r2, #1
 8002710:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2201      	movs	r2, #1
 8002718:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2201      	movs	r2, #1
 8002720:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2201      	movs	r2, #1
 8002728:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2201      	movs	r2, #1
 8002730:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2201      	movs	r2, #1
 8002738:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2201      	movs	r2, #1
 8002740:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2201      	movs	r2, #1
 8002748:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2201      	movs	r2, #1
 8002750:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2201      	movs	r2, #1
 8002758:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2201      	movs	r2, #1
 8002760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002764:	2300      	movs	r3, #0
}
 8002766:	4618      	mov	r0, r3
 8002768:	3708      	adds	r7, #8
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}
	...

08002770 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002770:	b480      	push	{r7}
 8002772:	b085      	sub	sp, #20
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800277e:	b2db      	uxtb	r3, r3
 8002780:	2b01      	cmp	r3, #1
 8002782:	d001      	beq.n	8002788 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002784:	2301      	movs	r3, #1
 8002786:	e04f      	b.n	8002828 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2202      	movs	r2, #2
 800278c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	68da      	ldr	r2, [r3, #12]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f042 0201 	orr.w	r2, r2, #1
 800279e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a23      	ldr	r2, [pc, #140]	; (8002834 <HAL_TIM_Base_Start_IT+0xc4>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d01d      	beq.n	80027e6 <HAL_TIM_Base_Start_IT+0x76>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027b2:	d018      	beq.n	80027e6 <HAL_TIM_Base_Start_IT+0x76>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a1f      	ldr	r2, [pc, #124]	; (8002838 <HAL_TIM_Base_Start_IT+0xc8>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d013      	beq.n	80027e6 <HAL_TIM_Base_Start_IT+0x76>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4a1e      	ldr	r2, [pc, #120]	; (800283c <HAL_TIM_Base_Start_IT+0xcc>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d00e      	beq.n	80027e6 <HAL_TIM_Base_Start_IT+0x76>
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a1c      	ldr	r2, [pc, #112]	; (8002840 <HAL_TIM_Base_Start_IT+0xd0>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d009      	beq.n	80027e6 <HAL_TIM_Base_Start_IT+0x76>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a1b      	ldr	r2, [pc, #108]	; (8002844 <HAL_TIM_Base_Start_IT+0xd4>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d004      	beq.n	80027e6 <HAL_TIM_Base_Start_IT+0x76>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a19      	ldr	r2, [pc, #100]	; (8002848 <HAL_TIM_Base_Start_IT+0xd8>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d115      	bne.n	8002812 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	689a      	ldr	r2, [r3, #8]
 80027ec:	4b17      	ldr	r3, [pc, #92]	; (800284c <HAL_TIM_Base_Start_IT+0xdc>)
 80027ee:	4013      	ands	r3, r2
 80027f0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	2b06      	cmp	r3, #6
 80027f6:	d015      	beq.n	8002824 <HAL_TIM_Base_Start_IT+0xb4>
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027fe:	d011      	beq.n	8002824 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	681a      	ldr	r2, [r3, #0]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f042 0201 	orr.w	r2, r2, #1
 800280e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002810:	e008      	b.n	8002824 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	681a      	ldr	r2, [r3, #0]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f042 0201 	orr.w	r2, r2, #1
 8002820:	601a      	str	r2, [r3, #0]
 8002822:	e000      	b.n	8002826 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002824:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002826:	2300      	movs	r3, #0
}
 8002828:	4618      	mov	r0, r3
 800282a:	3714      	adds	r7, #20
 800282c:	46bd      	mov	sp, r7
 800282e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002832:	4770      	bx	lr
 8002834:	40012c00 	.word	0x40012c00
 8002838:	40000400 	.word	0x40000400
 800283c:	40000800 	.word	0x40000800
 8002840:	40000c00 	.word	0x40000c00
 8002844:	40013400 	.word	0x40013400
 8002848:	40014000 	.word	0x40014000
 800284c:	00010007 	.word	0x00010007

08002850 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b082      	sub	sp, #8
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	691b      	ldr	r3, [r3, #16]
 800285e:	f003 0302 	and.w	r3, r3, #2
 8002862:	2b02      	cmp	r3, #2
 8002864:	d122      	bne.n	80028ac <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	68db      	ldr	r3, [r3, #12]
 800286c:	f003 0302 	and.w	r3, r3, #2
 8002870:	2b02      	cmp	r3, #2
 8002872:	d11b      	bne.n	80028ac <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f06f 0202 	mvn.w	r2, #2
 800287c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2201      	movs	r2, #1
 8002882:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	699b      	ldr	r3, [r3, #24]
 800288a:	f003 0303 	and.w	r3, r3, #3
 800288e:	2b00      	cmp	r3, #0
 8002890:	d003      	beq.n	800289a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002892:	6878      	ldr	r0, [r7, #4]
 8002894:	f000 f905 	bl	8002aa2 <HAL_TIM_IC_CaptureCallback>
 8002898:	e005      	b.n	80028a6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800289a:	6878      	ldr	r0, [r7, #4]
 800289c:	f000 f8f7 	bl	8002a8e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028a0:	6878      	ldr	r0, [r7, #4]
 80028a2:	f000 f908 	bl	8002ab6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2200      	movs	r2, #0
 80028aa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	691b      	ldr	r3, [r3, #16]
 80028b2:	f003 0304 	and.w	r3, r3, #4
 80028b6:	2b04      	cmp	r3, #4
 80028b8:	d122      	bne.n	8002900 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	68db      	ldr	r3, [r3, #12]
 80028c0:	f003 0304 	and.w	r3, r3, #4
 80028c4:	2b04      	cmp	r3, #4
 80028c6:	d11b      	bne.n	8002900 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f06f 0204 	mvn.w	r2, #4
 80028d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2202      	movs	r2, #2
 80028d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	699b      	ldr	r3, [r3, #24]
 80028de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d003      	beq.n	80028ee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028e6:	6878      	ldr	r0, [r7, #4]
 80028e8:	f000 f8db 	bl	8002aa2 <HAL_TIM_IC_CaptureCallback>
 80028ec:	e005      	b.n	80028fa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028ee:	6878      	ldr	r0, [r7, #4]
 80028f0:	f000 f8cd 	bl	8002a8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028f4:	6878      	ldr	r0, [r7, #4]
 80028f6:	f000 f8de 	bl	8002ab6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2200      	movs	r2, #0
 80028fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	691b      	ldr	r3, [r3, #16]
 8002906:	f003 0308 	and.w	r3, r3, #8
 800290a:	2b08      	cmp	r3, #8
 800290c:	d122      	bne.n	8002954 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	68db      	ldr	r3, [r3, #12]
 8002914:	f003 0308 	and.w	r3, r3, #8
 8002918:	2b08      	cmp	r3, #8
 800291a:	d11b      	bne.n	8002954 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f06f 0208 	mvn.w	r2, #8
 8002924:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2204      	movs	r2, #4
 800292a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	69db      	ldr	r3, [r3, #28]
 8002932:	f003 0303 	and.w	r3, r3, #3
 8002936:	2b00      	cmp	r3, #0
 8002938:	d003      	beq.n	8002942 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800293a:	6878      	ldr	r0, [r7, #4]
 800293c:	f000 f8b1 	bl	8002aa2 <HAL_TIM_IC_CaptureCallback>
 8002940:	e005      	b.n	800294e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002942:	6878      	ldr	r0, [r7, #4]
 8002944:	f000 f8a3 	bl	8002a8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002948:	6878      	ldr	r0, [r7, #4]
 800294a:	f000 f8b4 	bl	8002ab6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2200      	movs	r2, #0
 8002952:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	691b      	ldr	r3, [r3, #16]
 800295a:	f003 0310 	and.w	r3, r3, #16
 800295e:	2b10      	cmp	r3, #16
 8002960:	d122      	bne.n	80029a8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	68db      	ldr	r3, [r3, #12]
 8002968:	f003 0310 	and.w	r3, r3, #16
 800296c:	2b10      	cmp	r3, #16
 800296e:	d11b      	bne.n	80029a8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f06f 0210 	mvn.w	r2, #16
 8002978:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2208      	movs	r2, #8
 800297e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	69db      	ldr	r3, [r3, #28]
 8002986:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800298a:	2b00      	cmp	r3, #0
 800298c:	d003      	beq.n	8002996 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800298e:	6878      	ldr	r0, [r7, #4]
 8002990:	f000 f887 	bl	8002aa2 <HAL_TIM_IC_CaptureCallback>
 8002994:	e005      	b.n	80029a2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002996:	6878      	ldr	r0, [r7, #4]
 8002998:	f000 f879 	bl	8002a8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800299c:	6878      	ldr	r0, [r7, #4]
 800299e:	f000 f88a 	bl	8002ab6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2200      	movs	r2, #0
 80029a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	691b      	ldr	r3, [r3, #16]
 80029ae:	f003 0301 	and.w	r3, r3, #1
 80029b2:	2b01      	cmp	r3, #1
 80029b4:	d10e      	bne.n	80029d4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	68db      	ldr	r3, [r3, #12]
 80029bc:	f003 0301 	and.w	r3, r3, #1
 80029c0:	2b01      	cmp	r3, #1
 80029c2:	d107      	bne.n	80029d4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f06f 0201 	mvn.w	r2, #1
 80029cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80029ce:	6878      	ldr	r0, [r7, #4]
 80029d0:	f7fd fde2 	bl	8000598 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	691b      	ldr	r3, [r3, #16]
 80029da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029de:	2b80      	cmp	r3, #128	; 0x80
 80029e0:	d10e      	bne.n	8002a00 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	68db      	ldr	r3, [r3, #12]
 80029e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029ec:	2b80      	cmp	r3, #128	; 0x80
 80029ee:	d107      	bne.n	8002a00 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80029f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80029fa:	6878      	ldr	r0, [r7, #4]
 80029fc:	f000 f99c 	bl	8002d38 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	691b      	ldr	r3, [r3, #16]
 8002a06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a0e:	d10e      	bne.n	8002a2e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	68db      	ldr	r3, [r3, #12]
 8002a16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a1a:	2b80      	cmp	r3, #128	; 0x80
 8002a1c:	d107      	bne.n	8002a2e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002a26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002a28:	6878      	ldr	r0, [r7, #4]
 8002a2a:	f000 f98f 	bl	8002d4c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	691b      	ldr	r3, [r3, #16]
 8002a34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a38:	2b40      	cmp	r3, #64	; 0x40
 8002a3a:	d10e      	bne.n	8002a5a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	68db      	ldr	r3, [r3, #12]
 8002a42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a46:	2b40      	cmp	r3, #64	; 0x40
 8002a48:	d107      	bne.n	8002a5a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002a52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002a54:	6878      	ldr	r0, [r7, #4]
 8002a56:	f000 f838 	bl	8002aca <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	691b      	ldr	r3, [r3, #16]
 8002a60:	f003 0320 	and.w	r3, r3, #32
 8002a64:	2b20      	cmp	r3, #32
 8002a66:	d10e      	bne.n	8002a86 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	68db      	ldr	r3, [r3, #12]
 8002a6e:	f003 0320 	and.w	r3, r3, #32
 8002a72:	2b20      	cmp	r3, #32
 8002a74:	d107      	bne.n	8002a86 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f06f 0220 	mvn.w	r2, #32
 8002a7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002a80:	6878      	ldr	r0, [r7, #4]
 8002a82:	f000 f94f 	bl	8002d24 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002a86:	bf00      	nop
 8002a88:	3708      	adds	r7, #8
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}

08002a8e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002a8e:	b480      	push	{r7}
 8002a90:	b083      	sub	sp, #12
 8002a92:	af00      	add	r7, sp, #0
 8002a94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002a96:	bf00      	nop
 8002a98:	370c      	adds	r7, #12
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa0:	4770      	bx	lr

08002aa2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002aa2:	b480      	push	{r7}
 8002aa4:	b083      	sub	sp, #12
 8002aa6:	af00      	add	r7, sp, #0
 8002aa8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002aaa:	bf00      	nop
 8002aac:	370c      	adds	r7, #12
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab4:	4770      	bx	lr

08002ab6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002ab6:	b480      	push	{r7}
 8002ab8:	b083      	sub	sp, #12
 8002aba:	af00      	add	r7, sp, #0
 8002abc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002abe:	bf00      	nop
 8002ac0:	370c      	adds	r7, #12
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac8:	4770      	bx	lr

08002aca <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002aca:	b480      	push	{r7}
 8002acc:	b083      	sub	sp, #12
 8002ace:	af00      	add	r7, sp, #0
 8002ad0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002ad2:	bf00      	nop
 8002ad4:	370c      	adds	r7, #12
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002adc:	4770      	bx	lr
	...

08002ae0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	b085      	sub	sp, #20
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
 8002ae8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	4a40      	ldr	r2, [pc, #256]	; (8002bf4 <TIM_Base_SetConfig+0x114>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d013      	beq.n	8002b20 <TIM_Base_SetConfig+0x40>
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002afe:	d00f      	beq.n	8002b20 <TIM_Base_SetConfig+0x40>
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	4a3d      	ldr	r2, [pc, #244]	; (8002bf8 <TIM_Base_SetConfig+0x118>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d00b      	beq.n	8002b20 <TIM_Base_SetConfig+0x40>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	4a3c      	ldr	r2, [pc, #240]	; (8002bfc <TIM_Base_SetConfig+0x11c>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d007      	beq.n	8002b20 <TIM_Base_SetConfig+0x40>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	4a3b      	ldr	r2, [pc, #236]	; (8002c00 <TIM_Base_SetConfig+0x120>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d003      	beq.n	8002b20 <TIM_Base_SetConfig+0x40>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	4a3a      	ldr	r2, [pc, #232]	; (8002c04 <TIM_Base_SetConfig+0x124>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d108      	bne.n	8002b32 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b26:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	68fa      	ldr	r2, [r7, #12]
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	4a2f      	ldr	r2, [pc, #188]	; (8002bf4 <TIM_Base_SetConfig+0x114>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d01f      	beq.n	8002b7a <TIM_Base_SetConfig+0x9a>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b40:	d01b      	beq.n	8002b7a <TIM_Base_SetConfig+0x9a>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	4a2c      	ldr	r2, [pc, #176]	; (8002bf8 <TIM_Base_SetConfig+0x118>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d017      	beq.n	8002b7a <TIM_Base_SetConfig+0x9a>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	4a2b      	ldr	r2, [pc, #172]	; (8002bfc <TIM_Base_SetConfig+0x11c>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d013      	beq.n	8002b7a <TIM_Base_SetConfig+0x9a>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	4a2a      	ldr	r2, [pc, #168]	; (8002c00 <TIM_Base_SetConfig+0x120>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d00f      	beq.n	8002b7a <TIM_Base_SetConfig+0x9a>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	4a29      	ldr	r2, [pc, #164]	; (8002c04 <TIM_Base_SetConfig+0x124>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d00b      	beq.n	8002b7a <TIM_Base_SetConfig+0x9a>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	4a28      	ldr	r2, [pc, #160]	; (8002c08 <TIM_Base_SetConfig+0x128>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d007      	beq.n	8002b7a <TIM_Base_SetConfig+0x9a>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	4a27      	ldr	r2, [pc, #156]	; (8002c0c <TIM_Base_SetConfig+0x12c>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d003      	beq.n	8002b7a <TIM_Base_SetConfig+0x9a>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	4a26      	ldr	r2, [pc, #152]	; (8002c10 <TIM_Base_SetConfig+0x130>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d108      	bne.n	8002b8c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	68db      	ldr	r3, [r3, #12]
 8002b86:	68fa      	ldr	r2, [r7, #12]
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	695b      	ldr	r3, [r3, #20]
 8002b96:	4313      	orrs	r3, r2
 8002b98:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	68fa      	ldr	r2, [r7, #12]
 8002b9e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	689a      	ldr	r2, [r3, #8]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	681a      	ldr	r2, [r3, #0]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	4a10      	ldr	r2, [pc, #64]	; (8002bf4 <TIM_Base_SetConfig+0x114>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d00f      	beq.n	8002bd8 <TIM_Base_SetConfig+0xf8>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	4a12      	ldr	r2, [pc, #72]	; (8002c04 <TIM_Base_SetConfig+0x124>)
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d00b      	beq.n	8002bd8 <TIM_Base_SetConfig+0xf8>
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	4a11      	ldr	r2, [pc, #68]	; (8002c08 <TIM_Base_SetConfig+0x128>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d007      	beq.n	8002bd8 <TIM_Base_SetConfig+0xf8>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	4a10      	ldr	r2, [pc, #64]	; (8002c0c <TIM_Base_SetConfig+0x12c>)
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d003      	beq.n	8002bd8 <TIM_Base_SetConfig+0xf8>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	4a0f      	ldr	r2, [pc, #60]	; (8002c10 <TIM_Base_SetConfig+0x130>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d103      	bne.n	8002be0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	691a      	ldr	r2, [r3, #16]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2201      	movs	r2, #1
 8002be4:	615a      	str	r2, [r3, #20]
}
 8002be6:	bf00      	nop
 8002be8:	3714      	adds	r7, #20
 8002bea:	46bd      	mov	sp, r7
 8002bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf0:	4770      	bx	lr
 8002bf2:	bf00      	nop
 8002bf4:	40012c00 	.word	0x40012c00
 8002bf8:	40000400 	.word	0x40000400
 8002bfc:	40000800 	.word	0x40000800
 8002c00:	40000c00 	.word	0x40000c00
 8002c04:	40013400 	.word	0x40013400
 8002c08:	40014000 	.word	0x40014000
 8002c0c:	40014400 	.word	0x40014400
 8002c10:	40014800 	.word	0x40014800

08002c14 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b085      	sub	sp, #20
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
 8002c1c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c24:	2b01      	cmp	r3, #1
 8002c26:	d101      	bne.n	8002c2c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002c28:	2302      	movs	r3, #2
 8002c2a:	e068      	b.n	8002cfe <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2201      	movs	r2, #1
 8002c30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2202      	movs	r2, #2
 8002c38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	689b      	ldr	r3, [r3, #8]
 8002c4a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a2e      	ldr	r2, [pc, #184]	; (8002d0c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d004      	beq.n	8002c60 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a2d      	ldr	r2, [pc, #180]	; (8002d10 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d108      	bne.n	8002c72 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002c66:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	68fa      	ldr	r2, [r7, #12]
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c78:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	68fa      	ldr	r2, [r7, #12]
 8002c80:	4313      	orrs	r3, r2
 8002c82:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	68fa      	ldr	r2, [r7, #12]
 8002c8a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a1e      	ldr	r2, [pc, #120]	; (8002d0c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d01d      	beq.n	8002cd2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c9e:	d018      	beq.n	8002cd2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a1b      	ldr	r2, [pc, #108]	; (8002d14 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d013      	beq.n	8002cd2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4a1a      	ldr	r2, [pc, #104]	; (8002d18 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d00e      	beq.n	8002cd2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a18      	ldr	r2, [pc, #96]	; (8002d1c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d009      	beq.n	8002cd2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a13      	ldr	r2, [pc, #76]	; (8002d10 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d004      	beq.n	8002cd2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a14      	ldr	r2, [pc, #80]	; (8002d20 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d10c      	bne.n	8002cec <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002cd2:	68bb      	ldr	r3, [r7, #8]
 8002cd4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002cd8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	68ba      	ldr	r2, [r7, #8]
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	68ba      	ldr	r2, [r7, #8]
 8002cea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2201      	movs	r2, #1
 8002cf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002cfc:	2300      	movs	r3, #0
}
 8002cfe:	4618      	mov	r0, r3
 8002d00:	3714      	adds	r7, #20
 8002d02:	46bd      	mov	sp, r7
 8002d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d08:	4770      	bx	lr
 8002d0a:	bf00      	nop
 8002d0c:	40012c00 	.word	0x40012c00
 8002d10:	40013400 	.word	0x40013400
 8002d14:	40000400 	.word	0x40000400
 8002d18:	40000800 	.word	0x40000800
 8002d1c:	40000c00 	.word	0x40000c00
 8002d20:	40014000 	.word	0x40014000

08002d24 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002d24:	b480      	push	{r7}
 8002d26:	b083      	sub	sp, #12
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002d2c:	bf00      	nop
 8002d2e:	370c      	adds	r7, #12
 8002d30:	46bd      	mov	sp, r7
 8002d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d36:	4770      	bx	lr

08002d38 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	b083      	sub	sp, #12
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002d40:	bf00      	nop
 8002d42:	370c      	adds	r7, #12
 8002d44:	46bd      	mov	sp, r7
 8002d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4a:	4770      	bx	lr

08002d4c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b083      	sub	sp, #12
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002d54:	bf00      	nop
 8002d56:	370c      	adds	r7, #12
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5e:	4770      	bx	lr

08002d60 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b082      	sub	sp, #8
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d101      	bne.n	8002d72 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e040      	b.n	8002df4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d106      	bne.n	8002d88 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d82:	6878      	ldr	r0, [r7, #4]
 8002d84:	f7fd fdca 	bl	800091c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2224      	movs	r2, #36	; 0x24
 8002d8c:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	681a      	ldr	r2, [r3, #0]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f022 0201 	bic.w	r2, r2, #1
 8002d9c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002d9e:	6878      	ldr	r0, [r7, #4]
 8002da0:	f000 f82c 	bl	8002dfc <UART_SetConfig>
 8002da4:	4603      	mov	r3, r0
 8002da6:	2b01      	cmp	r3, #1
 8002da8:	d101      	bne.n	8002dae <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002daa:	2301      	movs	r3, #1
 8002dac:	e022      	b.n	8002df4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d002      	beq.n	8002dbc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002db6:	6878      	ldr	r0, [r7, #4]
 8002db8:	f000 faaa 	bl	8003310 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	685a      	ldr	r2, [r3, #4]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002dca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	689a      	ldr	r2, [r3, #8]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002dda:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	681a      	ldr	r2, [r3, #0]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f042 0201 	orr.w	r2, r2, #1
 8002dea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002dec:	6878      	ldr	r0, [r7, #4]
 8002dee:	f000 fb31 	bl	8003454 <UART_CheckIdleState>
 8002df2:	4603      	mov	r3, r0
}
 8002df4:	4618      	mov	r0, r3
 8002df6:	3708      	adds	r7, #8
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bd80      	pop	{r7, pc}

08002dfc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002dfc:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8002e00:	b088      	sub	sp, #32
 8002e02:	af00      	add	r7, sp, #0
 8002e04:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002e06:	2300      	movs	r3, #0
 8002e08:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	689a      	ldr	r2, [r3, #8]
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	691b      	ldr	r3, [r3, #16]
 8002e12:	431a      	orrs	r2, r3
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	695b      	ldr	r3, [r3, #20]
 8002e18:	431a      	orrs	r2, r3
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	69db      	ldr	r3, [r3, #28]
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	681a      	ldr	r2, [r3, #0]
 8002e28:	4bac      	ldr	r3, [pc, #688]	; (80030dc <UART_SetConfig+0x2e0>)
 8002e2a:	4013      	ands	r3, r2
 8002e2c:	687a      	ldr	r2, [r7, #4]
 8002e2e:	6812      	ldr	r2, [r2, #0]
 8002e30:	69f9      	ldr	r1, [r7, #28]
 8002e32:	430b      	orrs	r3, r1
 8002e34:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	68da      	ldr	r2, [r3, #12]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	430a      	orrs	r2, r1
 8002e4a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	699b      	ldr	r3, [r3, #24]
 8002e50:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4aa2      	ldr	r2, [pc, #648]	; (80030e0 <UART_SetConfig+0x2e4>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d004      	beq.n	8002e66 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6a1b      	ldr	r3, [r3, #32]
 8002e60:	69fa      	ldr	r2, [r7, #28]
 8002e62:	4313      	orrs	r3, r2
 8002e64:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	689b      	ldr	r3, [r3, #8]
 8002e6c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	69fa      	ldr	r2, [r7, #28]
 8002e76:	430a      	orrs	r2, r1
 8002e78:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4a99      	ldr	r2, [pc, #612]	; (80030e4 <UART_SetConfig+0x2e8>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d121      	bne.n	8002ec8 <UART_SetConfig+0xcc>
 8002e84:	4b98      	ldr	r3, [pc, #608]	; (80030e8 <UART_SetConfig+0x2ec>)
 8002e86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e8a:	f003 0303 	and.w	r3, r3, #3
 8002e8e:	2b03      	cmp	r3, #3
 8002e90:	d816      	bhi.n	8002ec0 <UART_SetConfig+0xc4>
 8002e92:	a201      	add	r2, pc, #4	; (adr r2, 8002e98 <UART_SetConfig+0x9c>)
 8002e94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e98:	08002ea9 	.word	0x08002ea9
 8002e9c:	08002eb5 	.word	0x08002eb5
 8002ea0:	08002eaf 	.word	0x08002eaf
 8002ea4:	08002ebb 	.word	0x08002ebb
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	76fb      	strb	r3, [r7, #27]
 8002eac:	e0e8      	b.n	8003080 <UART_SetConfig+0x284>
 8002eae:	2302      	movs	r3, #2
 8002eb0:	76fb      	strb	r3, [r7, #27]
 8002eb2:	e0e5      	b.n	8003080 <UART_SetConfig+0x284>
 8002eb4:	2304      	movs	r3, #4
 8002eb6:	76fb      	strb	r3, [r7, #27]
 8002eb8:	e0e2      	b.n	8003080 <UART_SetConfig+0x284>
 8002eba:	2308      	movs	r3, #8
 8002ebc:	76fb      	strb	r3, [r7, #27]
 8002ebe:	e0df      	b.n	8003080 <UART_SetConfig+0x284>
 8002ec0:	2310      	movs	r3, #16
 8002ec2:	76fb      	strb	r3, [r7, #27]
 8002ec4:	bf00      	nop
 8002ec6:	e0db      	b.n	8003080 <UART_SetConfig+0x284>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a87      	ldr	r2, [pc, #540]	; (80030ec <UART_SetConfig+0x2f0>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d134      	bne.n	8002f3c <UART_SetConfig+0x140>
 8002ed2:	4b85      	ldr	r3, [pc, #532]	; (80030e8 <UART_SetConfig+0x2ec>)
 8002ed4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ed8:	f003 030c 	and.w	r3, r3, #12
 8002edc:	2b0c      	cmp	r3, #12
 8002ede:	d829      	bhi.n	8002f34 <UART_SetConfig+0x138>
 8002ee0:	a201      	add	r2, pc, #4	; (adr r2, 8002ee8 <UART_SetConfig+0xec>)
 8002ee2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ee6:	bf00      	nop
 8002ee8:	08002f1d 	.word	0x08002f1d
 8002eec:	08002f35 	.word	0x08002f35
 8002ef0:	08002f35 	.word	0x08002f35
 8002ef4:	08002f35 	.word	0x08002f35
 8002ef8:	08002f29 	.word	0x08002f29
 8002efc:	08002f35 	.word	0x08002f35
 8002f00:	08002f35 	.word	0x08002f35
 8002f04:	08002f35 	.word	0x08002f35
 8002f08:	08002f23 	.word	0x08002f23
 8002f0c:	08002f35 	.word	0x08002f35
 8002f10:	08002f35 	.word	0x08002f35
 8002f14:	08002f35 	.word	0x08002f35
 8002f18:	08002f2f 	.word	0x08002f2f
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	76fb      	strb	r3, [r7, #27]
 8002f20:	e0ae      	b.n	8003080 <UART_SetConfig+0x284>
 8002f22:	2302      	movs	r3, #2
 8002f24:	76fb      	strb	r3, [r7, #27]
 8002f26:	e0ab      	b.n	8003080 <UART_SetConfig+0x284>
 8002f28:	2304      	movs	r3, #4
 8002f2a:	76fb      	strb	r3, [r7, #27]
 8002f2c:	e0a8      	b.n	8003080 <UART_SetConfig+0x284>
 8002f2e:	2308      	movs	r3, #8
 8002f30:	76fb      	strb	r3, [r7, #27]
 8002f32:	e0a5      	b.n	8003080 <UART_SetConfig+0x284>
 8002f34:	2310      	movs	r3, #16
 8002f36:	76fb      	strb	r3, [r7, #27]
 8002f38:	bf00      	nop
 8002f3a:	e0a1      	b.n	8003080 <UART_SetConfig+0x284>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a6b      	ldr	r2, [pc, #428]	; (80030f0 <UART_SetConfig+0x2f4>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d120      	bne.n	8002f88 <UART_SetConfig+0x18c>
 8002f46:	4b68      	ldr	r3, [pc, #416]	; (80030e8 <UART_SetConfig+0x2ec>)
 8002f48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f4c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002f50:	2b10      	cmp	r3, #16
 8002f52:	d00f      	beq.n	8002f74 <UART_SetConfig+0x178>
 8002f54:	2b10      	cmp	r3, #16
 8002f56:	d802      	bhi.n	8002f5e <UART_SetConfig+0x162>
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d005      	beq.n	8002f68 <UART_SetConfig+0x16c>
 8002f5c:	e010      	b.n	8002f80 <UART_SetConfig+0x184>
 8002f5e:	2b20      	cmp	r3, #32
 8002f60:	d005      	beq.n	8002f6e <UART_SetConfig+0x172>
 8002f62:	2b30      	cmp	r3, #48	; 0x30
 8002f64:	d009      	beq.n	8002f7a <UART_SetConfig+0x17e>
 8002f66:	e00b      	b.n	8002f80 <UART_SetConfig+0x184>
 8002f68:	2300      	movs	r3, #0
 8002f6a:	76fb      	strb	r3, [r7, #27]
 8002f6c:	e088      	b.n	8003080 <UART_SetConfig+0x284>
 8002f6e:	2302      	movs	r3, #2
 8002f70:	76fb      	strb	r3, [r7, #27]
 8002f72:	e085      	b.n	8003080 <UART_SetConfig+0x284>
 8002f74:	2304      	movs	r3, #4
 8002f76:	76fb      	strb	r3, [r7, #27]
 8002f78:	e082      	b.n	8003080 <UART_SetConfig+0x284>
 8002f7a:	2308      	movs	r3, #8
 8002f7c:	76fb      	strb	r3, [r7, #27]
 8002f7e:	e07f      	b.n	8003080 <UART_SetConfig+0x284>
 8002f80:	2310      	movs	r3, #16
 8002f82:	76fb      	strb	r3, [r7, #27]
 8002f84:	bf00      	nop
 8002f86:	e07b      	b.n	8003080 <UART_SetConfig+0x284>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a59      	ldr	r2, [pc, #356]	; (80030f4 <UART_SetConfig+0x2f8>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d120      	bne.n	8002fd4 <UART_SetConfig+0x1d8>
 8002f92:	4b55      	ldr	r3, [pc, #340]	; (80030e8 <UART_SetConfig+0x2ec>)
 8002f94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f98:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002f9c:	2b40      	cmp	r3, #64	; 0x40
 8002f9e:	d00f      	beq.n	8002fc0 <UART_SetConfig+0x1c4>
 8002fa0:	2b40      	cmp	r3, #64	; 0x40
 8002fa2:	d802      	bhi.n	8002faa <UART_SetConfig+0x1ae>
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d005      	beq.n	8002fb4 <UART_SetConfig+0x1b8>
 8002fa8:	e010      	b.n	8002fcc <UART_SetConfig+0x1d0>
 8002faa:	2b80      	cmp	r3, #128	; 0x80
 8002fac:	d005      	beq.n	8002fba <UART_SetConfig+0x1be>
 8002fae:	2bc0      	cmp	r3, #192	; 0xc0
 8002fb0:	d009      	beq.n	8002fc6 <UART_SetConfig+0x1ca>
 8002fb2:	e00b      	b.n	8002fcc <UART_SetConfig+0x1d0>
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	76fb      	strb	r3, [r7, #27]
 8002fb8:	e062      	b.n	8003080 <UART_SetConfig+0x284>
 8002fba:	2302      	movs	r3, #2
 8002fbc:	76fb      	strb	r3, [r7, #27]
 8002fbe:	e05f      	b.n	8003080 <UART_SetConfig+0x284>
 8002fc0:	2304      	movs	r3, #4
 8002fc2:	76fb      	strb	r3, [r7, #27]
 8002fc4:	e05c      	b.n	8003080 <UART_SetConfig+0x284>
 8002fc6:	2308      	movs	r3, #8
 8002fc8:	76fb      	strb	r3, [r7, #27]
 8002fca:	e059      	b.n	8003080 <UART_SetConfig+0x284>
 8002fcc:	2310      	movs	r3, #16
 8002fce:	76fb      	strb	r3, [r7, #27]
 8002fd0:	bf00      	nop
 8002fd2:	e055      	b.n	8003080 <UART_SetConfig+0x284>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a47      	ldr	r2, [pc, #284]	; (80030f8 <UART_SetConfig+0x2fc>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d124      	bne.n	8003028 <UART_SetConfig+0x22c>
 8002fde:	4b42      	ldr	r3, [pc, #264]	; (80030e8 <UART_SetConfig+0x2ec>)
 8002fe0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fe4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fe8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fec:	d012      	beq.n	8003014 <UART_SetConfig+0x218>
 8002fee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ff2:	d802      	bhi.n	8002ffa <UART_SetConfig+0x1fe>
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d007      	beq.n	8003008 <UART_SetConfig+0x20c>
 8002ff8:	e012      	b.n	8003020 <UART_SetConfig+0x224>
 8002ffa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ffe:	d006      	beq.n	800300e <UART_SetConfig+0x212>
 8003000:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003004:	d009      	beq.n	800301a <UART_SetConfig+0x21e>
 8003006:	e00b      	b.n	8003020 <UART_SetConfig+0x224>
 8003008:	2300      	movs	r3, #0
 800300a:	76fb      	strb	r3, [r7, #27]
 800300c:	e038      	b.n	8003080 <UART_SetConfig+0x284>
 800300e:	2302      	movs	r3, #2
 8003010:	76fb      	strb	r3, [r7, #27]
 8003012:	e035      	b.n	8003080 <UART_SetConfig+0x284>
 8003014:	2304      	movs	r3, #4
 8003016:	76fb      	strb	r3, [r7, #27]
 8003018:	e032      	b.n	8003080 <UART_SetConfig+0x284>
 800301a:	2308      	movs	r3, #8
 800301c:	76fb      	strb	r3, [r7, #27]
 800301e:	e02f      	b.n	8003080 <UART_SetConfig+0x284>
 8003020:	2310      	movs	r3, #16
 8003022:	76fb      	strb	r3, [r7, #27]
 8003024:	bf00      	nop
 8003026:	e02b      	b.n	8003080 <UART_SetConfig+0x284>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a2c      	ldr	r2, [pc, #176]	; (80030e0 <UART_SetConfig+0x2e4>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d124      	bne.n	800307c <UART_SetConfig+0x280>
 8003032:	4b2d      	ldr	r3, [pc, #180]	; (80030e8 <UART_SetConfig+0x2ec>)
 8003034:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003038:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800303c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003040:	d012      	beq.n	8003068 <UART_SetConfig+0x26c>
 8003042:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003046:	d802      	bhi.n	800304e <UART_SetConfig+0x252>
 8003048:	2b00      	cmp	r3, #0
 800304a:	d007      	beq.n	800305c <UART_SetConfig+0x260>
 800304c:	e012      	b.n	8003074 <UART_SetConfig+0x278>
 800304e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003052:	d006      	beq.n	8003062 <UART_SetConfig+0x266>
 8003054:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003058:	d009      	beq.n	800306e <UART_SetConfig+0x272>
 800305a:	e00b      	b.n	8003074 <UART_SetConfig+0x278>
 800305c:	2300      	movs	r3, #0
 800305e:	76fb      	strb	r3, [r7, #27]
 8003060:	e00e      	b.n	8003080 <UART_SetConfig+0x284>
 8003062:	2302      	movs	r3, #2
 8003064:	76fb      	strb	r3, [r7, #27]
 8003066:	e00b      	b.n	8003080 <UART_SetConfig+0x284>
 8003068:	2304      	movs	r3, #4
 800306a:	76fb      	strb	r3, [r7, #27]
 800306c:	e008      	b.n	8003080 <UART_SetConfig+0x284>
 800306e:	2308      	movs	r3, #8
 8003070:	76fb      	strb	r3, [r7, #27]
 8003072:	e005      	b.n	8003080 <UART_SetConfig+0x284>
 8003074:	2310      	movs	r3, #16
 8003076:	76fb      	strb	r3, [r7, #27]
 8003078:	bf00      	nop
 800307a:	e001      	b.n	8003080 <UART_SetConfig+0x284>
 800307c:	2310      	movs	r3, #16
 800307e:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a16      	ldr	r2, [pc, #88]	; (80030e0 <UART_SetConfig+0x2e4>)
 8003086:	4293      	cmp	r3, r2
 8003088:	f040 8087 	bne.w	800319a <UART_SetConfig+0x39e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800308c:	7efb      	ldrb	r3, [r7, #27]
 800308e:	2b08      	cmp	r3, #8
 8003090:	d836      	bhi.n	8003100 <UART_SetConfig+0x304>
 8003092:	a201      	add	r2, pc, #4	; (adr r2, 8003098 <UART_SetConfig+0x29c>)
 8003094:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003098:	080030bd 	.word	0x080030bd
 800309c:	08003101 	.word	0x08003101
 80030a0:	080030c5 	.word	0x080030c5
 80030a4:	08003101 	.word	0x08003101
 80030a8:	080030cb 	.word	0x080030cb
 80030ac:	08003101 	.word	0x08003101
 80030b0:	08003101 	.word	0x08003101
 80030b4:	08003101 	.word	0x08003101
 80030b8:	080030d3 	.word	0x080030d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80030bc:	f7fe fdc4 	bl	8001c48 <HAL_RCC_GetPCLK1Freq>
 80030c0:	6178      	str	r0, [r7, #20]
        break;
 80030c2:	e022      	b.n	800310a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80030c4:	4b0d      	ldr	r3, [pc, #52]	; (80030fc <UART_SetConfig+0x300>)
 80030c6:	617b      	str	r3, [r7, #20]
        break;
 80030c8:	e01f      	b.n	800310a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80030ca:	f7fe fd27 	bl	8001b1c <HAL_RCC_GetSysClockFreq>
 80030ce:	6178      	str	r0, [r7, #20]
        break;
 80030d0:	e01b      	b.n	800310a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80030d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80030d6:	617b      	str	r3, [r7, #20]
        break;
 80030d8:	e017      	b.n	800310a <UART_SetConfig+0x30e>
 80030da:	bf00      	nop
 80030dc:	efff69f3 	.word	0xefff69f3
 80030e0:	40008000 	.word	0x40008000
 80030e4:	40013800 	.word	0x40013800
 80030e8:	40021000 	.word	0x40021000
 80030ec:	40004400 	.word	0x40004400
 80030f0:	40004800 	.word	0x40004800
 80030f4:	40004c00 	.word	0x40004c00
 80030f8:	40005000 	.word	0x40005000
 80030fc:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003100:	2300      	movs	r3, #0
 8003102:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003104:	2301      	movs	r3, #1
 8003106:	76bb      	strb	r3, [r7, #26]
        break;
 8003108:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800310a:	697b      	ldr	r3, [r7, #20]
 800310c:	2b00      	cmp	r3, #0
 800310e:	f000 80f1 	beq.w	80032f4 <UART_SetConfig+0x4f8>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	685a      	ldr	r2, [r3, #4]
 8003116:	4613      	mov	r3, r2
 8003118:	005b      	lsls	r3, r3, #1
 800311a:	4413      	add	r3, r2
 800311c:	697a      	ldr	r2, [r7, #20]
 800311e:	429a      	cmp	r2, r3
 8003120:	d305      	bcc.n	800312e <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003128:	697a      	ldr	r2, [r7, #20]
 800312a:	429a      	cmp	r2, r3
 800312c:	d902      	bls.n	8003134 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 800312e:	2301      	movs	r3, #1
 8003130:	76bb      	strb	r3, [r7, #26]
 8003132:	e0df      	b.n	80032f4 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 8003134:	697b      	ldr	r3, [r7, #20]
 8003136:	4619      	mov	r1, r3
 8003138:	f04f 0200 	mov.w	r2, #0
 800313c:	f04f 0300 	mov.w	r3, #0
 8003140:	f04f 0400 	mov.w	r4, #0
 8003144:	0214      	lsls	r4, r2, #8
 8003146:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800314a:	020b      	lsls	r3, r1, #8
 800314c:	687a      	ldr	r2, [r7, #4]
 800314e:	6852      	ldr	r2, [r2, #4]
 8003150:	0852      	lsrs	r2, r2, #1
 8003152:	4611      	mov	r1, r2
 8003154:	f04f 0200 	mov.w	r2, #0
 8003158:	eb13 0b01 	adds.w	fp, r3, r1
 800315c:	eb44 0c02 	adc.w	ip, r4, r2
 8003160:	4658      	mov	r0, fp
 8003162:	4661      	mov	r1, ip
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	f04f 0400 	mov.w	r4, #0
 800316c:	461a      	mov	r2, r3
 800316e:	4623      	mov	r3, r4
 8003170:	f7fd f82a 	bl	80001c8 <__aeabi_uldivmod>
 8003174:	4603      	mov	r3, r0
 8003176:	460c      	mov	r4, r1
 8003178:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800317a:	693b      	ldr	r3, [r7, #16]
 800317c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003180:	d308      	bcc.n	8003194 <UART_SetConfig+0x398>
 8003182:	693b      	ldr	r3, [r7, #16]
 8003184:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003188:	d204      	bcs.n	8003194 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	693a      	ldr	r2, [r7, #16]
 8003190:	60da      	str	r2, [r3, #12]
 8003192:	e0af      	b.n	80032f4 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8003194:	2301      	movs	r3, #1
 8003196:	76bb      	strb	r3, [r7, #26]
 8003198:	e0ac      	b.n	80032f4 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	69db      	ldr	r3, [r3, #28]
 800319e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80031a2:	d15b      	bne.n	800325c <UART_SetConfig+0x460>
  {
    switch (clocksource)
 80031a4:	7efb      	ldrb	r3, [r7, #27]
 80031a6:	2b08      	cmp	r3, #8
 80031a8:	d827      	bhi.n	80031fa <UART_SetConfig+0x3fe>
 80031aa:	a201      	add	r2, pc, #4	; (adr r2, 80031b0 <UART_SetConfig+0x3b4>)
 80031ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031b0:	080031d5 	.word	0x080031d5
 80031b4:	080031dd 	.word	0x080031dd
 80031b8:	080031e5 	.word	0x080031e5
 80031bc:	080031fb 	.word	0x080031fb
 80031c0:	080031eb 	.word	0x080031eb
 80031c4:	080031fb 	.word	0x080031fb
 80031c8:	080031fb 	.word	0x080031fb
 80031cc:	080031fb 	.word	0x080031fb
 80031d0:	080031f3 	.word	0x080031f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80031d4:	f7fe fd38 	bl	8001c48 <HAL_RCC_GetPCLK1Freq>
 80031d8:	6178      	str	r0, [r7, #20]
        break;
 80031da:	e013      	b.n	8003204 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80031dc:	f7fe fd4a 	bl	8001c74 <HAL_RCC_GetPCLK2Freq>
 80031e0:	6178      	str	r0, [r7, #20]
        break;
 80031e2:	e00f      	b.n	8003204 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80031e4:	4b49      	ldr	r3, [pc, #292]	; (800330c <UART_SetConfig+0x510>)
 80031e6:	617b      	str	r3, [r7, #20]
        break;
 80031e8:	e00c      	b.n	8003204 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80031ea:	f7fe fc97 	bl	8001b1c <HAL_RCC_GetSysClockFreq>
 80031ee:	6178      	str	r0, [r7, #20]
        break;
 80031f0:	e008      	b.n	8003204 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80031f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80031f6:	617b      	str	r3, [r7, #20]
        break;
 80031f8:	e004      	b.n	8003204 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 80031fa:	2300      	movs	r3, #0
 80031fc:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80031fe:	2301      	movs	r3, #1
 8003200:	76bb      	strb	r3, [r7, #26]
        break;
 8003202:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003204:	697b      	ldr	r3, [r7, #20]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d074      	beq.n	80032f4 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800320a:	697b      	ldr	r3, [r7, #20]
 800320c:	005a      	lsls	r2, r3, #1
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	085b      	lsrs	r3, r3, #1
 8003214:	441a      	add	r2, r3
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	fbb2 f3f3 	udiv	r3, r2, r3
 800321e:	b29b      	uxth	r3, r3
 8003220:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	2b0f      	cmp	r3, #15
 8003226:	d916      	bls.n	8003256 <UART_SetConfig+0x45a>
 8003228:	693b      	ldr	r3, [r7, #16]
 800322a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800322e:	d212      	bcs.n	8003256 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003230:	693b      	ldr	r3, [r7, #16]
 8003232:	b29b      	uxth	r3, r3
 8003234:	f023 030f 	bic.w	r3, r3, #15
 8003238:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800323a:	693b      	ldr	r3, [r7, #16]
 800323c:	085b      	lsrs	r3, r3, #1
 800323e:	b29b      	uxth	r3, r3
 8003240:	f003 0307 	and.w	r3, r3, #7
 8003244:	b29a      	uxth	r2, r3
 8003246:	89fb      	ldrh	r3, [r7, #14]
 8003248:	4313      	orrs	r3, r2
 800324a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	89fa      	ldrh	r2, [r7, #14]
 8003252:	60da      	str	r2, [r3, #12]
 8003254:	e04e      	b.n	80032f4 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8003256:	2301      	movs	r3, #1
 8003258:	76bb      	strb	r3, [r7, #26]
 800325a:	e04b      	b.n	80032f4 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 800325c:	7efb      	ldrb	r3, [r7, #27]
 800325e:	2b08      	cmp	r3, #8
 8003260:	d827      	bhi.n	80032b2 <UART_SetConfig+0x4b6>
 8003262:	a201      	add	r2, pc, #4	; (adr r2, 8003268 <UART_SetConfig+0x46c>)
 8003264:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003268:	0800328d 	.word	0x0800328d
 800326c:	08003295 	.word	0x08003295
 8003270:	0800329d 	.word	0x0800329d
 8003274:	080032b3 	.word	0x080032b3
 8003278:	080032a3 	.word	0x080032a3
 800327c:	080032b3 	.word	0x080032b3
 8003280:	080032b3 	.word	0x080032b3
 8003284:	080032b3 	.word	0x080032b3
 8003288:	080032ab 	.word	0x080032ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800328c:	f7fe fcdc 	bl	8001c48 <HAL_RCC_GetPCLK1Freq>
 8003290:	6178      	str	r0, [r7, #20]
        break;
 8003292:	e013      	b.n	80032bc <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003294:	f7fe fcee 	bl	8001c74 <HAL_RCC_GetPCLK2Freq>
 8003298:	6178      	str	r0, [r7, #20]
        break;
 800329a:	e00f      	b.n	80032bc <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800329c:	4b1b      	ldr	r3, [pc, #108]	; (800330c <UART_SetConfig+0x510>)
 800329e:	617b      	str	r3, [r7, #20]
        break;
 80032a0:	e00c      	b.n	80032bc <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80032a2:	f7fe fc3b 	bl	8001b1c <HAL_RCC_GetSysClockFreq>
 80032a6:	6178      	str	r0, [r7, #20]
        break;
 80032a8:	e008      	b.n	80032bc <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80032aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80032ae:	617b      	str	r3, [r7, #20]
        break;
 80032b0:	e004      	b.n	80032bc <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 80032b2:	2300      	movs	r3, #0
 80032b4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80032b6:	2301      	movs	r3, #1
 80032b8:	76bb      	strb	r3, [r7, #26]
        break;
 80032ba:	bf00      	nop
    }

    if (pclk != 0U)
 80032bc:	697b      	ldr	r3, [r7, #20]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d018      	beq.n	80032f4 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	085a      	lsrs	r2, r3, #1
 80032c8:	697b      	ldr	r3, [r7, #20]
 80032ca:	441a      	add	r2, r3
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80032d4:	b29b      	uxth	r3, r3
 80032d6:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80032d8:	693b      	ldr	r3, [r7, #16]
 80032da:	2b0f      	cmp	r3, #15
 80032dc:	d908      	bls.n	80032f0 <UART_SetConfig+0x4f4>
 80032de:	693b      	ldr	r3, [r7, #16]
 80032e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032e4:	d204      	bcs.n	80032f0 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	693a      	ldr	r2, [r7, #16]
 80032ec:	60da      	str	r2, [r3, #12]
 80032ee:	e001      	b.n	80032f4 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80032f0:	2301      	movs	r3, #1
 80032f2:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2200      	movs	r2, #0
 80032f8:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2200      	movs	r2, #0
 80032fe:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8003300:	7ebb      	ldrb	r3, [r7, #26]
}
 8003302:	4618      	mov	r0, r3
 8003304:	3720      	adds	r7, #32
 8003306:	46bd      	mov	sp, r7
 8003308:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800330c:	00f42400 	.word	0x00f42400

08003310 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003310:	b480      	push	{r7}
 8003312:	b083      	sub	sp, #12
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800331c:	f003 0301 	and.w	r3, r3, #1
 8003320:	2b00      	cmp	r3, #0
 8003322:	d00a      	beq.n	800333a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	430a      	orrs	r2, r1
 8003338:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800333e:	f003 0302 	and.w	r3, r3, #2
 8003342:	2b00      	cmp	r3, #0
 8003344:	d00a      	beq.n	800335c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	430a      	orrs	r2, r1
 800335a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003360:	f003 0304 	and.w	r3, r3, #4
 8003364:	2b00      	cmp	r3, #0
 8003366:	d00a      	beq.n	800337e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	430a      	orrs	r2, r1
 800337c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003382:	f003 0308 	and.w	r3, r3, #8
 8003386:	2b00      	cmp	r3, #0
 8003388:	d00a      	beq.n	80033a0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	430a      	orrs	r2, r1
 800339e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a4:	f003 0310 	and.w	r3, r3, #16
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d00a      	beq.n	80033c2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	689b      	ldr	r3, [r3, #8]
 80033b2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	430a      	orrs	r2, r1
 80033c0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c6:	f003 0320 	and.w	r3, r3, #32
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d00a      	beq.n	80033e4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	689b      	ldr	r3, [r3, #8]
 80033d4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	430a      	orrs	r2, r1
 80033e2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d01a      	beq.n	8003426 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	430a      	orrs	r2, r1
 8003404:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800340a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800340e:	d10a      	bne.n	8003426 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	430a      	orrs	r2, r1
 8003424:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800342a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800342e:	2b00      	cmp	r3, #0
 8003430:	d00a      	beq.n	8003448 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	430a      	orrs	r2, r1
 8003446:	605a      	str	r2, [r3, #4]
  }
}
 8003448:	bf00      	nop
 800344a:	370c      	adds	r7, #12
 800344c:	46bd      	mov	sp, r7
 800344e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003452:	4770      	bx	lr

08003454 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b086      	sub	sp, #24
 8003458:	af02      	add	r7, sp, #8
 800345a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2200      	movs	r2, #0
 8003460:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8003462:	f7fd fb37 	bl	8000ad4 <HAL_GetTick>
 8003466:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f003 0308 	and.w	r3, r3, #8
 8003472:	2b08      	cmp	r3, #8
 8003474:	d10e      	bne.n	8003494 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003476:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800347a:	9300      	str	r3, [sp, #0]
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	2200      	movs	r2, #0
 8003480:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003484:	6878      	ldr	r0, [r7, #4]
 8003486:	f000 f82a 	bl	80034de <UART_WaitOnFlagUntilTimeout>
 800348a:	4603      	mov	r3, r0
 800348c:	2b00      	cmp	r3, #0
 800348e:	d001      	beq.n	8003494 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003490:	2303      	movs	r3, #3
 8003492:	e020      	b.n	80034d6 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f003 0304 	and.w	r3, r3, #4
 800349e:	2b04      	cmp	r3, #4
 80034a0:	d10e      	bne.n	80034c0 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80034a2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80034a6:	9300      	str	r3, [sp, #0]
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	2200      	movs	r2, #0
 80034ac:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80034b0:	6878      	ldr	r0, [r7, #4]
 80034b2:	f000 f814 	bl	80034de <UART_WaitOnFlagUntilTimeout>
 80034b6:	4603      	mov	r3, r0
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d001      	beq.n	80034c0 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80034bc:	2303      	movs	r3, #3
 80034be:	e00a      	b.n	80034d6 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2220      	movs	r2, #32
 80034c4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2220      	movs	r2, #32
 80034ca:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2200      	movs	r2, #0
 80034d0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80034d4:	2300      	movs	r3, #0
}
 80034d6:	4618      	mov	r0, r3
 80034d8:	3710      	adds	r7, #16
 80034da:	46bd      	mov	sp, r7
 80034dc:	bd80      	pop	{r7, pc}

080034de <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80034de:	b580      	push	{r7, lr}
 80034e0:	b084      	sub	sp, #16
 80034e2:	af00      	add	r7, sp, #0
 80034e4:	60f8      	str	r0, [r7, #12]
 80034e6:	60b9      	str	r1, [r7, #8]
 80034e8:	603b      	str	r3, [r7, #0]
 80034ea:	4613      	mov	r3, r2
 80034ec:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034ee:	e05d      	b.n	80035ac <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034f0:	69bb      	ldr	r3, [r7, #24]
 80034f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034f6:	d059      	beq.n	80035ac <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034f8:	f7fd faec 	bl	8000ad4 <HAL_GetTick>
 80034fc:	4602      	mov	r2, r0
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	1ad3      	subs	r3, r2, r3
 8003502:	69ba      	ldr	r2, [r7, #24]
 8003504:	429a      	cmp	r2, r3
 8003506:	d302      	bcc.n	800350e <UART_WaitOnFlagUntilTimeout+0x30>
 8003508:	69bb      	ldr	r3, [r7, #24]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d11b      	bne.n	8003546 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	681a      	ldr	r2, [r3, #0]
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800351c:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	689a      	ldr	r2, [r3, #8]
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f022 0201 	bic.w	r2, r2, #1
 800352c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	2220      	movs	r2, #32
 8003532:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	2220      	movs	r2, #32
 8003538:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	2200      	movs	r2, #0
 800353e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8003542:	2303      	movs	r3, #3
 8003544:	e042      	b.n	80035cc <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f003 0304 	and.w	r3, r3, #4
 8003550:	2b00      	cmp	r3, #0
 8003552:	d02b      	beq.n	80035ac <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	69db      	ldr	r3, [r3, #28]
 800355a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800355e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003562:	d123      	bne.n	80035ac <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800356c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	681a      	ldr	r2, [r3, #0]
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800357c:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	689a      	ldr	r2, [r3, #8]
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f022 0201 	bic.w	r2, r2, #1
 800358c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	2220      	movs	r2, #32
 8003592:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	2220      	movs	r2, #32
 8003598:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	2220      	movs	r2, #32
 800359e:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	2200      	movs	r2, #0
 80035a4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 80035a8:	2303      	movs	r3, #3
 80035aa:	e00f      	b.n	80035cc <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	69da      	ldr	r2, [r3, #28]
 80035b2:	68bb      	ldr	r3, [r7, #8]
 80035b4:	4013      	ands	r3, r2
 80035b6:	68ba      	ldr	r2, [r7, #8]
 80035b8:	429a      	cmp	r2, r3
 80035ba:	bf0c      	ite	eq
 80035bc:	2301      	moveq	r3, #1
 80035be:	2300      	movne	r3, #0
 80035c0:	b2db      	uxtb	r3, r3
 80035c2:	461a      	mov	r2, r3
 80035c4:	79fb      	ldrb	r3, [r7, #7]
 80035c6:	429a      	cmp	r2, r3
 80035c8:	d092      	beq.n	80034f0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80035ca:	2300      	movs	r3, #0
}
 80035cc:	4618      	mov	r0, r3
 80035ce:	3710      	adds	r7, #16
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bd80      	pop	{r7, pc}

080035d4 <__libc_init_array>:
 80035d4:	b570      	push	{r4, r5, r6, lr}
 80035d6:	4e0d      	ldr	r6, [pc, #52]	; (800360c <__libc_init_array+0x38>)
 80035d8:	4c0d      	ldr	r4, [pc, #52]	; (8003610 <__libc_init_array+0x3c>)
 80035da:	1ba4      	subs	r4, r4, r6
 80035dc:	10a4      	asrs	r4, r4, #2
 80035de:	2500      	movs	r5, #0
 80035e0:	42a5      	cmp	r5, r4
 80035e2:	d109      	bne.n	80035f8 <__libc_init_array+0x24>
 80035e4:	4e0b      	ldr	r6, [pc, #44]	; (8003614 <__libc_init_array+0x40>)
 80035e6:	4c0c      	ldr	r4, [pc, #48]	; (8003618 <__libc_init_array+0x44>)
 80035e8:	f000 f820 	bl	800362c <_init>
 80035ec:	1ba4      	subs	r4, r4, r6
 80035ee:	10a4      	asrs	r4, r4, #2
 80035f0:	2500      	movs	r5, #0
 80035f2:	42a5      	cmp	r5, r4
 80035f4:	d105      	bne.n	8003602 <__libc_init_array+0x2e>
 80035f6:	bd70      	pop	{r4, r5, r6, pc}
 80035f8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80035fc:	4798      	blx	r3
 80035fe:	3501      	adds	r5, #1
 8003600:	e7ee      	b.n	80035e0 <__libc_init_array+0xc>
 8003602:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003606:	4798      	blx	r3
 8003608:	3501      	adds	r5, #1
 800360a:	e7f2      	b.n	80035f2 <__libc_init_array+0x1e>
 800360c:	08003694 	.word	0x08003694
 8003610:	08003694 	.word	0x08003694
 8003614:	08003694 	.word	0x08003694
 8003618:	08003698 	.word	0x08003698

0800361c <memset>:
 800361c:	4402      	add	r2, r0
 800361e:	4603      	mov	r3, r0
 8003620:	4293      	cmp	r3, r2
 8003622:	d100      	bne.n	8003626 <memset+0xa>
 8003624:	4770      	bx	lr
 8003626:	f803 1b01 	strb.w	r1, [r3], #1
 800362a:	e7f9      	b.n	8003620 <memset+0x4>

0800362c <_init>:
 800362c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800362e:	bf00      	nop
 8003630:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003632:	bc08      	pop	{r3}
 8003634:	469e      	mov	lr, r3
 8003636:	4770      	bx	lr

08003638 <_fini>:
 8003638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800363a:	bf00      	nop
 800363c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800363e:	bc08      	pop	{r3}
 8003640:	469e      	mov	lr, r3
 8003642:	4770      	bx	lr
