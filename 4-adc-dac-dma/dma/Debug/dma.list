
dma.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000068bc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f8  08006a4c  08006a4c  00016a4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006b44  08006b44  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  08006b44  08006b44  00016b44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006b4c  08006b4c  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006b4c  08006b4c  00016b4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006b50  08006b50  00016b50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08006b54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c4  20000080  08006bd4  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000244  08006bd4  00020244  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018b2f  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000310f  00000000  00000000  00038bdf  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001520  00000000  00000000  0003bcf0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001378  00000000  00000000  0003d210  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002b101  00000000  00000000  0003e588  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001336a  00000000  00000000  00069689  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00109f87  00000000  00000000  0007c9f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0018697a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005f68  00000000  00000000  001869f8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000080 	.word	0x20000080
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006a34 	.word	0x08006a34

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000084 	.word	0x20000084
 80001cc:	08006a34 	.word	0x08006a34

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b972 	b.w	800056c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	4688      	mov	r8, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14b      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4615      	mov	r5, r2
 80002b2:	d967      	bls.n	8000384 <__udivmoddi4+0xe4>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0720 	rsb	r7, r2, #32
 80002be:	fa01 f302 	lsl.w	r3, r1, r2
 80002c2:	fa20 f707 	lsr.w	r7, r0, r7
 80002c6:	4095      	lsls	r5, r2
 80002c8:	ea47 0803 	orr.w	r8, r7, r3
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002d8:	fa1f fc85 	uxth.w	ip, r5
 80002dc:	fb0e 8817 	mls	r8, lr, r7, r8
 80002e0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e4:	fb07 f10c 	mul.w	r1, r7, ip
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18eb      	adds	r3, r5, r3
 80002ee:	f107 30ff 	add.w	r0, r7, #4294967295
 80002f2:	f080 811b 	bcs.w	800052c <__udivmoddi4+0x28c>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8118 	bls.w	800052c <__udivmoddi4+0x28c>
 80002fc:	3f02      	subs	r7, #2
 80002fe:	442b      	add	r3, r5
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0fe 	udiv	r0, r3, lr
 8000308:	fb0e 3310 	mls	r3, lr, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fc0c 	mul.w	ip, r0, ip
 8000314:	45a4      	cmp	ip, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	192c      	adds	r4, r5, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8107 	bcs.w	8000530 <__udivmoddi4+0x290>
 8000322:	45a4      	cmp	ip, r4
 8000324:	f240 8104 	bls.w	8000530 <__udivmoddi4+0x290>
 8000328:	3802      	subs	r0, #2
 800032a:	442c      	add	r4, r5
 800032c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000330:	eba4 040c 	sub.w	r4, r4, ip
 8000334:	2700      	movs	r7, #0
 8000336:	b11e      	cbz	r6, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c6 4300 	strd	r4, r3, [r6]
 8000340:	4639      	mov	r1, r7
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0xbe>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80eb 	beq.w	8000526 <__udivmoddi4+0x286>
 8000350:	2700      	movs	r7, #0
 8000352:	e9c6 0100 	strd	r0, r1, [r6]
 8000356:	4638      	mov	r0, r7
 8000358:	4639      	mov	r1, r7
 800035a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035e:	fab3 f783 	clz	r7, r3
 8000362:	2f00      	cmp	r7, #0
 8000364:	d147      	bne.n	80003f6 <__udivmoddi4+0x156>
 8000366:	428b      	cmp	r3, r1
 8000368:	d302      	bcc.n	8000370 <__udivmoddi4+0xd0>
 800036a:	4282      	cmp	r2, r0
 800036c:	f200 80fa 	bhi.w	8000564 <__udivmoddi4+0x2c4>
 8000370:	1a84      	subs	r4, r0, r2
 8000372:	eb61 0303 	sbc.w	r3, r1, r3
 8000376:	2001      	movs	r0, #1
 8000378:	4698      	mov	r8, r3
 800037a:	2e00      	cmp	r6, #0
 800037c:	d0e0      	beq.n	8000340 <__udivmoddi4+0xa0>
 800037e:	e9c6 4800 	strd	r4, r8, [r6]
 8000382:	e7dd      	b.n	8000340 <__udivmoddi4+0xa0>
 8000384:	b902      	cbnz	r2, 8000388 <__udivmoddi4+0xe8>
 8000386:	deff      	udf	#255	; 0xff
 8000388:	fab2 f282 	clz	r2, r2
 800038c:	2a00      	cmp	r2, #0
 800038e:	f040 808f 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000392:	1b49      	subs	r1, r1, r5
 8000394:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000398:	fa1f f885 	uxth.w	r8, r5
 800039c:	2701      	movs	r7, #1
 800039e:	fbb1 fcfe 	udiv	ip, r1, lr
 80003a2:	0c23      	lsrs	r3, r4, #16
 80003a4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ac:	fb08 f10c 	mul.w	r1, r8, ip
 80003b0:	4299      	cmp	r1, r3
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b4:	18eb      	adds	r3, r5, r3
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4299      	cmp	r1, r3
 80003be:	f200 80cd 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1a59      	subs	r1, r3, r1
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003d0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x14c>
 80003dc:	192c      	adds	r4, r5, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x14a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80b6 	bhi.w	8000556 <__udivmoddi4+0x2b6>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e79f      	b.n	8000336 <__udivmoddi4+0x96>
 80003f6:	f1c7 0c20 	rsb	ip, r7, #32
 80003fa:	40bb      	lsls	r3, r7
 80003fc:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000400:	ea4e 0e03 	orr.w	lr, lr, r3
 8000404:	fa01 f407 	lsl.w	r4, r1, r7
 8000408:	fa20 f50c 	lsr.w	r5, r0, ip
 800040c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000410:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000414:	4325      	orrs	r5, r4
 8000416:	fbb3 f9f8 	udiv	r9, r3, r8
 800041a:	0c2c      	lsrs	r4, r5, #16
 800041c:	fb08 3319 	mls	r3, r8, r9, r3
 8000420:	fa1f fa8e 	uxth.w	sl, lr
 8000424:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000428:	fb09 f40a 	mul.w	r4, r9, sl
 800042c:	429c      	cmp	r4, r3
 800042e:	fa02 f207 	lsl.w	r2, r2, r7
 8000432:	fa00 f107 	lsl.w	r1, r0, r7
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1e 0303 	adds.w	r3, lr, r3
 800043c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000440:	f080 8087 	bcs.w	8000552 <__udivmoddi4+0x2b2>
 8000444:	429c      	cmp	r4, r3
 8000446:	f240 8084 	bls.w	8000552 <__udivmoddi4+0x2b2>
 800044a:	f1a9 0902 	sub.w	r9, r9, #2
 800044e:	4473      	add	r3, lr
 8000450:	1b1b      	subs	r3, r3, r4
 8000452:	b2ad      	uxth	r5, r5
 8000454:	fbb3 f0f8 	udiv	r0, r3, r8
 8000458:	fb08 3310 	mls	r3, r8, r0, r3
 800045c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000460:	fb00 fa0a 	mul.w	sl, r0, sl
 8000464:	45a2      	cmp	sl, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1e 0404 	adds.w	r4, lr, r4
 800046c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000470:	d26b      	bcs.n	800054a <__udivmoddi4+0x2aa>
 8000472:	45a2      	cmp	sl, r4
 8000474:	d969      	bls.n	800054a <__udivmoddi4+0x2aa>
 8000476:	3802      	subs	r0, #2
 8000478:	4474      	add	r4, lr
 800047a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800047e:	fba0 8902 	umull	r8, r9, r0, r2
 8000482:	eba4 040a 	sub.w	r4, r4, sl
 8000486:	454c      	cmp	r4, r9
 8000488:	46c2      	mov	sl, r8
 800048a:	464b      	mov	r3, r9
 800048c:	d354      	bcc.n	8000538 <__udivmoddi4+0x298>
 800048e:	d051      	beq.n	8000534 <__udivmoddi4+0x294>
 8000490:	2e00      	cmp	r6, #0
 8000492:	d069      	beq.n	8000568 <__udivmoddi4+0x2c8>
 8000494:	ebb1 050a 	subs.w	r5, r1, sl
 8000498:	eb64 0403 	sbc.w	r4, r4, r3
 800049c:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004a0:	40fd      	lsrs	r5, r7
 80004a2:	40fc      	lsrs	r4, r7
 80004a4:	ea4c 0505 	orr.w	r5, ip, r5
 80004a8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ac:	2700      	movs	r7, #0
 80004ae:	e747      	b.n	8000340 <__udivmoddi4+0xa0>
 80004b0:	f1c2 0320 	rsb	r3, r2, #32
 80004b4:	fa20 f703 	lsr.w	r7, r0, r3
 80004b8:	4095      	lsls	r5, r2
 80004ba:	fa01 f002 	lsl.w	r0, r1, r2
 80004be:	fa21 f303 	lsr.w	r3, r1, r3
 80004c2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004c6:	4338      	orrs	r0, r7
 80004c8:	0c01      	lsrs	r1, r0, #16
 80004ca:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ce:	fa1f f885 	uxth.w	r8, r5
 80004d2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004d6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004da:	fb07 f308 	mul.w	r3, r7, r8
 80004de:	428b      	cmp	r3, r1
 80004e0:	fa04 f402 	lsl.w	r4, r4, r2
 80004e4:	d907      	bls.n	80004f6 <__udivmoddi4+0x256>
 80004e6:	1869      	adds	r1, r5, r1
 80004e8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004ec:	d22f      	bcs.n	800054e <__udivmoddi4+0x2ae>
 80004ee:	428b      	cmp	r3, r1
 80004f0:	d92d      	bls.n	800054e <__udivmoddi4+0x2ae>
 80004f2:	3f02      	subs	r7, #2
 80004f4:	4429      	add	r1, r5
 80004f6:	1acb      	subs	r3, r1, r3
 80004f8:	b281      	uxth	r1, r0
 80004fa:	fbb3 f0fe 	udiv	r0, r3, lr
 80004fe:	fb0e 3310 	mls	r3, lr, r0, r3
 8000502:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000506:	fb00 f308 	mul.w	r3, r0, r8
 800050a:	428b      	cmp	r3, r1
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x27e>
 800050e:	1869      	adds	r1, r5, r1
 8000510:	f100 3cff 	add.w	ip, r0, #4294967295
 8000514:	d217      	bcs.n	8000546 <__udivmoddi4+0x2a6>
 8000516:	428b      	cmp	r3, r1
 8000518:	d915      	bls.n	8000546 <__udivmoddi4+0x2a6>
 800051a:	3802      	subs	r0, #2
 800051c:	4429      	add	r1, r5
 800051e:	1ac9      	subs	r1, r1, r3
 8000520:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000524:	e73b      	b.n	800039e <__udivmoddi4+0xfe>
 8000526:	4637      	mov	r7, r6
 8000528:	4630      	mov	r0, r6
 800052a:	e709      	b.n	8000340 <__udivmoddi4+0xa0>
 800052c:	4607      	mov	r7, r0
 800052e:	e6e7      	b.n	8000300 <__udivmoddi4+0x60>
 8000530:	4618      	mov	r0, r3
 8000532:	e6fb      	b.n	800032c <__udivmoddi4+0x8c>
 8000534:	4541      	cmp	r1, r8
 8000536:	d2ab      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 8000538:	ebb8 0a02 	subs.w	sl, r8, r2
 800053c:	eb69 020e 	sbc.w	r2, r9, lr
 8000540:	3801      	subs	r0, #1
 8000542:	4613      	mov	r3, r2
 8000544:	e7a4      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000546:	4660      	mov	r0, ip
 8000548:	e7e9      	b.n	800051e <__udivmoddi4+0x27e>
 800054a:	4618      	mov	r0, r3
 800054c:	e795      	b.n	800047a <__udivmoddi4+0x1da>
 800054e:	4667      	mov	r7, ip
 8000550:	e7d1      	b.n	80004f6 <__udivmoddi4+0x256>
 8000552:	4681      	mov	r9, r0
 8000554:	e77c      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000556:	3802      	subs	r0, #2
 8000558:	442c      	add	r4, r5
 800055a:	e747      	b.n	80003ec <__udivmoddi4+0x14c>
 800055c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000560:	442b      	add	r3, r5
 8000562:	e72f      	b.n	80003c4 <__udivmoddi4+0x124>
 8000564:	4638      	mov	r0, r7
 8000566:	e708      	b.n	800037a <__udivmoddi4+0xda>
 8000568:	4637      	mov	r7, r6
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0xa0>

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b08a      	sub	sp, #40	; 0x28
 8000574:	af00      	add	r7, sp, #0
  ADC_MultiModeTypeDef multimode = {0};
 8000576:	f107 031c 	add.w	r3, r7, #28
 800057a:	2200      	movs	r2, #0
 800057c:	601a      	str	r2, [r3, #0]
 800057e:	605a      	str	r2, [r3, #4]
 8000580:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000582:	1d3b      	adds	r3, r7, #4
 8000584:	2200      	movs	r2, #0
 8000586:	601a      	str	r2, [r3, #0]
 8000588:	605a      	str	r2, [r3, #4]
 800058a:	609a      	str	r2, [r3, #8]
 800058c:	60da      	str	r2, [r3, #12]
 800058e:	611a      	str	r2, [r3, #16]
 8000590:	615a      	str	r2, [r3, #20]

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000592:	4b2f      	ldr	r3, [pc, #188]	; (8000650 <MX_ADC1_Init+0xe0>)
 8000594:	4a2f      	ldr	r2, [pc, #188]	; (8000654 <MX_ADC1_Init+0xe4>)
 8000596:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000598:	4b2d      	ldr	r3, [pc, #180]	; (8000650 <MX_ADC1_Init+0xe0>)
 800059a:	2200      	movs	r2, #0
 800059c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800059e:	4b2c      	ldr	r3, [pc, #176]	; (8000650 <MX_ADC1_Init+0xe0>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005a4:	4b2a      	ldr	r3, [pc, #168]	; (8000650 <MX_ADC1_Init+0xe0>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80005aa:	4b29      	ldr	r3, [pc, #164]	; (8000650 <MX_ADC1_Init+0xe0>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005b0:	4b27      	ldr	r3, [pc, #156]	; (8000650 <MX_ADC1_Init+0xe0>)
 80005b2:	2204      	movs	r2, #4
 80005b4:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80005b6:	4b26      	ldr	r3, [pc, #152]	; (8000650 <MX_ADC1_Init+0xe0>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80005bc:	4b24      	ldr	r3, [pc, #144]	; (8000650 <MX_ADC1_Init+0xe0>)
 80005be:	2200      	movs	r2, #0
 80005c0:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80005c2:	4b23      	ldr	r3, [pc, #140]	; (8000650 <MX_ADC1_Init+0xe0>)
 80005c4:	2201      	movs	r2, #1
 80005c6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005c8:	4b21      	ldr	r3, [pc, #132]	; (8000650 <MX_ADC1_Init+0xe0>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005d0:	4b1f      	ldr	r3, [pc, #124]	; (8000650 <MX_ADC1_Init+0xe0>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005d6:	4b1e      	ldr	r3, [pc, #120]	; (8000650 <MX_ADC1_Init+0xe0>)
 80005d8:	2200      	movs	r2, #0
 80005da:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80005dc:	4b1c      	ldr	r3, [pc, #112]	; (8000650 <MX_ADC1_Init+0xe0>)
 80005de:	2200      	movs	r2, #0
 80005e0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80005e4:	4b1a      	ldr	r3, [pc, #104]	; (8000650 <MX_ADC1_Init+0xe0>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80005ea:	4b19      	ldr	r3, [pc, #100]	; (8000650 <MX_ADC1_Init+0xe0>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005f2:	4817      	ldr	r0, [pc, #92]	; (8000650 <MX_ADC1_Init+0xe0>)
 80005f4:	f000 ff5a 	bl	80014ac <HAL_ADC_Init>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d001      	beq.n	8000602 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80005fe:	f000 faa1 	bl	8000b44 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000602:	2300      	movs	r3, #0
 8000604:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000606:	f107 031c 	add.w	r3, r7, #28
 800060a:	4619      	mov	r1, r3
 800060c:	4810      	ldr	r0, [pc, #64]	; (8000650 <MX_ADC1_Init+0xe0>)
 800060e:	f002 f907 	bl	8002820 <HAL_ADCEx_MultiModeConfigChannel>
 8000612:	4603      	mov	r3, r0
 8000614:	2b00      	cmp	r3, #0
 8000616:	d001      	beq.n	800061c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000618:	f000 fa94 	bl	8000b44 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800061c:	4b0e      	ldr	r3, [pc, #56]	; (8000658 <MX_ADC1_Init+0xe8>)
 800061e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000620:	2306      	movs	r3, #6
 8000622:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 8000624:	2305      	movs	r3, #5
 8000626:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000628:	237f      	movs	r3, #127	; 0x7f
 800062a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800062c:	2304      	movs	r3, #4
 800062e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000630:	2300      	movs	r3, #0
 8000632:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000634:	1d3b      	adds	r3, r7, #4
 8000636:	4619      	mov	r1, r3
 8000638:	4805      	ldr	r0, [pc, #20]	; (8000650 <MX_ADC1_Init+0xe0>)
 800063a:	f001 fc51 	bl	8001ee0 <HAL_ADC_ConfigChannel>
 800063e:	4603      	mov	r3, r0
 8000640:	2b00      	cmp	r3, #0
 8000642:	d001      	beq.n	8000648 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8000644:	f000 fa7e 	bl	8000b44 <Error_Handler>
  }

}
 8000648:	bf00      	nop
 800064a:	3728      	adds	r7, #40	; 0x28
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}
 8000650:	200000ac 	.word	0x200000ac
 8000654:	50040000 	.word	0x50040000
 8000658:	3ef08000 	.word	0x3ef08000

0800065c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b08a      	sub	sp, #40	; 0x28
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000664:	f107 0314 	add.w	r3, r7, #20
 8000668:	2200      	movs	r2, #0
 800066a:	601a      	str	r2, [r3, #0]
 800066c:	605a      	str	r2, [r3, #4]
 800066e:	609a      	str	r2, [r3, #8]
 8000670:	60da      	str	r2, [r3, #12]
 8000672:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	4a19      	ldr	r2, [pc, #100]	; (80006e0 <HAL_ADC_MspInit+0x84>)
 800067a:	4293      	cmp	r3, r2
 800067c:	d12b      	bne.n	80006d6 <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800067e:	4b19      	ldr	r3, [pc, #100]	; (80006e4 <HAL_ADC_MspInit+0x88>)
 8000680:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000682:	4a18      	ldr	r2, [pc, #96]	; (80006e4 <HAL_ADC_MspInit+0x88>)
 8000684:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000688:	64d3      	str	r3, [r2, #76]	; 0x4c
 800068a:	4b16      	ldr	r3, [pc, #88]	; (80006e4 <HAL_ADC_MspInit+0x88>)
 800068c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800068e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000692:	613b      	str	r3, [r7, #16]
 8000694:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000696:	4b13      	ldr	r3, [pc, #76]	; (80006e4 <HAL_ADC_MspInit+0x88>)
 8000698:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800069a:	4a12      	ldr	r2, [pc, #72]	; (80006e4 <HAL_ADC_MspInit+0x88>)
 800069c:	f043 0302 	orr.w	r3, r3, #2
 80006a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006a2:	4b10      	ldr	r3, [pc, #64]	; (80006e4 <HAL_ADC_MspInit+0x88>)
 80006a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006a6:	f003 0302 	and.w	r3, r3, #2
 80006aa:	60fb      	str	r3, [r7, #12]
 80006ac:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80006ae:	2301      	movs	r3, #1
 80006b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80006b2:	230b      	movs	r3, #11
 80006b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b6:	2300      	movs	r3, #0
 80006b8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006ba:	f107 0314 	add.w	r3, r7, #20
 80006be:	4619      	mov	r1, r3
 80006c0:	4809      	ldr	r0, [pc, #36]	; (80006e8 <HAL_ADC_MspInit+0x8c>)
 80006c2:	f002 ff2b 	bl	800351c <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80006c6:	2200      	movs	r2, #0
 80006c8:	2100      	movs	r1, #0
 80006ca:	2012      	movs	r0, #18
 80006cc:	f002 fa2f 	bl	8002b2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80006d0:	2012      	movs	r0, #18
 80006d2:	f002 fa48 	bl	8002b66 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80006d6:	bf00      	nop
 80006d8:	3728      	adds	r7, #40	; 0x28
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	50040000 	.word	0x50040000
 80006e4:	40021000 	.word	0x40021000
 80006e8:	48000400 	.word	0x48000400

080006ec <MX_DAC1_Init>:
DAC_HandleTypeDef hdac1;
DMA_HandleTypeDef hdma_dac_ch1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b08a      	sub	sp, #40	; 0x28
 80006f0:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 80006f2:	1d3b      	adds	r3, r7, #4
 80006f4:	2224      	movs	r2, #36	; 0x24
 80006f6:	2100      	movs	r1, #0
 80006f8:	4618      	mov	r0, r3
 80006fa:	f005 faaf 	bl	8005c5c <memset>

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80006fe:	4b12      	ldr	r3, [pc, #72]	; (8000748 <MX_DAC1_Init+0x5c>)
 8000700:	4a12      	ldr	r2, [pc, #72]	; (800074c <MX_DAC1_Init+0x60>)
 8000702:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000704:	4810      	ldr	r0, [pc, #64]	; (8000748 <MX_DAC1_Init+0x5c>)
 8000706:	f002 fa48 	bl	8002b9a <HAL_DAC_Init>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000710:	f000 fa18 	bl	8000b44 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000714:	2300      	movs	r3, #0
 8000716:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 8000718:	2304      	movs	r3, #4
 800071a:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800071c:	2300      	movs	r3, #0
 800071e:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000720:	2300      	movs	r3, #0
 8000722:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000724:	2300      	movs	r3, #0
 8000726:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000728:	1d3b      	adds	r3, r7, #4
 800072a:	2200      	movs	r2, #0
 800072c:	4619      	mov	r1, r3
 800072e:	4806      	ldr	r0, [pc, #24]	; (8000748 <MX_DAC1_Init+0x5c>)
 8000730:	f002 fb57 	bl	8002de2 <HAL_DAC_ConfigChannel>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 800073a:	f000 fa03 	bl	8000b44 <Error_Handler>
  }

}
 800073e:	bf00      	nop
 8000740:	3728      	adds	r7, #40	; 0x28
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	20000110 	.word	0x20000110
 800074c:	40007400 	.word	0x40007400

08000750 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b08a      	sub	sp, #40	; 0x28
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000758:	f107 0314 	add.w	r3, r7, #20
 800075c:	2200      	movs	r2, #0
 800075e:	601a      	str	r2, [r3, #0]
 8000760:	605a      	str	r2, [r3, #4]
 8000762:	609a      	str	r2, [r3, #8]
 8000764:	60da      	str	r2, [r3, #12]
 8000766:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	4a2a      	ldr	r2, [pc, #168]	; (8000818 <HAL_DAC_MspInit+0xc8>)
 800076e:	4293      	cmp	r3, r2
 8000770:	d14d      	bne.n	800080e <HAL_DAC_MspInit+0xbe>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8000772:	4b2a      	ldr	r3, [pc, #168]	; (800081c <HAL_DAC_MspInit+0xcc>)
 8000774:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000776:	4a29      	ldr	r2, [pc, #164]	; (800081c <HAL_DAC_MspInit+0xcc>)
 8000778:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800077c:	6593      	str	r3, [r2, #88]	; 0x58
 800077e:	4b27      	ldr	r3, [pc, #156]	; (800081c <HAL_DAC_MspInit+0xcc>)
 8000780:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000782:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000786:	613b      	str	r3, [r7, #16]
 8000788:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800078a:	4b24      	ldr	r3, [pc, #144]	; (800081c <HAL_DAC_MspInit+0xcc>)
 800078c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800078e:	4a23      	ldr	r2, [pc, #140]	; (800081c <HAL_DAC_MspInit+0xcc>)
 8000790:	f043 0301 	orr.w	r3, r3, #1
 8000794:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000796:	4b21      	ldr	r3, [pc, #132]	; (800081c <HAL_DAC_MspInit+0xcc>)
 8000798:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800079a:	f003 0301 	and.w	r3, r3, #1
 800079e:	60fb      	str	r3, [r7, #12]
 80007a0:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80007a2:	2310      	movs	r3, #16
 80007a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007a6:	2303      	movs	r3, #3
 80007a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007aa:	2300      	movs	r3, #0
 80007ac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007ae:	f107 0314 	add.w	r3, r7, #20
 80007b2:	4619      	mov	r1, r3
 80007b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007b8:	f002 feb0 	bl	800351c <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC_CH1 Init */
    hdma_dac_ch1.Instance = DMA1_Channel3;
 80007bc:	4b18      	ldr	r3, [pc, #96]	; (8000820 <HAL_DAC_MspInit+0xd0>)
 80007be:	4a19      	ldr	r2, [pc, #100]	; (8000824 <HAL_DAC_MspInit+0xd4>)
 80007c0:	601a      	str	r2, [r3, #0]
    hdma_dac_ch1.Init.Request = DMA_REQUEST_6;
 80007c2:	4b17      	ldr	r3, [pc, #92]	; (8000820 <HAL_DAC_MspInit+0xd0>)
 80007c4:	2206      	movs	r2, #6
 80007c6:	605a      	str	r2, [r3, #4]
    hdma_dac_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80007c8:	4b15      	ldr	r3, [pc, #84]	; (8000820 <HAL_DAC_MspInit+0xd0>)
 80007ca:	2210      	movs	r2, #16
 80007cc:	609a      	str	r2, [r3, #8]
    hdma_dac_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80007ce:	4b14      	ldr	r3, [pc, #80]	; (8000820 <HAL_DAC_MspInit+0xd0>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	60da      	str	r2, [r3, #12]
    hdma_dac_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80007d4:	4b12      	ldr	r3, [pc, #72]	; (8000820 <HAL_DAC_MspInit+0xd0>)
 80007d6:	2280      	movs	r2, #128	; 0x80
 80007d8:	611a      	str	r2, [r3, #16]
    hdma_dac_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80007da:	4b11      	ldr	r3, [pc, #68]	; (8000820 <HAL_DAC_MspInit+0xd0>)
 80007dc:	2200      	movs	r2, #0
 80007de:	615a      	str	r2, [r3, #20]
    hdma_dac_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80007e0:	4b0f      	ldr	r3, [pc, #60]	; (8000820 <HAL_DAC_MspInit+0xd0>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	619a      	str	r2, [r3, #24]
    hdma_dac_ch1.Init.Mode = DMA_CIRCULAR;
 80007e6:	4b0e      	ldr	r3, [pc, #56]	; (8000820 <HAL_DAC_MspInit+0xd0>)
 80007e8:	2220      	movs	r2, #32
 80007ea:	61da      	str	r2, [r3, #28]
    hdma_dac_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80007ec:	4b0c      	ldr	r3, [pc, #48]	; (8000820 <HAL_DAC_MspInit+0xd0>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac_ch1) != HAL_OK)
 80007f2:	480b      	ldr	r0, [pc, #44]	; (8000820 <HAL_DAC_MspInit+0xd0>)
 80007f4:	f002 fc9a 	bl	800312c <HAL_DMA_Init>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <HAL_DAC_MspInit+0xb2>
    {
      Error_Handler();
 80007fe:	f000 f9a1 	bl	8000b44 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac_ch1);
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	4a06      	ldr	r2, [pc, #24]	; (8000820 <HAL_DAC_MspInit+0xd0>)
 8000806:	609a      	str	r2, [r3, #8]
 8000808:	4a05      	ldr	r2, [pc, #20]	; (8000820 <HAL_DAC_MspInit+0xd0>)
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 800080e:	bf00      	nop
 8000810:	3728      	adds	r7, #40	; 0x28
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	40007400 	.word	0x40007400
 800081c:	40021000 	.word	0x40021000
 8000820:	20000124 	.word	0x20000124
 8000824:	40020030 	.word	0x40020030

08000828 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b082      	sub	sp, #8
 800082c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800082e:	4b0c      	ldr	r3, [pc, #48]	; (8000860 <MX_DMA_Init+0x38>)
 8000830:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000832:	4a0b      	ldr	r2, [pc, #44]	; (8000860 <MX_DMA_Init+0x38>)
 8000834:	f043 0301 	orr.w	r3, r3, #1
 8000838:	6493      	str	r3, [r2, #72]	; 0x48
 800083a:	4b09      	ldr	r3, [pc, #36]	; (8000860 <MX_DMA_Init+0x38>)
 800083c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800083e:	f003 0301 	and.w	r3, r3, #1
 8000842:	607b      	str	r3, [r7, #4]
 8000844:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000846:	2200      	movs	r2, #0
 8000848:	2100      	movs	r1, #0
 800084a:	200d      	movs	r0, #13
 800084c:	f002 f96f 	bl	8002b2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000850:	200d      	movs	r0, #13
 8000852:	f002 f988 	bl	8002b66 <HAL_NVIC_EnableIRQ>

}
 8000856:	bf00      	nop
 8000858:	3708      	adds	r7, #8
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	40021000 	.word	0x40021000

08000864 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b08a      	sub	sp, #40	; 0x28
 8000868:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800086a:	f107 0314 	add.w	r3, r7, #20
 800086e:	2200      	movs	r2, #0
 8000870:	601a      	str	r2, [r3, #0]
 8000872:	605a      	str	r2, [r3, #4]
 8000874:	609a      	str	r2, [r3, #8]
 8000876:	60da      	str	r2, [r3, #12]
 8000878:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800087a:	4b2b      	ldr	r3, [pc, #172]	; (8000928 <MX_GPIO_Init+0xc4>)
 800087c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800087e:	4a2a      	ldr	r2, [pc, #168]	; (8000928 <MX_GPIO_Init+0xc4>)
 8000880:	f043 0304 	orr.w	r3, r3, #4
 8000884:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000886:	4b28      	ldr	r3, [pc, #160]	; (8000928 <MX_GPIO_Init+0xc4>)
 8000888:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800088a:	f003 0304 	and.w	r3, r3, #4
 800088e:	613b      	str	r3, [r7, #16]
 8000890:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000892:	4b25      	ldr	r3, [pc, #148]	; (8000928 <MX_GPIO_Init+0xc4>)
 8000894:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000896:	4a24      	ldr	r2, [pc, #144]	; (8000928 <MX_GPIO_Init+0xc4>)
 8000898:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800089c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800089e:	4b22      	ldr	r3, [pc, #136]	; (8000928 <MX_GPIO_Init+0xc4>)
 80008a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008a6:	60fb      	str	r3, [r7, #12]
 80008a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008aa:	4b1f      	ldr	r3, [pc, #124]	; (8000928 <MX_GPIO_Init+0xc4>)
 80008ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ae:	4a1e      	ldr	r2, [pc, #120]	; (8000928 <MX_GPIO_Init+0xc4>)
 80008b0:	f043 0301 	orr.w	r3, r3, #1
 80008b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008b6:	4b1c      	ldr	r3, [pc, #112]	; (8000928 <MX_GPIO_Init+0xc4>)
 80008b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ba:	f003 0301 	and.w	r3, r3, #1
 80008be:	60bb      	str	r3, [r7, #8]
 80008c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008c2:	4b19      	ldr	r3, [pc, #100]	; (8000928 <MX_GPIO_Init+0xc4>)
 80008c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008c6:	4a18      	ldr	r2, [pc, #96]	; (8000928 <MX_GPIO_Init+0xc4>)
 80008c8:	f043 0302 	orr.w	r3, r3, #2
 80008cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008ce:	4b16      	ldr	r3, [pc, #88]	; (8000928 <MX_GPIO_Init+0xc4>)
 80008d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008d2:	f003 0302 	and.w	r3, r3, #2
 80008d6:	607b      	str	r3, [r7, #4]
 80008d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80008da:	2200      	movs	r2, #0
 80008dc:	2120      	movs	r1, #32
 80008de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008e2:	f002 ffc3 	bl	800386c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008e6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008ec:	4b0f      	ldr	r3, [pc, #60]	; (800092c <MX_GPIO_Init+0xc8>)
 80008ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f0:	2300      	movs	r3, #0
 80008f2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008f4:	f107 0314 	add.w	r3, r7, #20
 80008f8:	4619      	mov	r1, r3
 80008fa:	480d      	ldr	r0, [pc, #52]	; (8000930 <MX_GPIO_Init+0xcc>)
 80008fc:	f002 fe0e 	bl	800351c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000900:	2320      	movs	r3, #32
 8000902:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000904:	2301      	movs	r3, #1
 8000906:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000908:	2300      	movs	r3, #0
 800090a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800090c:	2300      	movs	r3, #0
 800090e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000910:	f107 0314 	add.w	r3, r7, #20
 8000914:	4619      	mov	r1, r3
 8000916:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800091a:	f002 fdff 	bl	800351c <HAL_GPIO_Init>

}
 800091e:	bf00      	nop
 8000920:	3728      	adds	r7, #40	; 0x28
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	40021000 	.word	0x40021000
 800092c:	10210000 	.word	0x10210000
 8000930:	48000800 	.word	0x48000800

08000934 <HAL_ADC_ConvCpltCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc){
 8000934:	b580      	push	{r7, lr}
 8000936:	b082      	sub	sp, #8
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
	if(hadc == &hadc1){
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	4a08      	ldr	r2, [pc, #32]	; (8000960 <HAL_ADC_ConvCpltCallback+0x2c>)
 8000940:	4293      	cmp	r3, r2
 8000942:	d109      	bne.n	8000958 <HAL_ADC_ConvCpltCallback+0x24>
		adc_flag = 1;
 8000944:	4b07      	ldr	r3, [pc, #28]	; (8000964 <HAL_ADC_ConvCpltCallback+0x30>)
 8000946:	2201      	movs	r2, #1
 8000948:	701a      	strb	r2, [r3, #0]
		adc_value = HAL_ADC_GetValue(hadc);
 800094a:	6878      	ldr	r0, [r7, #4]
 800094c:	f001 f88c 	bl	8001a68 <HAL_ADC_GetValue>
 8000950:	4603      	mov	r3, r0
 8000952:	b29a      	uxth	r2, r3
 8000954:	4b04      	ldr	r3, [pc, #16]	; (8000968 <HAL_ADC_ConvCpltCallback+0x34>)
 8000956:	801a      	strh	r2, [r3, #0]
	}
}
 8000958:	bf00      	nop
 800095a:	3708      	adds	r7, #8
 800095c:	46bd      	mov	sp, r7
 800095e:	bd80      	pop	{r7, pc}
 8000960:	200000ac 	.word	0x200000ac
 8000964:	2000009c 	.word	0x2000009c
 8000968:	2000016c 	.word	0x2000016c

0800096c <_write>:

/**
 * @brief function for printing using UART
 */
int _write(int file, char* ptr, int len){
 800096c:	b580      	push	{r7, lr}
 800096e:	b084      	sub	sp, #16
 8000970:	af00      	add	r7, sp, #0
 8000972:	60f8      	str	r0, [r7, #12]
 8000974:	60b9      	str	r1, [r7, #8]
 8000976:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len, HAL_MAX_DELAY);
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	b29a      	uxth	r2, r3
 800097c:	f04f 33ff 	mov.w	r3, #4294967295
 8000980:	68b9      	ldr	r1, [r7, #8]
 8000982:	4804      	ldr	r0, [pc, #16]	; (8000994 <_write+0x28>)
 8000984:	f004 fcc0 	bl	8005308 <HAL_UART_Transmit>
	return len;
 8000988:	687b      	ldr	r3, [r7, #4]
}
 800098a:	4618      	mov	r0, r3
 800098c:	3710      	adds	r7, #16
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	200001bc 	.word	0x200001bc

08000998 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b082      	sub	sp, #8
 800099c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800099e:	f000 faf1 	bl	8000f84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009a2:	f000 f847 	bl	8000a34 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009a6:	f7ff ff5d 	bl	8000864 <MX_GPIO_Init>
  MX_DMA_Init();
 80009aa:	f7ff ff3d 	bl	8000828 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80009ae:	f000 fa4d 	bl	8000e4c <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80009b2:	f7ff fddd 	bl	8000570 <MX_ADC1_Init>
  MX_DAC1_Init();
 80009b6:	f7ff fe99 	bl	80006ec <MX_DAC1_Init>
  MX_TIM6_Init();
 80009ba:	f000 f9ef 	bl	8000d9c <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
//  HAL_ADC_Start_IT(&hadc1);
  HAL_ADC_Start(&hadc1); // You have to start ADC
 80009be:	4817      	ldr	r0, [pc, #92]	; (8000a1c <main+0x84>)
 80009c0:	f000 fec8 	bl	8001754 <HAL_ADC_Start>

  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_8B_R, 0);
 80009c4:	2300      	movs	r3, #0
 80009c6:	2208      	movs	r2, #8
 80009c8:	2100      	movs	r1, #0
 80009ca:	4815      	ldr	r0, [pc, #84]	; (8000a20 <main+0x88>)
 80009cc:	f002 f9c6 	bl	8002d5c <HAL_DAC_SetValue>
  HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, &dac[0], 16, DAC_ALIGN_8B_R);
 80009d0:	2308      	movs	r3, #8
 80009d2:	9300      	str	r3, [sp, #0]
 80009d4:	2310      	movs	r3, #16
 80009d6:	4a13      	ldr	r2, [pc, #76]	; (8000a24 <main+0x8c>)
 80009d8:	2100      	movs	r1, #0
 80009da:	4811      	ldr	r0, [pc, #68]	; (8000a20 <main+0x88>)
 80009dc:	f002 f900 	bl	8002be0 <HAL_DAC_Start_DMA>
  HAL_TIM_Base_Start_IT(&htim6);
 80009e0:	4811      	ldr	r0, [pc, #68]	; (8000a28 <main+0x90>)
 80009e2:	f004 fab1 	bl	8004f48 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1){
	  if(HAL_ADC_PollForConversion(&hadc1, 10) == HAL_OK){
 80009e6:	210a      	movs	r1, #10
 80009e8:	480c      	ldr	r0, [pc, #48]	; (8000a1c <main+0x84>)
 80009ea:	f000 ff6d 	bl	80018c8 <HAL_ADC_PollForConversion>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d10f      	bne.n	8000a14 <main+0x7c>
		adc_value = HAL_ADC_GetValue(&hadc1); // Get
 80009f4:	4809      	ldr	r0, [pc, #36]	; (8000a1c <main+0x84>)
 80009f6:	f001 f837 	bl	8001a68 <HAL_ADC_GetValue>
 80009fa:	4603      	mov	r3, r0
 80009fc:	b29a      	uxth	r2, r3
 80009fe:	4b0b      	ldr	r3, [pc, #44]	; (8000a2c <main+0x94>)
 8000a00:	801a      	strh	r2, [r3, #0]
		//ADC_SetActiveChannel(&hadc1, ADC_CHANNEL_7);
		printf("Measured value: %d\r\n", adc_value);
 8000a02:	4b0a      	ldr	r3, [pc, #40]	; (8000a2c <main+0x94>)
 8000a04:	881b      	ldrh	r3, [r3, #0]
 8000a06:	4619      	mov	r1, r3
 8000a08:	4809      	ldr	r0, [pc, #36]	; (8000a30 <main+0x98>)
 8000a0a:	f005 f92f 	bl	8005c6c <iprintf>
		HAL_ADC_Start(&hadc1);
 8000a0e:	4803      	ldr	r0, [pc, #12]	; (8000a1c <main+0x84>)
 8000a10:	f000 fea0 	bl	8001754 <HAL_ADC_Start>
//		printf("Measured value: %d\r\n", adc_value);
//		adc_flag = 0;
//
//		HAL_ADC_Start_IT(&hadc1);
//	}
	HAL_Delay(100);
 8000a14:	2064      	movs	r0, #100	; 0x64
 8000a16:	f000 fb31 	bl	800107c <HAL_Delay>
	  if(HAL_ADC_PollForConversion(&hadc1, 10) == HAL_OK){
 8000a1a:	e7e4      	b.n	80009e6 <main+0x4e>
 8000a1c:	200000ac 	.word	0x200000ac
 8000a20:	20000110 	.word	0x20000110
 8000a24:	20000000 	.word	0x20000000
 8000a28:	20000170 	.word	0x20000170
 8000a2c:	2000016c 	.word	0x2000016c
 8000a30:	08006a4c 	.word	0x08006a4c

08000a34 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b0b8      	sub	sp, #224	; 0xe0
 8000a38:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a3a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000a3e:	2244      	movs	r2, #68	; 0x44
 8000a40:	2100      	movs	r1, #0
 8000a42:	4618      	mov	r0, r3
 8000a44:	f005 f90a 	bl	8005c5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a48:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	601a      	str	r2, [r3, #0]
 8000a50:	605a      	str	r2, [r3, #4]
 8000a52:	609a      	str	r2, [r3, #8]
 8000a54:	60da      	str	r2, [r3, #12]
 8000a56:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a58:	463b      	mov	r3, r7
 8000a5a:	2288      	movs	r2, #136	; 0x88
 8000a5c:	2100      	movs	r1, #0
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f005 f8fc 	bl	8005c5c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a64:	2302      	movs	r3, #2
 8000a66:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a6a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a6e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a72:	2310      	movs	r3, #16
 8000a74:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a78:	2302      	movs	r3, #2
 8000a7a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a7e:	2302      	movs	r3, #2
 8000a80:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000a84:	2301      	movs	r3, #1
 8000a86:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000a8a:	230a      	movs	r3, #10
 8000a8c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000a90:	2307      	movs	r3, #7
 8000a92:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000a96:	2302      	movs	r3, #2
 8000a98:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000a9c:	2302      	movs	r3, #2
 8000a9e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000aa2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f002 ff5c 	bl	8003964 <HAL_RCC_OscConfig>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d001      	beq.n	8000ab6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000ab2:	f000 f847 	bl	8000b44 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ab6:	230f      	movs	r3, #15
 8000ab8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000abc:	2303      	movs	r3, #3
 8000abe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000ad4:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000ad8:	2104      	movs	r1, #4
 8000ada:	4618      	mov	r0, r3
 8000adc:	f003 fb28 	bl	8004130 <HAL_RCC_ClockConfig>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d001      	beq.n	8000aea <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000ae6:	f000 f82d 	bl	8000b44 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC;
 8000aea:	f244 0302 	movw	r3, #16386	; 0x4002
 8000aee:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000af0:	2300      	movs	r3, #0
 8000af2:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000af4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000af8:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8000afa:	2302      	movs	r3, #2
 8000afc:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000afe:	2301      	movs	r3, #1
 8000b00:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8000b02:	2308      	movs	r3, #8
 8000b04:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000b06:	2307      	movs	r3, #7
 8000b08:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000b0a:	2302      	movs	r3, #2
 8000b0c:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000b0e:	2302      	movs	r3, #2
 8000b10:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000b12:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000b16:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b18:	463b      	mov	r3, r7
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	f003 fd0c 	bl	8004538 <HAL_RCCEx_PeriphCLKConfig>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d001      	beq.n	8000b2a <SystemClock_Config+0xf6>
  {
    Error_Handler();
 8000b26:	f000 f80d 	bl	8000b44 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000b2a:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000b2e:	f002 fec3 	bl	80038b8 <HAL_PWREx_ControlVoltageScaling>
 8000b32:	4603      	mov	r3, r0
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d001      	beq.n	8000b3c <SystemClock_Config+0x108>
  {
    Error_Handler();
 8000b38:	f000 f804 	bl	8000b44 <Error_Handler>
  }
}
 8000b3c:	bf00      	nop
 8000b3e:	37e0      	adds	r7, #224	; 0xe0
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}

08000b44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000b48:	bf00      	nop
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b50:	4770      	bx	lr
	...

08000b54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	b083      	sub	sp, #12
 8000b58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b5a:	4b0f      	ldr	r3, [pc, #60]	; (8000b98 <HAL_MspInit+0x44>)
 8000b5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b5e:	4a0e      	ldr	r2, [pc, #56]	; (8000b98 <HAL_MspInit+0x44>)
 8000b60:	f043 0301 	orr.w	r3, r3, #1
 8000b64:	6613      	str	r3, [r2, #96]	; 0x60
 8000b66:	4b0c      	ldr	r3, [pc, #48]	; (8000b98 <HAL_MspInit+0x44>)
 8000b68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b6a:	f003 0301 	and.w	r3, r3, #1
 8000b6e:	607b      	str	r3, [r7, #4]
 8000b70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b72:	4b09      	ldr	r3, [pc, #36]	; (8000b98 <HAL_MspInit+0x44>)
 8000b74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b76:	4a08      	ldr	r2, [pc, #32]	; (8000b98 <HAL_MspInit+0x44>)
 8000b78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b7c:	6593      	str	r3, [r2, #88]	; 0x58
 8000b7e:	4b06      	ldr	r3, [pc, #24]	; (8000b98 <HAL_MspInit+0x44>)
 8000b80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b86:	603b      	str	r3, [r7, #0]
 8000b88:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b8a:	bf00      	nop
 8000b8c:	370c      	adds	r7, #12
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop
 8000b98:	40021000 	.word	0x40021000

08000b9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000ba0:	bf00      	nop
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr

08000baa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000baa:	b480      	push	{r7}
 8000bac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bae:	e7fe      	b.n	8000bae <HardFault_Handler+0x4>

08000bb0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bb4:	e7fe      	b.n	8000bb4 <MemManage_Handler+0x4>

08000bb6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bb6:	b480      	push	{r7}
 8000bb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bba:	e7fe      	b.n	8000bba <BusFault_Handler+0x4>

08000bbc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bc0:	e7fe      	b.n	8000bc0 <UsageFault_Handler+0x4>

08000bc2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bc2:	b480      	push	{r7}
 8000bc4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bc6:	bf00      	nop
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bce:	4770      	bx	lr

08000bd0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bd4:	bf00      	nop
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bdc:	4770      	bx	lr

08000bde <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bde:	b480      	push	{r7}
 8000be0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000be2:	bf00      	nop
 8000be4:	46bd      	mov	sp, r7
 8000be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bea:	4770      	bx	lr

08000bec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bf0:	f000 fa24 	bl	800103c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bf4:	bf00      	nop
 8000bf6:	bd80      	pop	{r7, pc}

08000bf8 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch1);
 8000bfc:	4802      	ldr	r0, [pc, #8]	; (8000c08 <DMA1_Channel3_IRQHandler+0x10>)
 8000bfe:	f002 fbad 	bl	800335c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8000c02:	bf00      	nop
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	20000124 	.word	0x20000124

08000c0c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000c10:	4802      	ldr	r0, [pc, #8]	; (8000c1c <ADC1_2_IRQHandler+0x10>)
 8000c12:	f000 ff37 	bl	8001a84 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8000c16:	bf00      	nop
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	200000ac 	.word	0x200000ac

08000c20 <_read>:
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b086      	sub	sp, #24
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	60f8      	str	r0, [r7, #12]
 8000c28:	60b9      	str	r1, [r7, #8]
 8000c2a:	607a      	str	r2, [r7, #4]
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	617b      	str	r3, [r7, #20]
 8000c30:	e00a      	b.n	8000c48 <_read+0x28>
 8000c32:	f3af 8000 	nop.w
 8000c36:	4601      	mov	r1, r0
 8000c38:	68bb      	ldr	r3, [r7, #8]
 8000c3a:	1c5a      	adds	r2, r3, #1
 8000c3c:	60ba      	str	r2, [r7, #8]
 8000c3e:	b2ca      	uxtb	r2, r1
 8000c40:	701a      	strb	r2, [r3, #0]
 8000c42:	697b      	ldr	r3, [r7, #20]
 8000c44:	3301      	adds	r3, #1
 8000c46:	617b      	str	r3, [r7, #20]
 8000c48:	697a      	ldr	r2, [r7, #20]
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	429a      	cmp	r2, r3
 8000c4e:	dbf0      	blt.n	8000c32 <_read+0x12>
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	4618      	mov	r0, r3
 8000c54:	3718      	adds	r7, #24
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}

08000c5a <_close>:
 8000c5a:	b480      	push	{r7}
 8000c5c:	b083      	sub	sp, #12
 8000c5e:	af00      	add	r7, sp, #0
 8000c60:	6078      	str	r0, [r7, #4]
 8000c62:	f04f 33ff 	mov.w	r3, #4294967295
 8000c66:	4618      	mov	r0, r3
 8000c68:	370c      	adds	r7, #12
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c70:	4770      	bx	lr

08000c72 <_fstat>:
 8000c72:	b480      	push	{r7}
 8000c74:	b083      	sub	sp, #12
 8000c76:	af00      	add	r7, sp, #0
 8000c78:	6078      	str	r0, [r7, #4]
 8000c7a:	6039      	str	r1, [r7, #0]
 8000c7c:	683b      	ldr	r3, [r7, #0]
 8000c7e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c82:	605a      	str	r2, [r3, #4]
 8000c84:	2300      	movs	r3, #0
 8000c86:	4618      	mov	r0, r3
 8000c88:	370c      	adds	r7, #12
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c90:	4770      	bx	lr

08000c92 <_isatty>:
 8000c92:	b480      	push	{r7}
 8000c94:	b083      	sub	sp, #12
 8000c96:	af00      	add	r7, sp, #0
 8000c98:	6078      	str	r0, [r7, #4]
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	370c      	adds	r7, #12
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca6:	4770      	bx	lr

08000ca8 <_lseek>:
 8000ca8:	b480      	push	{r7}
 8000caa:	b085      	sub	sp, #20
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	60f8      	str	r0, [r7, #12]
 8000cb0:	60b9      	str	r1, [r7, #8]
 8000cb2:	607a      	str	r2, [r7, #4]
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	3714      	adds	r7, #20
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc0:	4770      	bx	lr
	...

08000cc4 <_sbrk>:
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b086      	sub	sp, #24
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
 8000ccc:	4a14      	ldr	r2, [pc, #80]	; (8000d20 <_sbrk+0x5c>)
 8000cce:	4b15      	ldr	r3, [pc, #84]	; (8000d24 <_sbrk+0x60>)
 8000cd0:	1ad3      	subs	r3, r2, r3
 8000cd2:	617b      	str	r3, [r7, #20]
 8000cd4:	697b      	ldr	r3, [r7, #20]
 8000cd6:	613b      	str	r3, [r7, #16]
 8000cd8:	4b13      	ldr	r3, [pc, #76]	; (8000d28 <_sbrk+0x64>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d102      	bne.n	8000ce6 <_sbrk+0x22>
 8000ce0:	4b11      	ldr	r3, [pc, #68]	; (8000d28 <_sbrk+0x64>)
 8000ce2:	4a12      	ldr	r2, [pc, #72]	; (8000d2c <_sbrk+0x68>)
 8000ce4:	601a      	str	r2, [r3, #0]
 8000ce6:	4b10      	ldr	r3, [pc, #64]	; (8000d28 <_sbrk+0x64>)
 8000ce8:	681a      	ldr	r2, [r3, #0]
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	4413      	add	r3, r2
 8000cee:	693a      	ldr	r2, [r7, #16]
 8000cf0:	429a      	cmp	r2, r3
 8000cf2:	d207      	bcs.n	8000d04 <_sbrk+0x40>
 8000cf4:	f004 ff88 	bl	8005c08 <__errno>
 8000cf8:	4602      	mov	r2, r0
 8000cfa:	230c      	movs	r3, #12
 8000cfc:	6013      	str	r3, [r2, #0]
 8000cfe:	f04f 33ff 	mov.w	r3, #4294967295
 8000d02:	e009      	b.n	8000d18 <_sbrk+0x54>
 8000d04:	4b08      	ldr	r3, [pc, #32]	; (8000d28 <_sbrk+0x64>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	60fb      	str	r3, [r7, #12]
 8000d0a:	4b07      	ldr	r3, [pc, #28]	; (8000d28 <_sbrk+0x64>)
 8000d0c:	681a      	ldr	r2, [r3, #0]
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	4413      	add	r3, r2
 8000d12:	4a05      	ldr	r2, [pc, #20]	; (8000d28 <_sbrk+0x64>)
 8000d14:	6013      	str	r3, [r2, #0]
 8000d16:	68fb      	ldr	r3, [r7, #12]
 8000d18:	4618      	mov	r0, r3
 8000d1a:	3718      	adds	r7, #24
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	20018000 	.word	0x20018000
 8000d24:	00000400 	.word	0x00000400
 8000d28:	200000a0 	.word	0x200000a0
 8000d2c:	20000248 	.word	0x20000248

08000d30 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d34:	4b17      	ldr	r3, [pc, #92]	; (8000d94 <SystemInit+0x64>)
 8000d36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d3a:	4a16      	ldr	r2, [pc, #88]	; (8000d94 <SystemInit+0x64>)
 8000d3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d40:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000d44:	4b14      	ldr	r3, [pc, #80]	; (8000d98 <SystemInit+0x68>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	4a13      	ldr	r2, [pc, #76]	; (8000d98 <SystemInit+0x68>)
 8000d4a:	f043 0301 	orr.w	r3, r3, #1
 8000d4e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000d50:	4b11      	ldr	r3, [pc, #68]	; (8000d98 <SystemInit+0x68>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000d56:	4b10      	ldr	r3, [pc, #64]	; (8000d98 <SystemInit+0x68>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	4a0f      	ldr	r2, [pc, #60]	; (8000d98 <SystemInit+0x68>)
 8000d5c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000d60:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000d64:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000d66:	4b0c      	ldr	r3, [pc, #48]	; (8000d98 <SystemInit+0x68>)
 8000d68:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000d6c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000d6e:	4b0a      	ldr	r3, [pc, #40]	; (8000d98 <SystemInit+0x68>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	4a09      	ldr	r2, [pc, #36]	; (8000d98 <SystemInit+0x68>)
 8000d74:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d78:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000d7a:	4b07      	ldr	r3, [pc, #28]	; (8000d98 <SystemInit+0x68>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000d80:	4b04      	ldr	r3, [pc, #16]	; (8000d94 <SystemInit+0x64>)
 8000d82:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d86:	609a      	str	r2, [r3, #8]
#endif
}
 8000d88:	bf00      	nop
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr
 8000d92:	bf00      	nop
 8000d94:	e000ed00 	.word	0xe000ed00
 8000d98:	40021000 	.word	0x40021000

08000d9c <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b084      	sub	sp, #16
 8000da0:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000da2:	1d3b      	adds	r3, r7, #4
 8000da4:	2200      	movs	r2, #0
 8000da6:	601a      	str	r2, [r3, #0]
 8000da8:	605a      	str	r2, [r3, #4]
 8000daa:	609a      	str	r2, [r3, #8]

  htim6.Instance = TIM6;
 8000dac:	4b15      	ldr	r3, [pc, #84]	; (8000e04 <MX_TIM6_Init+0x68>)
 8000dae:	4a16      	ldr	r2, [pc, #88]	; (8000e08 <MX_TIM6_Init+0x6c>)
 8000db0:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 15999;
 8000db2:	4b14      	ldr	r3, [pc, #80]	; (8000e04 <MX_TIM6_Init+0x68>)
 8000db4:	f643 627f 	movw	r2, #15999	; 0x3e7f
 8000db8:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dba:	4b12      	ldr	r3, [pc, #72]	; (8000e04 <MX_TIM6_Init+0x68>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1558;
 8000dc0:	4b10      	ldr	r3, [pc, #64]	; (8000e04 <MX_TIM6_Init+0x68>)
 8000dc2:	f240 6216 	movw	r2, #1558	; 0x616
 8000dc6:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dc8:	4b0e      	ldr	r3, [pc, #56]	; (8000e04 <MX_TIM6_Init+0x68>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000dce:	480d      	ldr	r0, [pc, #52]	; (8000e04 <MX_TIM6_Init+0x68>)
 8000dd0:	f004 f862 	bl	8004e98 <HAL_TIM_Base_Init>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d001      	beq.n	8000dde <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8000dda:	f7ff feb3 	bl	8000b44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000dde:	2320      	movs	r3, #32
 8000de0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000de2:	2300      	movs	r3, #0
 8000de4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000de6:	1d3b      	adds	r3, r7, #4
 8000de8:	4619      	mov	r1, r3
 8000dea:	4806      	ldr	r0, [pc, #24]	; (8000e04 <MX_TIM6_Init+0x68>)
 8000dec:	f004 f9b6 	bl	800515c <HAL_TIMEx_MasterConfigSynchronization>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d001      	beq.n	8000dfa <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8000df6:	f7ff fea5 	bl	8000b44 <Error_Handler>
  }

}
 8000dfa:	bf00      	nop
 8000dfc:	3710      	adds	r7, #16
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	20000170 	.word	0x20000170
 8000e08:	40001000 	.word	0x40001000

08000e0c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b085      	sub	sp, #20
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	4a0a      	ldr	r2, [pc, #40]	; (8000e44 <HAL_TIM_Base_MspInit+0x38>)
 8000e1a:	4293      	cmp	r3, r2
 8000e1c:	d10b      	bne.n	8000e36 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000e1e:	4b0a      	ldr	r3, [pc, #40]	; (8000e48 <HAL_TIM_Base_MspInit+0x3c>)
 8000e20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e22:	4a09      	ldr	r2, [pc, #36]	; (8000e48 <HAL_TIM_Base_MspInit+0x3c>)
 8000e24:	f043 0310 	orr.w	r3, r3, #16
 8000e28:	6593      	str	r3, [r2, #88]	; 0x58
 8000e2a:	4b07      	ldr	r3, [pc, #28]	; (8000e48 <HAL_TIM_Base_MspInit+0x3c>)
 8000e2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e2e:	f003 0310 	and.w	r3, r3, #16
 8000e32:	60fb      	str	r3, [r7, #12]
 8000e34:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8000e36:	bf00      	nop
 8000e38:	3714      	adds	r7, #20
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr
 8000e42:	bf00      	nop
 8000e44:	40001000 	.word	0x40001000
 8000e48:	40021000 	.word	0x40021000

08000e4c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8000e50:	4b14      	ldr	r3, [pc, #80]	; (8000ea4 <MX_USART2_UART_Init+0x58>)
 8000e52:	4a15      	ldr	r2, [pc, #84]	; (8000ea8 <MX_USART2_UART_Init+0x5c>)
 8000e54:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000e56:	4b13      	ldr	r3, [pc, #76]	; (8000ea4 <MX_USART2_UART_Init+0x58>)
 8000e58:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e5c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e5e:	4b11      	ldr	r3, [pc, #68]	; (8000ea4 <MX_USART2_UART_Init+0x58>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e64:	4b0f      	ldr	r3, [pc, #60]	; (8000ea4 <MX_USART2_UART_Init+0x58>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e6a:	4b0e      	ldr	r3, [pc, #56]	; (8000ea4 <MX_USART2_UART_Init+0x58>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e70:	4b0c      	ldr	r3, [pc, #48]	; (8000ea4 <MX_USART2_UART_Init+0x58>)
 8000e72:	220c      	movs	r2, #12
 8000e74:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e76:	4b0b      	ldr	r3, [pc, #44]	; (8000ea4 <MX_USART2_UART_Init+0x58>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e7c:	4b09      	ldr	r3, [pc, #36]	; (8000ea4 <MX_USART2_UART_Init+0x58>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e82:	4b08      	ldr	r3, [pc, #32]	; (8000ea4 <MX_USART2_UART_Init+0x58>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e88:	4b06      	ldr	r3, [pc, #24]	; (8000ea4 <MX_USART2_UART_Init+0x58>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e8e:	4805      	ldr	r0, [pc, #20]	; (8000ea4 <MX_USART2_UART_Init+0x58>)
 8000e90:	f004 f9ec 	bl	800526c <HAL_UART_Init>
 8000e94:	4603      	mov	r3, r0
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d001      	beq.n	8000e9e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000e9a:	f7ff fe53 	bl	8000b44 <Error_Handler>
  }

}
 8000e9e:	bf00      	nop
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	200001bc 	.word	0x200001bc
 8000ea8:	40004400 	.word	0x40004400

08000eac <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b08a      	sub	sp, #40	; 0x28
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb4:	f107 0314 	add.w	r3, r7, #20
 8000eb8:	2200      	movs	r2, #0
 8000eba:	601a      	str	r2, [r3, #0]
 8000ebc:	605a      	str	r2, [r3, #4]
 8000ebe:	609a      	str	r2, [r3, #8]
 8000ec0:	60da      	str	r2, [r3, #12]
 8000ec2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	4a17      	ldr	r2, [pc, #92]	; (8000f28 <HAL_UART_MspInit+0x7c>)
 8000eca:	4293      	cmp	r3, r2
 8000ecc:	d128      	bne.n	8000f20 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ece:	4b17      	ldr	r3, [pc, #92]	; (8000f2c <HAL_UART_MspInit+0x80>)
 8000ed0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ed2:	4a16      	ldr	r2, [pc, #88]	; (8000f2c <HAL_UART_MspInit+0x80>)
 8000ed4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ed8:	6593      	str	r3, [r2, #88]	; 0x58
 8000eda:	4b14      	ldr	r3, [pc, #80]	; (8000f2c <HAL_UART_MspInit+0x80>)
 8000edc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ede:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ee2:	613b      	str	r3, [r7, #16]
 8000ee4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ee6:	4b11      	ldr	r3, [pc, #68]	; (8000f2c <HAL_UART_MspInit+0x80>)
 8000ee8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eea:	4a10      	ldr	r2, [pc, #64]	; (8000f2c <HAL_UART_MspInit+0x80>)
 8000eec:	f043 0301 	orr.w	r3, r3, #1
 8000ef0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ef2:	4b0e      	ldr	r3, [pc, #56]	; (8000f2c <HAL_UART_MspInit+0x80>)
 8000ef4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ef6:	f003 0301 	and.w	r3, r3, #1
 8000efa:	60fb      	str	r3, [r7, #12]
 8000efc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000efe:	230c      	movs	r3, #12
 8000f00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f02:	2302      	movs	r3, #2
 8000f04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f06:	2300      	movs	r3, #0
 8000f08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f0a:	2303      	movs	r3, #3
 8000f0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f0e:	2307      	movs	r3, #7
 8000f10:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f12:	f107 0314 	add.w	r3, r7, #20
 8000f16:	4619      	mov	r1, r3
 8000f18:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f1c:	f002 fafe 	bl	800351c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000f20:	bf00      	nop
 8000f22:	3728      	adds	r7, #40	; 0x28
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	40004400 	.word	0x40004400
 8000f2c:	40021000 	.word	0x40021000

08000f30 <Reset_Handler>:
 8000f30:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f68 <LoopForever+0x2>
 8000f34:	f7ff fefc 	bl	8000d30 <SystemInit>
 8000f38:	2100      	movs	r1, #0
 8000f3a:	e003      	b.n	8000f44 <LoopCopyDataInit>

08000f3c <CopyDataInit>:
 8000f3c:	4b0b      	ldr	r3, [pc, #44]	; (8000f6c <LoopForever+0x6>)
 8000f3e:	585b      	ldr	r3, [r3, r1]
 8000f40:	5043      	str	r3, [r0, r1]
 8000f42:	3104      	adds	r1, #4

08000f44 <LoopCopyDataInit>:
 8000f44:	480a      	ldr	r0, [pc, #40]	; (8000f70 <LoopForever+0xa>)
 8000f46:	4b0b      	ldr	r3, [pc, #44]	; (8000f74 <LoopForever+0xe>)
 8000f48:	1842      	adds	r2, r0, r1
 8000f4a:	429a      	cmp	r2, r3
 8000f4c:	d3f6      	bcc.n	8000f3c <CopyDataInit>
 8000f4e:	4a0a      	ldr	r2, [pc, #40]	; (8000f78 <LoopForever+0x12>)
 8000f50:	e002      	b.n	8000f58 <LoopFillZerobss>

08000f52 <FillZerobss>:
 8000f52:	2300      	movs	r3, #0
 8000f54:	f842 3b04 	str.w	r3, [r2], #4

08000f58 <LoopFillZerobss>:
 8000f58:	4b08      	ldr	r3, [pc, #32]	; (8000f7c <LoopForever+0x16>)
 8000f5a:	429a      	cmp	r2, r3
 8000f5c:	d3f9      	bcc.n	8000f52 <FillZerobss>
 8000f5e:	f004 fe59 	bl	8005c14 <__libc_init_array>
 8000f62:	f7ff fd19 	bl	8000998 <main>

08000f66 <LoopForever>:
 8000f66:	e7fe      	b.n	8000f66 <LoopForever>
 8000f68:	20018000 	.word	0x20018000
 8000f6c:	08006b54 	.word	0x08006b54
 8000f70:	20000000 	.word	0x20000000
 8000f74:	20000080 	.word	0x20000080
 8000f78:	20000080 	.word	0x20000080
 8000f7c:	20000244 	.word	0x20000244

08000f80 <ADC3_IRQHandler>:
 8000f80:	e7fe      	b.n	8000f80 <ADC3_IRQHandler>
	...

08000f84 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f8e:	4b0c      	ldr	r3, [pc, #48]	; (8000fc0 <HAL_Init+0x3c>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	4a0b      	ldr	r2, [pc, #44]	; (8000fc0 <HAL_Init+0x3c>)
 8000f94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f98:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f9a:	2003      	movs	r0, #3
 8000f9c:	f001 fdbc 	bl	8002b18 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000fa0:	2000      	movs	r0, #0
 8000fa2:	f000 f80f 	bl	8000fc4 <HAL_InitTick>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d002      	beq.n	8000fb2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000fac:	2301      	movs	r3, #1
 8000fae:	71fb      	strb	r3, [r7, #7]
 8000fb0:	e001      	b.n	8000fb6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000fb2:	f7ff fdcf 	bl	8000b54 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000fb6:	79fb      	ldrb	r3, [r7, #7]
}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	3708      	adds	r7, #8
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	40022000 	.word	0x40022000

08000fc4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b084      	sub	sp, #16
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000fd0:	4b17      	ldr	r3, [pc, #92]	; (8001030 <HAL_InitTick+0x6c>)
 8000fd2:	781b      	ldrb	r3, [r3, #0]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d023      	beq.n	8001020 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000fd8:	4b16      	ldr	r3, [pc, #88]	; (8001034 <HAL_InitTick+0x70>)
 8000fda:	681a      	ldr	r2, [r3, #0]
 8000fdc:	4b14      	ldr	r3, [pc, #80]	; (8001030 <HAL_InitTick+0x6c>)
 8000fde:	781b      	ldrb	r3, [r3, #0]
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fe6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fea:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f001 fdc7 	bl	8002b82 <HAL_SYSTICK_Config>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d10f      	bne.n	800101a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	2b0f      	cmp	r3, #15
 8000ffe:	d809      	bhi.n	8001014 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001000:	2200      	movs	r2, #0
 8001002:	6879      	ldr	r1, [r7, #4]
 8001004:	f04f 30ff 	mov.w	r0, #4294967295
 8001008:	f001 fd91 	bl	8002b2e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800100c:	4a0a      	ldr	r2, [pc, #40]	; (8001038 <HAL_InitTick+0x74>)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	6013      	str	r3, [r2, #0]
 8001012:	e007      	b.n	8001024 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001014:	2301      	movs	r3, #1
 8001016:	73fb      	strb	r3, [r7, #15]
 8001018:	e004      	b.n	8001024 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800101a:	2301      	movs	r3, #1
 800101c:	73fb      	strb	r3, [r7, #15]
 800101e:	e001      	b.n	8001024 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001020:	2301      	movs	r3, #1
 8001022:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001024:	7bfb      	ldrb	r3, [r7, #15]
}
 8001026:	4618      	mov	r0, r3
 8001028:	3710      	adds	r7, #16
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	20000018 	.word	0x20000018
 8001034:	20000010 	.word	0x20000010
 8001038:	20000014 	.word	0x20000014

0800103c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001040:	4b06      	ldr	r3, [pc, #24]	; (800105c <HAL_IncTick+0x20>)
 8001042:	781b      	ldrb	r3, [r3, #0]
 8001044:	461a      	mov	r2, r3
 8001046:	4b06      	ldr	r3, [pc, #24]	; (8001060 <HAL_IncTick+0x24>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	4413      	add	r3, r2
 800104c:	4a04      	ldr	r2, [pc, #16]	; (8001060 <HAL_IncTick+0x24>)
 800104e:	6013      	str	r3, [r2, #0]
}
 8001050:	bf00      	nop
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop
 800105c:	20000018 	.word	0x20000018
 8001060:	2000023c 	.word	0x2000023c

08001064 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
  return uwTick;
 8001068:	4b03      	ldr	r3, [pc, #12]	; (8001078 <HAL_GetTick+0x14>)
 800106a:	681b      	ldr	r3, [r3, #0]
}
 800106c:	4618      	mov	r0, r3
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop
 8001078:	2000023c 	.word	0x2000023c

0800107c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b084      	sub	sp, #16
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001084:	f7ff ffee 	bl	8001064 <HAL_GetTick>
 8001088:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001094:	d005      	beq.n	80010a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001096:	4b09      	ldr	r3, [pc, #36]	; (80010bc <HAL_Delay+0x40>)
 8001098:	781b      	ldrb	r3, [r3, #0]
 800109a:	461a      	mov	r2, r3
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	4413      	add	r3, r2
 80010a0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80010a2:	bf00      	nop
 80010a4:	f7ff ffde 	bl	8001064 <HAL_GetTick>
 80010a8:	4602      	mov	r2, r0
 80010aa:	68bb      	ldr	r3, [r7, #8]
 80010ac:	1ad3      	subs	r3, r2, r3
 80010ae:	68fa      	ldr	r2, [r7, #12]
 80010b0:	429a      	cmp	r2, r3
 80010b2:	d8f7      	bhi.n	80010a4 <HAL_Delay+0x28>
  {
  }
}
 80010b4:	bf00      	nop
 80010b6:	3710      	adds	r7, #16
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	20000018 	.word	0x20000018

080010c0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b083      	sub	sp, #12
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
 80010c8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	689b      	ldr	r3, [r3, #8]
 80010ce:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	431a      	orrs	r2, r3
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	609a      	str	r2, [r3, #8]
}
 80010da:	bf00      	nop
 80010dc:	370c      	adds	r7, #12
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr

080010e6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80010e6:	b480      	push	{r7}
 80010e8:	b083      	sub	sp, #12
 80010ea:	af00      	add	r7, sp, #0
 80010ec:	6078      	str	r0, [r7, #4]
 80010ee:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	689b      	ldr	r3, [r3, #8]
 80010f4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	431a      	orrs	r2, r3
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	609a      	str	r2, [r3, #8]
}
 8001100:	bf00      	nop
 8001102:	370c      	adds	r7, #12
 8001104:	46bd      	mov	sp, r7
 8001106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110a:	4770      	bx	lr

0800110c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800110c:	b480      	push	{r7}
 800110e:	b083      	sub	sp, #12
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	689b      	ldr	r3, [r3, #8]
 8001118:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800111c:	4618      	mov	r0, r3
 800111e:	370c      	adds	r7, #12
 8001120:	46bd      	mov	sp, r7
 8001122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001126:	4770      	bx	lr

08001128 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001128:	b480      	push	{r7}
 800112a:	b087      	sub	sp, #28
 800112c:	af00      	add	r7, sp, #0
 800112e:	60f8      	str	r0, [r7, #12]
 8001130:	60b9      	str	r1, [r7, #8]
 8001132:	607a      	str	r2, [r7, #4]
 8001134:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	3360      	adds	r3, #96	; 0x60
 800113a:	461a      	mov	r2, r3
 800113c:	68bb      	ldr	r3, [r7, #8]
 800113e:	009b      	lsls	r3, r3, #2
 8001140:	4413      	add	r3, r2
 8001142:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001144:	697b      	ldr	r3, [r7, #20]
 8001146:	681a      	ldr	r2, [r3, #0]
 8001148:	4b08      	ldr	r3, [pc, #32]	; (800116c <LL_ADC_SetOffset+0x44>)
 800114a:	4013      	ands	r3, r2
 800114c:	687a      	ldr	r2, [r7, #4]
 800114e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001152:	683a      	ldr	r2, [r7, #0]
 8001154:	430a      	orrs	r2, r1
 8001156:	4313      	orrs	r3, r2
 8001158:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800115c:	697b      	ldr	r3, [r7, #20]
 800115e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001160:	bf00      	nop
 8001162:	371c      	adds	r7, #28
 8001164:	46bd      	mov	sp, r7
 8001166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116a:	4770      	bx	lr
 800116c:	03fff000 	.word	0x03fff000

08001170 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001170:	b480      	push	{r7}
 8001172:	b085      	sub	sp, #20
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
 8001178:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	3360      	adds	r3, #96	; 0x60
 800117e:	461a      	mov	r2, r3
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	009b      	lsls	r3, r3, #2
 8001184:	4413      	add	r3, r2
 8001186:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001190:	4618      	mov	r0, r3
 8001192:	3714      	adds	r7, #20
 8001194:	46bd      	mov	sp, r7
 8001196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119a:	4770      	bx	lr

0800119c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800119c:	b480      	push	{r7}
 800119e:	b087      	sub	sp, #28
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	60f8      	str	r0, [r7, #12]
 80011a4:	60b9      	str	r1, [r7, #8]
 80011a6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	3360      	adds	r3, #96	; 0x60
 80011ac:	461a      	mov	r2, r3
 80011ae:	68bb      	ldr	r3, [r7, #8]
 80011b0:	009b      	lsls	r3, r3, #2
 80011b2:	4413      	add	r3, r2
 80011b4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80011b6:	697b      	ldr	r3, [r7, #20]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	431a      	orrs	r2, r3
 80011c2:	697b      	ldr	r3, [r7, #20]
 80011c4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80011c6:	bf00      	nop
 80011c8:	371c      	adds	r7, #28
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr

080011d2 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80011d2:	b480      	push	{r7}
 80011d4:	b083      	sub	sp, #12
 80011d6:	af00      	add	r7, sp, #0
 80011d8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	68db      	ldr	r3, [r3, #12]
 80011de:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d101      	bne.n	80011ea <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80011e6:	2301      	movs	r3, #1
 80011e8:	e000      	b.n	80011ec <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80011ea:	2300      	movs	r3, #0
}
 80011ec:	4618      	mov	r0, r3
 80011ee:	370c      	adds	r7, #12
 80011f0:	46bd      	mov	sp, r7
 80011f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f6:	4770      	bx	lr

080011f8 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b087      	sub	sp, #28
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	60f8      	str	r0, [r7, #12]
 8001200:	60b9      	str	r1, [r7, #8]
 8001202:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	3330      	adds	r3, #48	; 0x30
 8001208:	461a      	mov	r2, r3
 800120a:	68bb      	ldr	r3, [r7, #8]
 800120c:	0a1b      	lsrs	r3, r3, #8
 800120e:	009b      	lsls	r3, r3, #2
 8001210:	f003 030c 	and.w	r3, r3, #12
 8001214:	4413      	add	r3, r2
 8001216:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001218:	697b      	ldr	r3, [r7, #20]
 800121a:	681a      	ldr	r2, [r3, #0]
 800121c:	68bb      	ldr	r3, [r7, #8]
 800121e:	f003 031f 	and.w	r3, r3, #31
 8001222:	211f      	movs	r1, #31
 8001224:	fa01 f303 	lsl.w	r3, r1, r3
 8001228:	43db      	mvns	r3, r3
 800122a:	401a      	ands	r2, r3
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	0e9b      	lsrs	r3, r3, #26
 8001230:	f003 011f 	and.w	r1, r3, #31
 8001234:	68bb      	ldr	r3, [r7, #8]
 8001236:	f003 031f 	and.w	r3, r3, #31
 800123a:	fa01 f303 	lsl.w	r3, r1, r3
 800123e:	431a      	orrs	r2, r3
 8001240:	697b      	ldr	r3, [r7, #20]
 8001242:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001244:	bf00      	nop
 8001246:	371c      	adds	r7, #28
 8001248:	46bd      	mov	sp, r7
 800124a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124e:	4770      	bx	lr

08001250 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001250:	b480      	push	{r7}
 8001252:	b083      	sub	sp, #12
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800125c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d101      	bne.n	8001268 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8001264:	2301      	movs	r3, #1
 8001266:	e000      	b.n	800126a <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8001268:	2300      	movs	r3, #0
}
 800126a:	4618      	mov	r0, r3
 800126c:	370c      	adds	r7, #12
 800126e:	46bd      	mov	sp, r7
 8001270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001274:	4770      	bx	lr

08001276 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001276:	b480      	push	{r7}
 8001278:	b087      	sub	sp, #28
 800127a:	af00      	add	r7, sp, #0
 800127c:	60f8      	str	r0, [r7, #12]
 800127e:	60b9      	str	r1, [r7, #8]
 8001280:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	3314      	adds	r3, #20
 8001286:	461a      	mov	r2, r3
 8001288:	68bb      	ldr	r3, [r7, #8]
 800128a:	0e5b      	lsrs	r3, r3, #25
 800128c:	009b      	lsls	r3, r3, #2
 800128e:	f003 0304 	and.w	r3, r3, #4
 8001292:	4413      	add	r3, r2
 8001294:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001296:	697b      	ldr	r3, [r7, #20]
 8001298:	681a      	ldr	r2, [r3, #0]
 800129a:	68bb      	ldr	r3, [r7, #8]
 800129c:	0d1b      	lsrs	r3, r3, #20
 800129e:	f003 031f 	and.w	r3, r3, #31
 80012a2:	2107      	movs	r1, #7
 80012a4:	fa01 f303 	lsl.w	r3, r1, r3
 80012a8:	43db      	mvns	r3, r3
 80012aa:	401a      	ands	r2, r3
 80012ac:	68bb      	ldr	r3, [r7, #8]
 80012ae:	0d1b      	lsrs	r3, r3, #20
 80012b0:	f003 031f 	and.w	r3, r3, #31
 80012b4:	6879      	ldr	r1, [r7, #4]
 80012b6:	fa01 f303 	lsl.w	r3, r1, r3
 80012ba:	431a      	orrs	r2, r3
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80012c0:	bf00      	nop
 80012c2:	371c      	adds	r7, #28
 80012c4:	46bd      	mov	sp, r7
 80012c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ca:	4770      	bx	lr

080012cc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b085      	sub	sp, #20
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	60f8      	str	r0, [r7, #12]
 80012d4:	60b9      	str	r1, [r7, #8]
 80012d6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80012de:	68bb      	ldr	r3, [r7, #8]
 80012e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80012e4:	43db      	mvns	r3, r3
 80012e6:	401a      	ands	r2, r3
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	f003 0318 	and.w	r3, r3, #24
 80012ee:	4908      	ldr	r1, [pc, #32]	; (8001310 <LL_ADC_SetChannelSingleDiff+0x44>)
 80012f0:	40d9      	lsrs	r1, r3
 80012f2:	68bb      	ldr	r3, [r7, #8]
 80012f4:	400b      	ands	r3, r1
 80012f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80012fa:	431a      	orrs	r2, r3
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001302:	bf00      	nop
 8001304:	3714      	adds	r7, #20
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr
 800130e:	bf00      	nop
 8001310:	0007ffff 	.word	0x0007ffff

08001314 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001314:	b480      	push	{r7}
 8001316:	b083      	sub	sp, #12
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	689b      	ldr	r3, [r3, #8]
 8001320:	f003 031f 	and.w	r3, r3, #31
}
 8001324:	4618      	mov	r0, r3
 8001326:	370c      	adds	r7, #12
 8001328:	46bd      	mov	sp, r7
 800132a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132e:	4770      	bx	lr

08001330 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001330:	b480      	push	{r7}
 8001332:	b083      	sub	sp, #12
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	689b      	ldr	r3, [r3, #8]
 800133c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8001340:	4618      	mov	r0, r3
 8001342:	370c      	adds	r7, #12
 8001344:	46bd      	mov	sp, r7
 8001346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134a:	4770      	bx	lr

0800134c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800134c:	b480      	push	{r7}
 800134e:	b083      	sub	sp, #12
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	689b      	ldr	r3, [r3, #8]
 8001358:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800135c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001360:	687a      	ldr	r2, [r7, #4]
 8001362:	6093      	str	r3, [r2, #8]
}
 8001364:	bf00      	nop
 8001366:	370c      	adds	r7, #12
 8001368:	46bd      	mov	sp, r7
 800136a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136e:	4770      	bx	lr

08001370 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001370:	b480      	push	{r7}
 8001372:	b083      	sub	sp, #12
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	689b      	ldr	r3, [r3, #8]
 800137c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001380:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001384:	d101      	bne.n	800138a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001386:	2301      	movs	r3, #1
 8001388:	e000      	b.n	800138c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800138a:	2300      	movs	r3, #0
}
 800138c:	4618      	mov	r0, r3
 800138e:	370c      	adds	r7, #12
 8001390:	46bd      	mov	sp, r7
 8001392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001396:	4770      	bx	lr

08001398 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001398:	b480      	push	{r7}
 800139a:	b083      	sub	sp, #12
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	689b      	ldr	r3, [r3, #8]
 80013a4:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80013a8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80013ac:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80013b4:	bf00      	nop
 80013b6:	370c      	adds	r7, #12
 80013b8:	46bd      	mov	sp, r7
 80013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013be:	4770      	bx	lr

080013c0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b083      	sub	sp, #12
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	689b      	ldr	r3, [r3, #8]
 80013cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013d0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80013d4:	d101      	bne.n	80013da <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80013d6:	2301      	movs	r3, #1
 80013d8:	e000      	b.n	80013dc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80013da:	2300      	movs	r3, #0
}
 80013dc:	4618      	mov	r0, r3
 80013de:	370c      	adds	r7, #12
 80013e0:	46bd      	mov	sp, r7
 80013e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e6:	4770      	bx	lr

080013e8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b083      	sub	sp, #12
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	689b      	ldr	r3, [r3, #8]
 80013f4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80013f8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80013fc:	f043 0201 	orr.w	r2, r3, #1
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001404:	bf00      	nop
 8001406:	370c      	adds	r7, #12
 8001408:	46bd      	mov	sp, r7
 800140a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140e:	4770      	bx	lr

08001410 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001410:	b480      	push	{r7}
 8001412:	b083      	sub	sp, #12
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	689b      	ldr	r3, [r3, #8]
 800141c:	f003 0301 	and.w	r3, r3, #1
 8001420:	2b01      	cmp	r3, #1
 8001422:	d101      	bne.n	8001428 <LL_ADC_IsEnabled+0x18>
 8001424:	2301      	movs	r3, #1
 8001426:	e000      	b.n	800142a <LL_ADC_IsEnabled+0x1a>
 8001428:	2300      	movs	r3, #0
}
 800142a:	4618      	mov	r0, r3
 800142c:	370c      	adds	r7, #12
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr

08001436 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001436:	b480      	push	{r7}
 8001438:	b083      	sub	sp, #12
 800143a:	af00      	add	r7, sp, #0
 800143c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	689b      	ldr	r3, [r3, #8]
 8001442:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001446:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800144a:	f043 0204 	orr.w	r2, r3, #4
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001452:	bf00      	nop
 8001454:	370c      	adds	r7, #12
 8001456:	46bd      	mov	sp, r7
 8001458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145c:	4770      	bx	lr

0800145e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800145e:	b480      	push	{r7}
 8001460:	b083      	sub	sp, #12
 8001462:	af00      	add	r7, sp, #0
 8001464:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	689b      	ldr	r3, [r3, #8]
 800146a:	f003 0304 	and.w	r3, r3, #4
 800146e:	2b04      	cmp	r3, #4
 8001470:	d101      	bne.n	8001476 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001472:	2301      	movs	r3, #1
 8001474:	e000      	b.n	8001478 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001476:	2300      	movs	r3, #0
}
 8001478:	4618      	mov	r0, r3
 800147a:	370c      	adds	r7, #12
 800147c:	46bd      	mov	sp, r7
 800147e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001482:	4770      	bx	lr

08001484 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001484:	b480      	push	{r7}
 8001486:	b083      	sub	sp, #12
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	689b      	ldr	r3, [r3, #8]
 8001490:	f003 0308 	and.w	r3, r3, #8
 8001494:	2b08      	cmp	r3, #8
 8001496:	d101      	bne.n	800149c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001498:	2301      	movs	r3, #1
 800149a:	e000      	b.n	800149e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800149c:	2300      	movs	r3, #0
}
 800149e:	4618      	mov	r0, r3
 80014a0:	370c      	adds	r7, #12
 80014a2:	46bd      	mov	sp, r7
 80014a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a8:	4770      	bx	lr
	...

080014ac <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80014ac:	b590      	push	{r4, r7, lr}
 80014ae:	b089      	sub	sp, #36	; 0x24
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014b4:	2300      	movs	r3, #0
 80014b6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80014b8:	2300      	movs	r3, #0
 80014ba:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d101      	bne.n	80014c6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80014c2:	2301      	movs	r3, #1
 80014c4:	e134      	b.n	8001730 <HAL_ADC_Init+0x284>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	691b      	ldr	r3, [r3, #16]
 80014ca:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d109      	bne.n	80014e8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80014d4:	6878      	ldr	r0, [r7, #4]
 80014d6:	f7ff f8c1 	bl	800065c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	2200      	movs	r2, #0
 80014de:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2200      	movs	r2, #0
 80014e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4618      	mov	r0, r3
 80014ee:	f7ff ff3f 	bl	8001370 <LL_ADC_IsDeepPowerDownEnabled>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d004      	beq.n	8001502 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4618      	mov	r0, r3
 80014fe:	f7ff ff25 	bl	800134c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	4618      	mov	r0, r3
 8001508:	f7ff ff5a 	bl	80013c0 <LL_ADC_IsInternalRegulatorEnabled>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d113      	bne.n	800153a <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4618      	mov	r0, r3
 8001518:	f7ff ff3e 	bl	8001398 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 800151c:	4b86      	ldr	r3, [pc, #536]	; (8001738 <HAL_ADC_Init+0x28c>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	099b      	lsrs	r3, r3, #6
 8001522:	4a86      	ldr	r2, [pc, #536]	; (800173c <HAL_ADC_Init+0x290>)
 8001524:	fba2 2303 	umull	r2, r3, r2, r3
 8001528:	099b      	lsrs	r3, r3, #6
 800152a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800152c:	e002      	b.n	8001534 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 800152e:	68bb      	ldr	r3, [r7, #8]
 8001530:	3b01      	subs	r3, #1
 8001532:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001534:	68bb      	ldr	r3, [r7, #8]
 8001536:	2b00      	cmp	r3, #0
 8001538:	d1f9      	bne.n	800152e <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4618      	mov	r0, r3
 8001540:	f7ff ff3e 	bl	80013c0 <LL_ADC_IsInternalRegulatorEnabled>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d10d      	bne.n	8001566 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800154e:	f043 0210 	orr.w	r2, r3, #16
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800155a:	f043 0201 	orr.w	r2, r3, #1
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001562:	2301      	movs	r3, #1
 8001564:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4618      	mov	r0, r3
 800156c:	f7ff ff77 	bl	800145e <LL_ADC_REG_IsConversionOngoing>
 8001570:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001576:	f003 0310 	and.w	r3, r3, #16
 800157a:	2b00      	cmp	r3, #0
 800157c:	f040 80cf 	bne.w	800171e <HAL_ADC_Init+0x272>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001580:	697b      	ldr	r3, [r7, #20]
 8001582:	2b00      	cmp	r3, #0
 8001584:	f040 80cb 	bne.w	800171e <HAL_ADC_Init+0x272>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800158c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001590:	f043 0202 	orr.w	r2, r3, #2
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4618      	mov	r0, r3
 800159e:	f7ff ff37 	bl	8001410 <LL_ADC_IsEnabled>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d115      	bne.n	80015d4 <HAL_ADC_Init+0x128>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80015a8:	4865      	ldr	r0, [pc, #404]	; (8001740 <HAL_ADC_Init+0x294>)
 80015aa:	f7ff ff31 	bl	8001410 <LL_ADC_IsEnabled>
 80015ae:	4604      	mov	r4, r0
 80015b0:	4864      	ldr	r0, [pc, #400]	; (8001744 <HAL_ADC_Init+0x298>)
 80015b2:	f7ff ff2d 	bl	8001410 <LL_ADC_IsEnabled>
 80015b6:	4603      	mov	r3, r0
 80015b8:	431c      	orrs	r4, r3
 80015ba:	4863      	ldr	r0, [pc, #396]	; (8001748 <HAL_ADC_Init+0x29c>)
 80015bc:	f7ff ff28 	bl	8001410 <LL_ADC_IsEnabled>
 80015c0:	4603      	mov	r3, r0
 80015c2:	4323      	orrs	r3, r4
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d105      	bne.n	80015d4 <HAL_ADC_Init+0x128>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	4619      	mov	r1, r3
 80015ce:	485f      	ldr	r0, [pc, #380]	; (800174c <HAL_ADC_Init+0x2a0>)
 80015d0:	f7ff fd76 	bl	80010c0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	7e5b      	ldrb	r3, [r3, #25]
 80015d8:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80015de:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80015e4:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80015ea:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015f2:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80015f4:	4313      	orrs	r3, r2
 80015f6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015fe:	2b01      	cmp	r3, #1
 8001600:	d106      	bne.n	8001610 <HAL_ADC_Init+0x164>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001606:	3b01      	subs	r3, #1
 8001608:	045b      	lsls	r3, r3, #17
 800160a:	69ba      	ldr	r2, [r7, #24]
 800160c:	4313      	orrs	r3, r2
 800160e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001614:	2b00      	cmp	r3, #0
 8001616:	d009      	beq.n	800162c <HAL_ADC_Init+0x180>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800161c:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001624:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001626:	69ba      	ldr	r2, [r7, #24]
 8001628:	4313      	orrs	r3, r2
 800162a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	68da      	ldr	r2, [r3, #12]
 8001632:	4b47      	ldr	r3, [pc, #284]	; (8001750 <HAL_ADC_Init+0x2a4>)
 8001634:	4013      	ands	r3, r2
 8001636:	687a      	ldr	r2, [r7, #4]
 8001638:	6812      	ldr	r2, [r2, #0]
 800163a:	69b9      	ldr	r1, [r7, #24]
 800163c:	430b      	orrs	r3, r1
 800163e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4618      	mov	r0, r3
 8001646:	f7ff ff0a 	bl	800145e <LL_ADC_REG_IsConversionOngoing>
 800164a:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4618      	mov	r0, r3
 8001652:	f7ff ff17 	bl	8001484 <LL_ADC_INJ_IsConversionOngoing>
 8001656:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001658:	693b      	ldr	r3, [r7, #16]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d13d      	bne.n	80016da <HAL_ADC_Init+0x22e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d13a      	bne.n	80016da <HAL_ADC_Init+0x22e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001668:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001670:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001672:	4313      	orrs	r3, r2
 8001674:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	68db      	ldr	r3, [r3, #12]
 800167c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001680:	f023 0302 	bic.w	r3, r3, #2
 8001684:	687a      	ldr	r2, [r7, #4]
 8001686:	6812      	ldr	r2, [r2, #0]
 8001688:	69b9      	ldr	r1, [r7, #24]
 800168a:	430b      	orrs	r3, r1
 800168c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001694:	2b01      	cmp	r3, #1
 8001696:	d118      	bne.n	80016ca <HAL_ADC_Init+0x21e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	691b      	ldr	r3, [r3, #16]
 800169e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80016a2:	f023 0304 	bic.w	r3, r3, #4
 80016a6:	687a      	ldr	r2, [r7, #4]
 80016a8:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80016aa:	687a      	ldr	r2, [r7, #4]
 80016ac:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80016ae:	4311      	orrs	r1, r2
 80016b0:	687a      	ldr	r2, [r7, #4]
 80016b2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80016b4:	4311      	orrs	r1, r2
 80016b6:	687a      	ldr	r2, [r7, #4]
 80016b8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80016ba:	430a      	orrs	r2, r1
 80016bc:	431a      	orrs	r2, r3
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f042 0201 	orr.w	r2, r2, #1
 80016c6:	611a      	str	r2, [r3, #16]
 80016c8:	e007      	b.n	80016da <HAL_ADC_Init+0x22e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	691a      	ldr	r2, [r3, #16]
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f022 0201 	bic.w	r2, r2, #1
 80016d8:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	691b      	ldr	r3, [r3, #16]
 80016de:	2b01      	cmp	r3, #1
 80016e0:	d10c      	bne.n	80016fc <HAL_ADC_Init+0x250>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e8:	f023 010f 	bic.w	r1, r3, #15
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	69db      	ldr	r3, [r3, #28]
 80016f0:	1e5a      	subs	r2, r3, #1
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	430a      	orrs	r2, r1
 80016f8:	631a      	str	r2, [r3, #48]	; 0x30
 80016fa:	e007      	b.n	800170c <HAL_ADC_Init+0x260>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f022 020f 	bic.w	r2, r2, #15
 800170a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001710:	f023 0303 	bic.w	r3, r3, #3
 8001714:	f043 0201 	orr.w	r2, r3, #1
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	655a      	str	r2, [r3, #84]	; 0x54
 800171c:	e007      	b.n	800172e <HAL_ADC_Init+0x282>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001722:	f043 0210 	orr.w	r2, r3, #16
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800172a:	2301      	movs	r3, #1
 800172c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800172e:	7ffb      	ldrb	r3, [r7, #31]
}
 8001730:	4618      	mov	r0, r3
 8001732:	3724      	adds	r7, #36	; 0x24
 8001734:	46bd      	mov	sp, r7
 8001736:	bd90      	pop	{r4, r7, pc}
 8001738:	20000010 	.word	0x20000010
 800173c:	053e2d63 	.word	0x053e2d63
 8001740:	50040000 	.word	0x50040000
 8001744:	50040100 	.word	0x50040100
 8001748:	50040200 	.word	0x50040200
 800174c:	50040300 	.word	0x50040300
 8001750:	fff0c007 	.word	0xfff0c007

08001754 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b086      	sub	sp, #24
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800175c:	4857      	ldr	r0, [pc, #348]	; (80018bc <HAL_ADC_Start+0x168>)
 800175e:	f7ff fdd9 	bl	8001314 <LL_ADC_GetMultimode>
 8001762:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4618      	mov	r0, r3
 800176a:	f7ff fe78 	bl	800145e <LL_ADC_REG_IsConversionOngoing>
 800176e:	4603      	mov	r3, r0
 8001770:	2b00      	cmp	r3, #0
 8001772:	f040 809c 	bne.w	80018ae <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800177c:	2b01      	cmp	r3, #1
 800177e:	d101      	bne.n	8001784 <HAL_ADC_Start+0x30>
 8001780:	2302      	movs	r3, #2
 8001782:	e097      	b.n	80018b4 <HAL_ADC_Start+0x160>
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2201      	movs	r2, #1
 8001788:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800178c:	6878      	ldr	r0, [r7, #4]
 800178e:	f000 ff95 	bl	80026bc <ADC_Enable>
 8001792:	4603      	mov	r3, r0
 8001794:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001796:	7dfb      	ldrb	r3, [r7, #23]
 8001798:	2b00      	cmp	r3, #0
 800179a:	f040 8083 	bne.w	80018a4 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017a2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80017a6:	f023 0301 	bic.w	r3, r3, #1
 80017aa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4a42      	ldr	r2, [pc, #264]	; (80018c0 <HAL_ADC_Start+0x16c>)
 80017b8:	4293      	cmp	r3, r2
 80017ba:	d002      	beq.n	80017c2 <HAL_ADC_Start+0x6e>
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	e000      	b.n	80017c4 <HAL_ADC_Start+0x70>
 80017c2:	4b40      	ldr	r3, [pc, #256]	; (80018c4 <HAL_ADC_Start+0x170>)
 80017c4:	687a      	ldr	r2, [r7, #4]
 80017c6:	6812      	ldr	r2, [r2, #0]
 80017c8:	4293      	cmp	r3, r2
 80017ca:	d002      	beq.n	80017d2 <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80017cc:	693b      	ldr	r3, [r7, #16]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d105      	bne.n	80017de <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017d6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017e2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80017ea:	d106      	bne.n	80017fa <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017f0:	f023 0206 	bic.w	r2, r3, #6
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	659a      	str	r2, [r3, #88]	; 0x58
 80017f8:	e002      	b.n	8001800 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	2200      	movs	r2, #0
 80017fe:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	221c      	movs	r2, #28
 8001806:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2200      	movs	r2, #0
 800180c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a2a      	ldr	r2, [pc, #168]	; (80018c0 <HAL_ADC_Start+0x16c>)
 8001816:	4293      	cmp	r3, r2
 8001818:	d002      	beq.n	8001820 <HAL_ADC_Start+0xcc>
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	e000      	b.n	8001822 <HAL_ADC_Start+0xce>
 8001820:	4b28      	ldr	r3, [pc, #160]	; (80018c4 <HAL_ADC_Start+0x170>)
 8001822:	687a      	ldr	r2, [r7, #4]
 8001824:	6812      	ldr	r2, [r2, #0]
 8001826:	4293      	cmp	r3, r2
 8001828:	d008      	beq.n	800183c <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800182a:	693b      	ldr	r3, [r7, #16]
 800182c:	2b00      	cmp	r3, #0
 800182e:	d005      	beq.n	800183c <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001830:	693b      	ldr	r3, [r7, #16]
 8001832:	2b05      	cmp	r3, #5
 8001834:	d002      	beq.n	800183c <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001836:	693b      	ldr	r3, [r7, #16]
 8001838:	2b09      	cmp	r3, #9
 800183a:	d114      	bne.n	8001866 <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	68db      	ldr	r3, [r3, #12]
 8001842:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001846:	2b00      	cmp	r3, #0
 8001848:	d007      	beq.n	800185a <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800184e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001852:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4618      	mov	r0, r3
 8001860:	f7ff fde9 	bl	8001436 <LL_ADC_REG_StartConversion>
 8001864:	e025      	b.n	80018b2 <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800186a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4a12      	ldr	r2, [pc, #72]	; (80018c0 <HAL_ADC_Start+0x16c>)
 8001878:	4293      	cmp	r3, r2
 800187a:	d002      	beq.n	8001882 <HAL_ADC_Start+0x12e>
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	e000      	b.n	8001884 <HAL_ADC_Start+0x130>
 8001882:	4b10      	ldr	r3, [pc, #64]	; (80018c4 <HAL_ADC_Start+0x170>)
 8001884:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	68db      	ldr	r3, [r3, #12]
 800188a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800188e:	2b00      	cmp	r3, #0
 8001890:	d00f      	beq.n	80018b2 <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001896:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800189a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	655a      	str	r2, [r3, #84]	; 0x54
 80018a2:	e006      	b.n	80018b2 <HAL_ADC_Start+0x15e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2200      	movs	r2, #0
 80018a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80018ac:	e001      	b.n	80018b2 <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80018ae:	2302      	movs	r3, #2
 80018b0:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80018b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	3718      	adds	r7, #24
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	50040300 	.word	0x50040300
 80018c0:	50040100 	.word	0x50040100
 80018c4:	50040000 	.word	0x50040000

080018c8 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b088      	sub	sp, #32
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
 80018d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80018d2:	4862      	ldr	r0, [pc, #392]	; (8001a5c <HAL_ADC_PollForConversion+0x194>)
 80018d4:	f7ff fd1e 	bl	8001314 <LL_ADC_GetMultimode>
 80018d8:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	695b      	ldr	r3, [r3, #20]
 80018de:	2b08      	cmp	r3, #8
 80018e0:	d102      	bne.n	80018e8 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80018e2:	2308      	movs	r3, #8
 80018e4:	61fb      	str	r3, [r7, #28]
 80018e6:	e02a      	b.n	800193e <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d005      	beq.n	80018fa <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80018ee:	697b      	ldr	r3, [r7, #20]
 80018f0:	2b05      	cmp	r3, #5
 80018f2:	d002      	beq.n	80018fa <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80018f4:	697b      	ldr	r3, [r7, #20]
 80018f6:	2b09      	cmp	r3, #9
 80018f8:	d111      	bne.n	800191e <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	68db      	ldr	r3, [r3, #12]
 8001900:	f003 0301 	and.w	r3, r3, #1
 8001904:	2b00      	cmp	r3, #0
 8001906:	d007      	beq.n	8001918 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800190c:	f043 0220 	orr.w	r2, r3, #32
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8001914:	2301      	movs	r3, #1
 8001916:	e09d      	b.n	8001a54 <HAL_ADC_PollForConversion+0x18c>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001918:	2304      	movs	r3, #4
 800191a:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 800191c:	e00f      	b.n	800193e <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800191e:	484f      	ldr	r0, [pc, #316]	; (8001a5c <HAL_ADC_PollForConversion+0x194>)
 8001920:	f7ff fd06 	bl	8001330 <LL_ADC_GetMultiDMATransfer>
 8001924:	4603      	mov	r3, r0
 8001926:	2b00      	cmp	r3, #0
 8001928:	d007      	beq.n	800193a <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800192e:	f043 0220 	orr.w	r2, r3, #32
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8001936:	2301      	movs	r3, #1
 8001938:	e08c      	b.n	8001a54 <HAL_ADC_PollForConversion+0x18c>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800193a:	2304      	movs	r3, #4
 800193c:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800193e:	f7ff fb91 	bl	8001064 <HAL_GetTick>
 8001942:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001944:	e01a      	b.n	800197c <HAL_ADC_PollForConversion+0xb4>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	f1b3 3fff 	cmp.w	r3, #4294967295
 800194c:	d016      	beq.n	800197c <HAL_ADC_PollForConversion+0xb4>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800194e:	f7ff fb89 	bl	8001064 <HAL_GetTick>
 8001952:	4602      	mov	r2, r0
 8001954:	693b      	ldr	r3, [r7, #16]
 8001956:	1ad3      	subs	r3, r2, r3
 8001958:	683a      	ldr	r2, [r7, #0]
 800195a:	429a      	cmp	r2, r3
 800195c:	d302      	bcc.n	8001964 <HAL_ADC_PollForConversion+0x9c>
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d10b      	bne.n	800197c <HAL_ADC_PollForConversion+0xb4>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001968:	f043 0204 	orr.w	r2, r3, #4
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2200      	movs	r2, #0
 8001974:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8001978:	2303      	movs	r3, #3
 800197a:	e06b      	b.n	8001a54 <HAL_ADC_PollForConversion+0x18c>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	681a      	ldr	r2, [r3, #0]
 8001982:	69fb      	ldr	r3, [r7, #28]
 8001984:	4013      	ands	r3, r2
 8001986:	2b00      	cmp	r3, #0
 8001988:	d0dd      	beq.n	8001946 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800198e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4618      	mov	r0, r3
 800199c:	f7ff fc19 	bl	80011d2 <LL_ADC_REG_IsTriggerSourceSWStart>
 80019a0:	4603      	mov	r3, r0
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d01c      	beq.n	80019e0 <HAL_ADC_PollForConversion+0x118>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	7e5b      	ldrb	r3, [r3, #25]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d118      	bne.n	80019e0 <HAL_ADC_PollForConversion+0x118>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f003 0308 	and.w	r3, r3, #8
 80019b8:	2b08      	cmp	r3, #8
 80019ba:	d111      	bne.n	80019e0 <HAL_ADC_PollForConversion+0x118>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019c0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d105      	bne.n	80019e0 <HAL_ADC_PollForConversion+0x118>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019d8:	f043 0201 	orr.w	r2, r3, #1
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4a1e      	ldr	r2, [pc, #120]	; (8001a60 <HAL_ADC_PollForConversion+0x198>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d002      	beq.n	80019f0 <HAL_ADC_PollForConversion+0x128>
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	e000      	b.n	80019f2 <HAL_ADC_PollForConversion+0x12a>
 80019f0:	4b1c      	ldr	r3, [pc, #112]	; (8001a64 <HAL_ADC_PollForConversion+0x19c>)
 80019f2:	687a      	ldr	r2, [r7, #4]
 80019f4:	6812      	ldr	r2, [r2, #0]
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d008      	beq.n	8001a0c <HAL_ADC_PollForConversion+0x144>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80019fa:	697b      	ldr	r3, [r7, #20]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d005      	beq.n	8001a0c <HAL_ADC_PollForConversion+0x144>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	2b05      	cmp	r3, #5
 8001a04:	d002      	beq.n	8001a0c <HAL_ADC_PollForConversion+0x144>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001a06:	697b      	ldr	r3, [r7, #20]
 8001a08:	2b09      	cmp	r3, #9
 8001a0a:	d104      	bne.n	8001a16 <HAL_ADC_PollForConversion+0x14e>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	68db      	ldr	r3, [r3, #12]
 8001a12:	61bb      	str	r3, [r7, #24]
 8001a14:	e00c      	b.n	8001a30 <HAL_ADC_PollForConversion+0x168>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4a11      	ldr	r2, [pc, #68]	; (8001a60 <HAL_ADC_PollForConversion+0x198>)
 8001a1c:	4293      	cmp	r3, r2
 8001a1e:	d002      	beq.n	8001a26 <HAL_ADC_PollForConversion+0x15e>
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	e000      	b.n	8001a28 <HAL_ADC_PollForConversion+0x160>
 8001a26:	4b0f      	ldr	r3, [pc, #60]	; (8001a64 <HAL_ADC_PollForConversion+0x19c>)
 8001a28:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	68db      	ldr	r3, [r3, #12]
 8001a2e:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8001a30:	69fb      	ldr	r3, [r7, #28]
 8001a32:	2b08      	cmp	r3, #8
 8001a34:	d104      	bne.n	8001a40 <HAL_ADC_PollForConversion+0x178>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	2208      	movs	r2, #8
 8001a3c:	601a      	str	r2, [r3, #0]
 8001a3e:	e008      	b.n	8001a52 <HAL_ADC_PollForConversion+0x18a>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8001a40:	69bb      	ldr	r3, [r7, #24]
 8001a42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d103      	bne.n	8001a52 <HAL_ADC_PollForConversion+0x18a>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	220c      	movs	r2, #12
 8001a50:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8001a52:	2300      	movs	r3, #0
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	3720      	adds	r7, #32
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	50040300 	.word	0x50040300
 8001a60:	50040100 	.word	0x50040100
 8001a64:	50040000 	.word	0x50040000

08001a68 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b083      	sub	sp, #12
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	370c      	adds	r7, #12
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a80:	4770      	bx	lr
	...

08001a84 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b08a      	sub	sp, #40	; 0x28
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001aa0:	4882      	ldr	r0, [pc, #520]	; (8001cac <HAL_ADC_IRQHandler+0x228>)
 8001aa2:	f7ff fc37 	bl	8001314 <LL_ADC_GetMultimode>
 8001aa6:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8001aa8:	69fb      	ldr	r3, [r7, #28]
 8001aaa:	f003 0302 	and.w	r3, r3, #2
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d017      	beq.n	8001ae2 <HAL_ADC_IRQHandler+0x5e>
 8001ab2:	69bb      	ldr	r3, [r7, #24]
 8001ab4:	f003 0302 	and.w	r3, r3, #2
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d012      	beq.n	8001ae2 <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ac0:	f003 0310 	and.w	r3, r3, #16
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d105      	bne.n	8001ad4 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001acc:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8001ad4:	6878      	ldr	r0, [r7, #4]
 8001ad6:	f000 fe99 	bl	800280c <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	2202      	movs	r2, #2
 8001ae0:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001ae2:	69fb      	ldr	r3, [r7, #28]
 8001ae4:	f003 0304 	and.w	r3, r3, #4
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d004      	beq.n	8001af6 <HAL_ADC_IRQHandler+0x72>
 8001aec:	69bb      	ldr	r3, [r7, #24]
 8001aee:	f003 0304 	and.w	r3, r3, #4
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d10a      	bne.n	8001b0c <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001af6:	69fb      	ldr	r3, [r7, #28]
 8001af8:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	f000 8083 	beq.w	8001c08 <HAL_ADC_IRQHandler+0x184>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001b02:	69bb      	ldr	r3, [r7, #24]
 8001b04:	f003 0308 	and.w	r3, r3, #8
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d07d      	beq.n	8001c08 <HAL_ADC_IRQHandler+0x184>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b10:	f003 0310 	and.w	r3, r3, #16
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d105      	bne.n	8001b24 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b1c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f7ff fb52 	bl	80011d2 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d062      	beq.n	8001bfa <HAL_ADC_IRQHandler+0x176>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a5d      	ldr	r2, [pc, #372]	; (8001cb0 <HAL_ADC_IRQHandler+0x22c>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d002      	beq.n	8001b44 <HAL_ADC_IRQHandler+0xc0>
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	e000      	b.n	8001b46 <HAL_ADC_IRQHandler+0xc2>
 8001b44:	4b5b      	ldr	r3, [pc, #364]	; (8001cb4 <HAL_ADC_IRQHandler+0x230>)
 8001b46:	687a      	ldr	r2, [r7, #4]
 8001b48:	6812      	ldr	r2, [r2, #0]
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d008      	beq.n	8001b60 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001b4e:	697b      	ldr	r3, [r7, #20]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d005      	beq.n	8001b60 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001b54:	697b      	ldr	r3, [r7, #20]
 8001b56:	2b05      	cmp	r3, #5
 8001b58:	d002      	beq.n	8001b60 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001b5a:	697b      	ldr	r3, [r7, #20]
 8001b5c:	2b09      	cmp	r3, #9
 8001b5e:	d104      	bne.n	8001b6a <HAL_ADC_IRQHandler+0xe6>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	68db      	ldr	r3, [r3, #12]
 8001b66:	623b      	str	r3, [r7, #32]
 8001b68:	e00c      	b.n	8001b84 <HAL_ADC_IRQHandler+0x100>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4a50      	ldr	r2, [pc, #320]	; (8001cb0 <HAL_ADC_IRQHandler+0x22c>)
 8001b70:	4293      	cmp	r3, r2
 8001b72:	d002      	beq.n	8001b7a <HAL_ADC_IRQHandler+0xf6>
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	e000      	b.n	8001b7c <HAL_ADC_IRQHandler+0xf8>
 8001b7a:	4b4e      	ldr	r3, [pc, #312]	; (8001cb4 <HAL_ADC_IRQHandler+0x230>)
 8001b7c:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001b7e:	693b      	ldr	r3, [r7, #16]
 8001b80:	68db      	ldr	r3, [r3, #12]
 8001b82:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8001b84:	6a3b      	ldr	r3, [r7, #32]
 8001b86:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d135      	bne.n	8001bfa <HAL_ADC_IRQHandler+0x176>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f003 0308 	and.w	r3, r3, #8
 8001b98:	2b08      	cmp	r3, #8
 8001b9a:	d12e      	bne.n	8001bfa <HAL_ADC_IRQHandler+0x176>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f7ff fc5c 	bl	800145e <LL_ADC_REG_IsConversionOngoing>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d11a      	bne.n	8001be2 <HAL_ADC_IRQHandler+0x15e>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	685a      	ldr	r2, [r3, #4]
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f022 020c 	bic.w	r2, r2, #12
 8001bba:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bc0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bcc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d112      	bne.n	8001bfa <HAL_ADC_IRQHandler+0x176>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bd8:	f043 0201 	orr.w	r2, r3, #1
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	655a      	str	r2, [r3, #84]	; 0x54
 8001be0:	e00b      	b.n	8001bfa <HAL_ADC_IRQHandler+0x176>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001be6:	f043 0210 	orr.w	r2, r3, #16
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bf2:	f043 0201 	orr.w	r2, r3, #1
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001bfa:	6878      	ldr	r0, [r7, #4]
 8001bfc:	f7fe fe9a 	bl	8000934 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	220c      	movs	r2, #12
 8001c06:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001c08:	69fb      	ldr	r3, [r7, #28]
 8001c0a:	f003 0320 	and.w	r3, r3, #32
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d004      	beq.n	8001c1c <HAL_ADC_IRQHandler+0x198>
 8001c12:	69bb      	ldr	r3, [r7, #24]
 8001c14:	f003 0320 	and.w	r3, r3, #32
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d10b      	bne.n	8001c34 <HAL_ADC_IRQHandler+0x1b0>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001c1c:	69fb      	ldr	r3, [r7, #28]
 8001c1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	f000 809f 	beq.w	8001d66 <HAL_ADC_IRQHandler+0x2e2>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001c28:	69bb      	ldr	r3, [r7, #24]
 8001c2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	f000 8099 	beq.w	8001d66 <HAL_ADC_IRQHandler+0x2e2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c38:	f003 0310 	and.w	r3, r3, #16
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d105      	bne.n	8001c4c <HAL_ADC_IRQHandler+0x1c8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c44:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4618      	mov	r0, r3
 8001c52:	f7ff fafd 	bl	8001250 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8001c56:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f7ff fab8 	bl	80011d2 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001c62:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a11      	ldr	r2, [pc, #68]	; (8001cb0 <HAL_ADC_IRQHandler+0x22c>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d002      	beq.n	8001c74 <HAL_ADC_IRQHandler+0x1f0>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	e000      	b.n	8001c76 <HAL_ADC_IRQHandler+0x1f2>
 8001c74:	4b0f      	ldr	r3, [pc, #60]	; (8001cb4 <HAL_ADC_IRQHandler+0x230>)
 8001c76:	687a      	ldr	r2, [r7, #4]
 8001c78:	6812      	ldr	r2, [r2, #0]
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d008      	beq.n	8001c90 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001c7e:	697b      	ldr	r3, [r7, #20]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d005      	beq.n	8001c90 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	2b06      	cmp	r3, #6
 8001c88:	d002      	beq.n	8001c90 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8001c8a:	697b      	ldr	r3, [r7, #20]
 8001c8c:	2b07      	cmp	r3, #7
 8001c8e:	d104      	bne.n	8001c9a <HAL_ADC_IRQHandler+0x216>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	68db      	ldr	r3, [r3, #12]
 8001c96:	623b      	str	r3, [r7, #32]
 8001c98:	e013      	b.n	8001cc2 <HAL_ADC_IRQHandler+0x23e>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4a04      	ldr	r2, [pc, #16]	; (8001cb0 <HAL_ADC_IRQHandler+0x22c>)
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d009      	beq.n	8001cb8 <HAL_ADC_IRQHandler+0x234>
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	e007      	b.n	8001cba <HAL_ADC_IRQHandler+0x236>
 8001caa:	bf00      	nop
 8001cac:	50040300 	.word	0x50040300
 8001cb0:	50040100 	.word	0x50040100
 8001cb4:	50040000 	.word	0x50040000
 8001cb8:	4b7d      	ldr	r3, [pc, #500]	; (8001eb0 <HAL_ADC_IRQHandler+0x42c>)
 8001cba:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001cbc:	693b      	ldr	r3, [r7, #16]
 8001cbe:	68db      	ldr	r3, [r3, #12]
 8001cc0:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d10c      	bne.n	8001ce2 <HAL_ADC_IRQHandler+0x25e>
        ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 8001cc8:	6a3b      	ldr	r3, [r7, #32]
 8001cca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d142      	bne.n	8001d58 <HAL_ADC_IRQHandler+0x2d4>
        ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 8001cd2:	68bb      	ldr	r3, [r7, #8]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d03f      	beq.n	8001d58 <HAL_ADC_IRQHandler+0x2d4>
         ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
          (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL))))
 8001cd8:	6a3b      	ldr	r3, [r7, #32]
 8001cda:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d13a      	bne.n	8001d58 <HAL_ADC_IRQHandler+0x2d4>
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cec:	2b40      	cmp	r3, #64	; 0x40
 8001cee:	d133      	bne.n	8001d58 <HAL_ADC_IRQHandler+0x2d4>
        /* when the last context has been fully processed, JSQR is reset      */
        /* by the hardware. Even if no injected conversion is planned to come */
        /* (queue empty, triggers are ignored), it can start again            */
        /* immediately after setting a new context (JADSTART is still set).   */
        /* Therefore, state of HAL ADC injected group is kept to busy.        */
        if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8001cf0:	6a3b      	ldr	r3, [r7, #32]
 8001cf2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d12e      	bne.n	8001d58 <HAL_ADC_IRQHandler+0x2d4>
        {
          /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
          /* JADSTART==0 (no conversion on going)                             */
          if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f7ff fbc0 	bl	8001484 <LL_ADC_INJ_IsConversionOngoing>
 8001d04:	4603      	mov	r3, r0
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d11a      	bne.n	8001d40 <HAL_ADC_IRQHandler+0x2bc>
          {
            /* Disable ADC end of sequence conversion interrupt  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	685a      	ldr	r2, [r3, #4]
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001d18:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d1e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d112      	bne.n	8001d58 <HAL_ADC_IRQHandler+0x2d4>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d36:	f043 0201 	orr.w	r2, r3, #1
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	655a      	str	r2, [r3, #84]	; 0x54
 8001d3e:	e00b      	b.n	8001d58 <HAL_ADC_IRQHandler+0x2d4>
            }
          }
          else
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d44:	f043 0210 	orr.w	r2, r3, #16
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d50:	f043 0201 	orr.w	r2, r3, #1
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001d58:	6878      	ldr	r0, [r7, #4]
 8001d5a:	f000 fd2f 	bl	80027bc <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	2260      	movs	r2, #96	; 0x60
 8001d64:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8001d66:	69fb      	ldr	r3, [r7, #28]
 8001d68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d011      	beq.n	8001d94 <HAL_ADC_IRQHandler+0x310>
 8001d70:	69bb      	ldr	r3, [r7, #24]
 8001d72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d00c      	beq.n	8001d94 <HAL_ADC_IRQHandler+0x310>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d7e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001d86:	6878      	ldr	r0, [r7, #4]
 8001d88:	f000 f896 	bl	8001eb8 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	2280      	movs	r2, #128	; 0x80
 8001d92:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8001d94:	69fb      	ldr	r3, [r7, #28]
 8001d96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d012      	beq.n	8001dc4 <HAL_ADC_IRQHandler+0x340>
 8001d9e:	69bb      	ldr	r3, [r7, #24]
 8001da0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d00d      	beq.n	8001dc4 <HAL_ADC_IRQHandler+0x340>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dac:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8001db4:	6878      	ldr	r0, [r7, #4]
 8001db6:	f000 fd15 	bl	80027e4 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001dc2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8001dc4:	69fb      	ldr	r3, [r7, #28]
 8001dc6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d012      	beq.n	8001df4 <HAL_ADC_IRQHandler+0x370>
 8001dce:	69bb      	ldr	r3, [r7, #24]
 8001dd0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d00d      	beq.n	8001df4 <HAL_ADC_IRQHandler+0x370>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ddc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8001de4:	6878      	ldr	r0, [r7, #4]
 8001de6:	f000 fd07 	bl	80027f8 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001df2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8001df4:	69fb      	ldr	r3, [r7, #28]
 8001df6:	f003 0310 	and.w	r3, r3, #16
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d036      	beq.n	8001e6c <HAL_ADC_IRQHandler+0x3e8>
 8001dfe:	69bb      	ldr	r3, [r7, #24]
 8001e00:	f003 0310 	and.w	r3, r3, #16
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d031      	beq.n	8001e6c <HAL_ADC_IRQHandler+0x3e8>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d102      	bne.n	8001e16 <HAL_ADC_IRQHandler+0x392>
    {
      overrun_error = 1UL;
 8001e10:	2301      	movs	r3, #1
 8001e12:	627b      	str	r3, [r7, #36]	; 0x24
 8001e14:	e014      	b.n	8001e40 <HAL_ADC_IRQHandler+0x3bc>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8001e16:	697b      	ldr	r3, [r7, #20]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d008      	beq.n	8001e2e <HAL_ADC_IRQHandler+0x3aa>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001e1c:	4825      	ldr	r0, [pc, #148]	; (8001eb4 <HAL_ADC_IRQHandler+0x430>)
 8001e1e:	f7ff fa87 	bl	8001330 <LL_ADC_GetMultiDMATransfer>
 8001e22:	4603      	mov	r3, r0
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d00b      	beq.n	8001e40 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8001e28:	2301      	movs	r3, #1
 8001e2a:	627b      	str	r3, [r7, #36]	; 0x24
 8001e2c:	e008      	b.n	8001e40 <HAL_ADC_IRQHandler+0x3bc>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	68db      	ldr	r3, [r3, #12]
 8001e34:	f003 0301 	and.w	r3, r3, #1
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d001      	beq.n	8001e40 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8001e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e42:	2b01      	cmp	r3, #1
 8001e44:	d10e      	bne.n	8001e64 <HAL_ADC_IRQHandler+0x3e0>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e4a:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e56:	f043 0202 	orr.w	r2, r3, #2
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001e5e:	6878      	ldr	r0, [r7, #4]
 8001e60:	f000 f834 	bl	8001ecc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	2210      	movs	r2, #16
 8001e6a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8001e6c:	69fb      	ldr	r3, [r7, #28]
 8001e6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d018      	beq.n	8001ea8 <HAL_ADC_IRQHandler+0x424>
 8001e76:	69bb      	ldr	r3, [r7, #24]
 8001e78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d013      	beq.n	8001ea8 <HAL_ADC_IRQHandler+0x424>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e84:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e90:	f043 0208 	orr.w	r2, r3, #8
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ea0:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8001ea2:	6878      	ldr	r0, [r7, #4]
 8001ea4:	f000 fc94 	bl	80027d0 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8001ea8:	bf00      	nop
 8001eaa:	3728      	adds	r7, #40	; 0x28
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd80      	pop	{r7, pc}
 8001eb0:	50040000 	.word	0x50040000
 8001eb4:	50040300 	.word	0x50040300

08001eb8 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b083      	sub	sp, #12
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001ec0:	bf00      	nop
 8001ec2:	370c      	adds	r7, #12
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eca:	4770      	bx	lr

08001ecc <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b083      	sub	sp, #12
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001ed4:	bf00      	nop
 8001ed6:	370c      	adds	r7, #12
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ede:	4770      	bx	lr

08001ee0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b0b6      	sub	sp, #216	; 0xd8
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
 8001ee8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001eea:	2300      	movs	r3, #0
 8001eec:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001efa:	2b01      	cmp	r3, #1
 8001efc:	d101      	bne.n	8001f02 <HAL_ADC_ConfigChannel+0x22>
 8001efe:	2302      	movs	r3, #2
 8001f00:	e3c6      	b.n	8002690 <HAL_ADC_ConfigChannel+0x7b0>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2201      	movs	r2, #1
 8001f06:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f7ff faa5 	bl	800145e <LL_ADC_REG_IsConversionOngoing>
 8001f14:	4603      	mov	r3, r0
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	f040 83a7 	bne.w	800266a <HAL_ADC_ConfigChannel+0x78a>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	2b05      	cmp	r3, #5
 8001f22:	d824      	bhi.n	8001f6e <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	3b02      	subs	r3, #2
 8001f2a:	2b03      	cmp	r3, #3
 8001f2c:	d81b      	bhi.n	8001f66 <HAL_ADC_ConfigChannel+0x86>
 8001f2e:	a201      	add	r2, pc, #4	; (adr r2, 8001f34 <HAL_ADC_ConfigChannel+0x54>)
 8001f30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f34:	08001f45 	.word	0x08001f45
 8001f38:	08001f4d 	.word	0x08001f4d
 8001f3c:	08001f55 	.word	0x08001f55
 8001f40:	08001f5d 	.word	0x08001f5d
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	220c      	movs	r2, #12
 8001f48:	605a      	str	r2, [r3, #4]
          break;
 8001f4a:	e011      	b.n	8001f70 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	2212      	movs	r2, #18
 8001f50:	605a      	str	r2, [r3, #4]
          break;
 8001f52:	e00d      	b.n	8001f70 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	2218      	movs	r2, #24
 8001f58:	605a      	str	r2, [r3, #4]
          break;
 8001f5a:	e009      	b.n	8001f70 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f62:	605a      	str	r2, [r3, #4]
          break;
 8001f64:	e004      	b.n	8001f70 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	2206      	movs	r2, #6
 8001f6a:	605a      	str	r2, [r3, #4]
          break;
 8001f6c:	e000      	b.n	8001f70 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8001f6e:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6818      	ldr	r0, [r3, #0]
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	6859      	ldr	r1, [r3, #4]
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	461a      	mov	r2, r3
 8001f7e:	f7ff f93b 	bl	80011f8 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4618      	mov	r0, r3
 8001f88:	f7ff fa69 	bl	800145e <LL_ADC_REG_IsConversionOngoing>
 8001f8c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4618      	mov	r0, r3
 8001f96:	f7ff fa75 	bl	8001484 <LL_ADC_INJ_IsConversionOngoing>
 8001f9a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001f9e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	f040 81a6 	bne.w	80022f4 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001fa8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	f040 81a1 	bne.w	80022f4 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6818      	ldr	r0, [r3, #0]
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	6819      	ldr	r1, [r3, #0]
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	689b      	ldr	r3, [r3, #8]
 8001fbe:	461a      	mov	r2, r3
 8001fc0:	f7ff f959 	bl	8001276 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	695a      	ldr	r2, [r3, #20]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	68db      	ldr	r3, [r3, #12]
 8001fce:	08db      	lsrs	r3, r3, #3
 8001fd0:	f003 0303 	and.w	r3, r3, #3
 8001fd4:	005b      	lsls	r3, r3, #1
 8001fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fda:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	691b      	ldr	r3, [r3, #16]
 8001fe2:	2b04      	cmp	r3, #4
 8001fe4:	d00a      	beq.n	8001ffc <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6818      	ldr	r0, [r3, #0]
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	6919      	ldr	r1, [r3, #16]
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	681a      	ldr	r2, [r3, #0]
 8001ff2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001ff6:	f7ff f897 	bl	8001128 <LL_ADC_SetOffset>
 8001ffa:	e17b      	b.n	80022f4 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	2100      	movs	r1, #0
 8002002:	4618      	mov	r0, r3
 8002004:	f7ff f8b4 	bl	8001170 <LL_ADC_GetOffsetChannel>
 8002008:	4603      	mov	r3, r0
 800200a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800200e:	2b00      	cmp	r3, #0
 8002010:	d10a      	bne.n	8002028 <HAL_ADC_ConfigChannel+0x148>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	2100      	movs	r1, #0
 8002018:	4618      	mov	r0, r3
 800201a:	f7ff f8a9 	bl	8001170 <LL_ADC_GetOffsetChannel>
 800201e:	4603      	mov	r3, r0
 8002020:	0e9b      	lsrs	r3, r3, #26
 8002022:	f003 021f 	and.w	r2, r3, #31
 8002026:	e01e      	b.n	8002066 <HAL_ADC_ConfigChannel+0x186>
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	2100      	movs	r1, #0
 800202e:	4618      	mov	r0, r3
 8002030:	f7ff f89e 	bl	8001170 <LL_ADC_GetOffsetChannel>
 8002034:	4603      	mov	r3, r0
 8002036:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800203a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800203e:	fa93 f3a3 	rbit	r3, r3
 8002042:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002046:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800204a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800204e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002052:	2b00      	cmp	r3, #0
 8002054:	d101      	bne.n	800205a <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8002056:	2320      	movs	r3, #32
 8002058:	e004      	b.n	8002064 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 800205a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800205e:	fab3 f383 	clz	r3, r3
 8002062:	b2db      	uxtb	r3, r3
 8002064:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800206e:	2b00      	cmp	r3, #0
 8002070:	d105      	bne.n	800207e <HAL_ADC_ConfigChannel+0x19e>
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	0e9b      	lsrs	r3, r3, #26
 8002078:	f003 031f 	and.w	r3, r3, #31
 800207c:	e018      	b.n	80020b0 <HAL_ADC_ConfigChannel+0x1d0>
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002086:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800208a:	fa93 f3a3 	rbit	r3, r3
 800208e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002092:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002096:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800209a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d101      	bne.n	80020a6 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 80020a2:	2320      	movs	r3, #32
 80020a4:	e004      	b.n	80020b0 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 80020a6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80020aa:	fab3 f383 	clz	r3, r3
 80020ae:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80020b0:	429a      	cmp	r2, r3
 80020b2:	d106      	bne.n	80020c2 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	2200      	movs	r2, #0
 80020ba:	2100      	movs	r1, #0
 80020bc:	4618      	mov	r0, r3
 80020be:	f7ff f86d 	bl	800119c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	2101      	movs	r1, #1
 80020c8:	4618      	mov	r0, r3
 80020ca:	f7ff f851 	bl	8001170 <LL_ADC_GetOffsetChannel>
 80020ce:	4603      	mov	r3, r0
 80020d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d10a      	bne.n	80020ee <HAL_ADC_ConfigChannel+0x20e>
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	2101      	movs	r1, #1
 80020de:	4618      	mov	r0, r3
 80020e0:	f7ff f846 	bl	8001170 <LL_ADC_GetOffsetChannel>
 80020e4:	4603      	mov	r3, r0
 80020e6:	0e9b      	lsrs	r3, r3, #26
 80020e8:	f003 021f 	and.w	r2, r3, #31
 80020ec:	e01e      	b.n	800212c <HAL_ADC_ConfigChannel+0x24c>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	2101      	movs	r1, #1
 80020f4:	4618      	mov	r0, r3
 80020f6:	f7ff f83b 	bl	8001170 <LL_ADC_GetOffsetChannel>
 80020fa:	4603      	mov	r3, r0
 80020fc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002100:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002104:	fa93 f3a3 	rbit	r3, r3
 8002108:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 800210c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002110:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002114:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002118:	2b00      	cmp	r3, #0
 800211a:	d101      	bne.n	8002120 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 800211c:	2320      	movs	r3, #32
 800211e:	e004      	b.n	800212a <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8002120:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002124:	fab3 f383 	clz	r3, r3
 8002128:	b2db      	uxtb	r3, r3
 800212a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002134:	2b00      	cmp	r3, #0
 8002136:	d105      	bne.n	8002144 <HAL_ADC_ConfigChannel+0x264>
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	0e9b      	lsrs	r3, r3, #26
 800213e:	f003 031f 	and.w	r3, r3, #31
 8002142:	e018      	b.n	8002176 <HAL_ADC_ConfigChannel+0x296>
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800214c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002150:	fa93 f3a3 	rbit	r3, r3
 8002154:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002158:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800215c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002160:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002164:	2b00      	cmp	r3, #0
 8002166:	d101      	bne.n	800216c <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8002168:	2320      	movs	r3, #32
 800216a:	e004      	b.n	8002176 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 800216c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002170:	fab3 f383 	clz	r3, r3
 8002174:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002176:	429a      	cmp	r2, r3
 8002178:	d106      	bne.n	8002188 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	2200      	movs	r2, #0
 8002180:	2101      	movs	r1, #1
 8002182:	4618      	mov	r0, r3
 8002184:	f7ff f80a 	bl	800119c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	2102      	movs	r1, #2
 800218e:	4618      	mov	r0, r3
 8002190:	f7fe ffee 	bl	8001170 <LL_ADC_GetOffsetChannel>
 8002194:	4603      	mov	r3, r0
 8002196:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800219a:	2b00      	cmp	r3, #0
 800219c:	d10a      	bne.n	80021b4 <HAL_ADC_ConfigChannel+0x2d4>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	2102      	movs	r1, #2
 80021a4:	4618      	mov	r0, r3
 80021a6:	f7fe ffe3 	bl	8001170 <LL_ADC_GetOffsetChannel>
 80021aa:	4603      	mov	r3, r0
 80021ac:	0e9b      	lsrs	r3, r3, #26
 80021ae:	f003 021f 	and.w	r2, r3, #31
 80021b2:	e01e      	b.n	80021f2 <HAL_ADC_ConfigChannel+0x312>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	2102      	movs	r1, #2
 80021ba:	4618      	mov	r0, r3
 80021bc:	f7fe ffd8 	bl	8001170 <LL_ADC_GetOffsetChannel>
 80021c0:	4603      	mov	r3, r0
 80021c2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80021ca:	fa93 f3a3 	rbit	r3, r3
 80021ce:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80021d2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80021d6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80021da:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d101      	bne.n	80021e6 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 80021e2:	2320      	movs	r3, #32
 80021e4:	e004      	b.n	80021f0 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 80021e6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80021ea:	fab3 f383 	clz	r3, r3
 80021ee:	b2db      	uxtb	r3, r3
 80021f0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d105      	bne.n	800220a <HAL_ADC_ConfigChannel+0x32a>
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	0e9b      	lsrs	r3, r3, #26
 8002204:	f003 031f 	and.w	r3, r3, #31
 8002208:	e016      	b.n	8002238 <HAL_ADC_ConfigChannel+0x358>
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002212:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002216:	fa93 f3a3 	rbit	r3, r3
 800221a:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800221c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800221e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002222:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002226:	2b00      	cmp	r3, #0
 8002228:	d101      	bne.n	800222e <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 800222a:	2320      	movs	r3, #32
 800222c:	e004      	b.n	8002238 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 800222e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002232:	fab3 f383 	clz	r3, r3
 8002236:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002238:	429a      	cmp	r2, r3
 800223a:	d106      	bne.n	800224a <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	2200      	movs	r2, #0
 8002242:	2102      	movs	r1, #2
 8002244:	4618      	mov	r0, r3
 8002246:	f7fe ffa9 	bl	800119c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	2103      	movs	r1, #3
 8002250:	4618      	mov	r0, r3
 8002252:	f7fe ff8d 	bl	8001170 <LL_ADC_GetOffsetChannel>
 8002256:	4603      	mov	r3, r0
 8002258:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800225c:	2b00      	cmp	r3, #0
 800225e:	d10a      	bne.n	8002276 <HAL_ADC_ConfigChannel+0x396>
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	2103      	movs	r1, #3
 8002266:	4618      	mov	r0, r3
 8002268:	f7fe ff82 	bl	8001170 <LL_ADC_GetOffsetChannel>
 800226c:	4603      	mov	r3, r0
 800226e:	0e9b      	lsrs	r3, r3, #26
 8002270:	f003 021f 	and.w	r2, r3, #31
 8002274:	e017      	b.n	80022a6 <HAL_ADC_ConfigChannel+0x3c6>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	2103      	movs	r1, #3
 800227c:	4618      	mov	r0, r3
 800227e:	f7fe ff77 	bl	8001170 <LL_ADC_GetOffsetChannel>
 8002282:	4603      	mov	r3, r0
 8002284:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002286:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002288:	fa93 f3a3 	rbit	r3, r3
 800228c:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800228e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002290:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002292:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002294:	2b00      	cmp	r3, #0
 8002296:	d101      	bne.n	800229c <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8002298:	2320      	movs	r3, #32
 800229a:	e003      	b.n	80022a4 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 800229c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800229e:	fab3 f383 	clz	r3, r3
 80022a2:	b2db      	uxtb	r3, r3
 80022a4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d105      	bne.n	80022be <HAL_ADC_ConfigChannel+0x3de>
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	0e9b      	lsrs	r3, r3, #26
 80022b8:	f003 031f 	and.w	r3, r3, #31
 80022bc:	e011      	b.n	80022e2 <HAL_ADC_ConfigChannel+0x402>
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022c4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80022c6:	fa93 f3a3 	rbit	r3, r3
 80022ca:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80022cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80022ce:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80022d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d101      	bne.n	80022da <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 80022d6:	2320      	movs	r3, #32
 80022d8:	e003      	b.n	80022e2 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 80022da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022dc:	fab3 f383 	clz	r3, r3
 80022e0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80022e2:	429a      	cmp	r2, r3
 80022e4:	d106      	bne.n	80022f4 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	2200      	movs	r2, #0
 80022ec:	2103      	movs	r1, #3
 80022ee:	4618      	mov	r0, r3
 80022f0:	f7fe ff54 	bl	800119c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4618      	mov	r0, r3
 80022fa:	f7ff f889 	bl	8001410 <LL_ADC_IsEnabled>
 80022fe:	4603      	mov	r3, r0
 8002300:	2b00      	cmp	r3, #0
 8002302:	f040 813f 	bne.w	8002584 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6818      	ldr	r0, [r3, #0]
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	6819      	ldr	r1, [r3, #0]
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	68db      	ldr	r3, [r3, #12]
 8002312:	461a      	mov	r2, r3
 8002314:	f7fe ffda 	bl	80012cc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	68db      	ldr	r3, [r3, #12]
 800231c:	4a8e      	ldr	r2, [pc, #568]	; (8002558 <HAL_ADC_ConfigChannel+0x678>)
 800231e:	4293      	cmp	r3, r2
 8002320:	f040 8130 	bne.w	8002584 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002330:	2b00      	cmp	r3, #0
 8002332:	d10b      	bne.n	800234c <HAL_ADC_ConfigChannel+0x46c>
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	0e9b      	lsrs	r3, r3, #26
 800233a:	3301      	adds	r3, #1
 800233c:	f003 031f 	and.w	r3, r3, #31
 8002340:	2b09      	cmp	r3, #9
 8002342:	bf94      	ite	ls
 8002344:	2301      	movls	r3, #1
 8002346:	2300      	movhi	r3, #0
 8002348:	b2db      	uxtb	r3, r3
 800234a:	e019      	b.n	8002380 <HAL_ADC_ConfigChannel+0x4a0>
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002352:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002354:	fa93 f3a3 	rbit	r3, r3
 8002358:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800235a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800235c:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800235e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002360:	2b00      	cmp	r3, #0
 8002362:	d101      	bne.n	8002368 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8002364:	2320      	movs	r3, #32
 8002366:	e003      	b.n	8002370 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8002368:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800236a:	fab3 f383 	clz	r3, r3
 800236e:	b2db      	uxtb	r3, r3
 8002370:	3301      	adds	r3, #1
 8002372:	f003 031f 	and.w	r3, r3, #31
 8002376:	2b09      	cmp	r3, #9
 8002378:	bf94      	ite	ls
 800237a:	2301      	movls	r3, #1
 800237c:	2300      	movhi	r3, #0
 800237e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002380:	2b00      	cmp	r3, #0
 8002382:	d079      	beq.n	8002478 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800238c:	2b00      	cmp	r3, #0
 800238e:	d107      	bne.n	80023a0 <HAL_ADC_ConfigChannel+0x4c0>
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	0e9b      	lsrs	r3, r3, #26
 8002396:	3301      	adds	r3, #1
 8002398:	069b      	lsls	r3, r3, #26
 800239a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800239e:	e015      	b.n	80023cc <HAL_ADC_ConfigChannel+0x4ec>
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80023a8:	fa93 f3a3 	rbit	r3, r3
 80023ac:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80023ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80023b0:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80023b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d101      	bne.n	80023bc <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 80023b8:	2320      	movs	r3, #32
 80023ba:	e003      	b.n	80023c4 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 80023bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023be:	fab3 f383 	clz	r3, r3
 80023c2:	b2db      	uxtb	r3, r3
 80023c4:	3301      	adds	r3, #1
 80023c6:	069b      	lsls	r3, r3, #26
 80023c8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d109      	bne.n	80023ec <HAL_ADC_ConfigChannel+0x50c>
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	0e9b      	lsrs	r3, r3, #26
 80023de:	3301      	adds	r3, #1
 80023e0:	f003 031f 	and.w	r3, r3, #31
 80023e4:	2101      	movs	r1, #1
 80023e6:	fa01 f303 	lsl.w	r3, r1, r3
 80023ea:	e017      	b.n	800241c <HAL_ADC_ConfigChannel+0x53c>
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80023f4:	fa93 f3a3 	rbit	r3, r3
 80023f8:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80023fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80023fc:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80023fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002400:	2b00      	cmp	r3, #0
 8002402:	d101      	bne.n	8002408 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8002404:	2320      	movs	r3, #32
 8002406:	e003      	b.n	8002410 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8002408:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800240a:	fab3 f383 	clz	r3, r3
 800240e:	b2db      	uxtb	r3, r3
 8002410:	3301      	adds	r3, #1
 8002412:	f003 031f 	and.w	r3, r3, #31
 8002416:	2101      	movs	r1, #1
 8002418:	fa01 f303 	lsl.w	r3, r1, r3
 800241c:	ea42 0103 	orr.w	r1, r2, r3
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002428:	2b00      	cmp	r3, #0
 800242a:	d10a      	bne.n	8002442 <HAL_ADC_ConfigChannel+0x562>
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	0e9b      	lsrs	r3, r3, #26
 8002432:	3301      	adds	r3, #1
 8002434:	f003 021f 	and.w	r2, r3, #31
 8002438:	4613      	mov	r3, r2
 800243a:	005b      	lsls	r3, r3, #1
 800243c:	4413      	add	r3, r2
 800243e:	051b      	lsls	r3, r3, #20
 8002440:	e018      	b.n	8002474 <HAL_ADC_ConfigChannel+0x594>
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002448:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800244a:	fa93 f3a3 	rbit	r3, r3
 800244e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002450:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002452:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002454:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002456:	2b00      	cmp	r3, #0
 8002458:	d101      	bne.n	800245e <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 800245a:	2320      	movs	r3, #32
 800245c:	e003      	b.n	8002466 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 800245e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002460:	fab3 f383 	clz	r3, r3
 8002464:	b2db      	uxtb	r3, r3
 8002466:	3301      	adds	r3, #1
 8002468:	f003 021f 	and.w	r2, r3, #31
 800246c:	4613      	mov	r3, r2
 800246e:	005b      	lsls	r3, r3, #1
 8002470:	4413      	add	r3, r2
 8002472:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002474:	430b      	orrs	r3, r1
 8002476:	e080      	b.n	800257a <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002480:	2b00      	cmp	r3, #0
 8002482:	d107      	bne.n	8002494 <HAL_ADC_ConfigChannel+0x5b4>
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	0e9b      	lsrs	r3, r3, #26
 800248a:	3301      	adds	r3, #1
 800248c:	069b      	lsls	r3, r3, #26
 800248e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002492:	e015      	b.n	80024c0 <HAL_ADC_ConfigChannel+0x5e0>
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800249a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800249c:	fa93 f3a3 	rbit	r3, r3
 80024a0:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80024a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024a4:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80024a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d101      	bne.n	80024b0 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 80024ac:	2320      	movs	r3, #32
 80024ae:	e003      	b.n	80024b8 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 80024b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024b2:	fab3 f383 	clz	r3, r3
 80024b6:	b2db      	uxtb	r3, r3
 80024b8:	3301      	adds	r3, #1
 80024ba:	069b      	lsls	r3, r3, #26
 80024bc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d109      	bne.n	80024e0 <HAL_ADC_ConfigChannel+0x600>
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	0e9b      	lsrs	r3, r3, #26
 80024d2:	3301      	adds	r3, #1
 80024d4:	f003 031f 	and.w	r3, r3, #31
 80024d8:	2101      	movs	r1, #1
 80024da:	fa01 f303 	lsl.w	r3, r1, r3
 80024de:	e017      	b.n	8002510 <HAL_ADC_ConfigChannel+0x630>
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024e6:	6a3b      	ldr	r3, [r7, #32]
 80024e8:	fa93 f3a3 	rbit	r3, r3
 80024ec:	61fb      	str	r3, [r7, #28]
  return result;
 80024ee:	69fb      	ldr	r3, [r7, #28]
 80024f0:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80024f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d101      	bne.n	80024fc <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 80024f8:	2320      	movs	r3, #32
 80024fa:	e003      	b.n	8002504 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 80024fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024fe:	fab3 f383 	clz	r3, r3
 8002502:	b2db      	uxtb	r3, r3
 8002504:	3301      	adds	r3, #1
 8002506:	f003 031f 	and.w	r3, r3, #31
 800250a:	2101      	movs	r1, #1
 800250c:	fa01 f303 	lsl.w	r3, r1, r3
 8002510:	ea42 0103 	orr.w	r1, r2, r3
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800251c:	2b00      	cmp	r3, #0
 800251e:	d10d      	bne.n	800253c <HAL_ADC_ConfigChannel+0x65c>
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	0e9b      	lsrs	r3, r3, #26
 8002526:	3301      	adds	r3, #1
 8002528:	f003 021f 	and.w	r2, r3, #31
 800252c:	4613      	mov	r3, r2
 800252e:	005b      	lsls	r3, r3, #1
 8002530:	4413      	add	r3, r2
 8002532:	3b1e      	subs	r3, #30
 8002534:	051b      	lsls	r3, r3, #20
 8002536:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800253a:	e01d      	b.n	8002578 <HAL_ADC_ConfigChannel+0x698>
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002542:	697b      	ldr	r3, [r7, #20]
 8002544:	fa93 f3a3 	rbit	r3, r3
 8002548:	613b      	str	r3, [r7, #16]
  return result;
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800254e:	69bb      	ldr	r3, [r7, #24]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d103      	bne.n	800255c <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8002554:	2320      	movs	r3, #32
 8002556:	e005      	b.n	8002564 <HAL_ADC_ConfigChannel+0x684>
 8002558:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800255c:	69bb      	ldr	r3, [r7, #24]
 800255e:	fab3 f383 	clz	r3, r3
 8002562:	b2db      	uxtb	r3, r3
 8002564:	3301      	adds	r3, #1
 8002566:	f003 021f 	and.w	r2, r3, #31
 800256a:	4613      	mov	r3, r2
 800256c:	005b      	lsls	r3, r3, #1
 800256e:	4413      	add	r3, r2
 8002570:	3b1e      	subs	r3, #30
 8002572:	051b      	lsls	r3, r3, #20
 8002574:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002578:	430b      	orrs	r3, r1
 800257a:	683a      	ldr	r2, [r7, #0]
 800257c:	6892      	ldr	r2, [r2, #8]
 800257e:	4619      	mov	r1, r3
 8002580:	f7fe fe79 	bl	8001276 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	681a      	ldr	r2, [r3, #0]
 8002588:	4b43      	ldr	r3, [pc, #268]	; (8002698 <HAL_ADC_ConfigChannel+0x7b8>)
 800258a:	4013      	ands	r3, r2
 800258c:	2b00      	cmp	r3, #0
 800258e:	d079      	beq.n	8002684 <HAL_ADC_ConfigChannel+0x7a4>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002590:	4842      	ldr	r0, [pc, #264]	; (800269c <HAL_ADC_ConfigChannel+0x7bc>)
 8002592:	f7fe fdbb 	bl	800110c <LL_ADC_GetCommonPathInternalCh>
 8002596:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4a40      	ldr	r2, [pc, #256]	; (80026a0 <HAL_ADC_ConfigChannel+0x7c0>)
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d12b      	bne.n	80025fc <HAL_ADC_ConfigChannel+0x71c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80025a4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80025a8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d125      	bne.n	80025fc <HAL_ADC_ConfigChannel+0x71c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a3b      	ldr	r2, [pc, #236]	; (80026a4 <HAL_ADC_ConfigChannel+0x7c4>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d004      	beq.n	80025c4 <HAL_ADC_ConfigChannel+0x6e4>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4a3a      	ldr	r2, [pc, #232]	; (80026a8 <HAL_ADC_ConfigChannel+0x7c8>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d15c      	bne.n	800267e <HAL_ADC_ConfigChannel+0x79e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80025c4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80025c8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80025cc:	4619      	mov	r1, r3
 80025ce:	4833      	ldr	r0, [pc, #204]	; (800269c <HAL_ADC_ConfigChannel+0x7bc>)
 80025d0:	f7fe fd89 	bl	80010e6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80025d4:	4b35      	ldr	r3, [pc, #212]	; (80026ac <HAL_ADC_ConfigChannel+0x7cc>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	099b      	lsrs	r3, r3, #6
 80025da:	4a35      	ldr	r2, [pc, #212]	; (80026b0 <HAL_ADC_ConfigChannel+0x7d0>)
 80025dc:	fba2 2303 	umull	r2, r3, r2, r3
 80025e0:	099a      	lsrs	r2, r3, #6
 80025e2:	4613      	mov	r3, r2
 80025e4:	005b      	lsls	r3, r3, #1
 80025e6:	4413      	add	r3, r2
 80025e8:	009b      	lsls	r3, r3, #2
 80025ea:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80025ec:	e002      	b.n	80025f4 <HAL_ADC_ConfigChannel+0x714>
          {
            wait_loop_index--;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	3b01      	subs	r3, #1
 80025f2:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d1f9      	bne.n	80025ee <HAL_ADC_ConfigChannel+0x70e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80025fa:	e040      	b.n	800267e <HAL_ADC_ConfigChannel+0x79e>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a2c      	ldr	r2, [pc, #176]	; (80026b4 <HAL_ADC_ConfigChannel+0x7d4>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d118      	bne.n	8002638 <HAL_ADC_ConfigChannel+0x758>
 8002606:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800260a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800260e:	2b00      	cmp	r3, #0
 8002610:	d112      	bne.n	8002638 <HAL_ADC_ConfigChannel+0x758>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4a23      	ldr	r2, [pc, #140]	; (80026a4 <HAL_ADC_ConfigChannel+0x7c4>)
 8002618:	4293      	cmp	r3, r2
 800261a:	d004      	beq.n	8002626 <HAL_ADC_ConfigChannel+0x746>
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a21      	ldr	r2, [pc, #132]	; (80026a8 <HAL_ADC_ConfigChannel+0x7c8>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d12d      	bne.n	8002682 <HAL_ADC_ConfigChannel+0x7a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002626:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800262a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800262e:	4619      	mov	r1, r3
 8002630:	481a      	ldr	r0, [pc, #104]	; (800269c <HAL_ADC_ConfigChannel+0x7bc>)
 8002632:	f7fe fd58 	bl	80010e6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002636:	e024      	b.n	8002682 <HAL_ADC_ConfigChannel+0x7a2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a1e      	ldr	r2, [pc, #120]	; (80026b8 <HAL_ADC_ConfigChannel+0x7d8>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d120      	bne.n	8002684 <HAL_ADC_ConfigChannel+0x7a4>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002642:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002646:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800264a:	2b00      	cmp	r3, #0
 800264c:	d11a      	bne.n	8002684 <HAL_ADC_ConfigChannel+0x7a4>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a14      	ldr	r2, [pc, #80]	; (80026a4 <HAL_ADC_ConfigChannel+0x7c4>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d115      	bne.n	8002684 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002658:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800265c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002660:	4619      	mov	r1, r3
 8002662:	480e      	ldr	r0, [pc, #56]	; (800269c <HAL_ADC_ConfigChannel+0x7bc>)
 8002664:	f7fe fd3f 	bl	80010e6 <LL_ADC_SetCommonPathInternalCh>
 8002668:	e00c      	b.n	8002684 <HAL_ADC_ConfigChannel+0x7a4>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800266e:	f043 0220 	orr.w	r2, r3, #32
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002676:	2301      	movs	r3, #1
 8002678:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 800267c:	e002      	b.n	8002684 <HAL_ADC_ConfigChannel+0x7a4>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800267e:	bf00      	nop
 8002680:	e000      	b.n	8002684 <HAL_ADC_ConfigChannel+0x7a4>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002682:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2200      	movs	r2, #0
 8002688:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800268c:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002690:	4618      	mov	r0, r3
 8002692:	37d8      	adds	r7, #216	; 0xd8
 8002694:	46bd      	mov	sp, r7
 8002696:	bd80      	pop	{r7, pc}
 8002698:	80080000 	.word	0x80080000
 800269c:	50040300 	.word	0x50040300
 80026a0:	c7520000 	.word	0xc7520000
 80026a4:	50040000 	.word	0x50040000
 80026a8:	50040200 	.word	0x50040200
 80026ac:	20000010 	.word	0x20000010
 80026b0:	053e2d63 	.word	0x053e2d63
 80026b4:	cb840000 	.word	0xcb840000
 80026b8:	80000001 	.word	0x80000001

080026bc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b084      	sub	sp, #16
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4618      	mov	r0, r3
 80026ca:	f7fe fea1 	bl	8001410 <LL_ADC_IsEnabled>
 80026ce:	4603      	mov	r3, r0
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d146      	bne.n	8002762 <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	689a      	ldr	r2, [r3, #8]
 80026da:	4b24      	ldr	r3, [pc, #144]	; (800276c <ADC_Enable+0xb0>)
 80026dc:	4013      	ands	r3, r2
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d00d      	beq.n	80026fe <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026e6:	f043 0210 	orr.w	r2, r3, #16
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026f2:	f043 0201 	orr.w	r2, r3, #1
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80026fa:	2301      	movs	r3, #1
 80026fc:	e032      	b.n	8002764 <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4618      	mov	r0, r3
 8002704:	f7fe fe70 	bl	80013e8 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002708:	f7fe fcac 	bl	8001064 <HAL_GetTick>
 800270c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800270e:	e021      	b.n	8002754 <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4618      	mov	r0, r3
 8002716:	f7fe fe7b 	bl	8001410 <LL_ADC_IsEnabled>
 800271a:	4603      	mov	r3, r0
 800271c:	2b00      	cmp	r3, #0
 800271e:	d104      	bne.n	800272a <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4618      	mov	r0, r3
 8002726:	f7fe fe5f 	bl	80013e8 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800272a:	f7fe fc9b 	bl	8001064 <HAL_GetTick>
 800272e:	4602      	mov	r2, r0
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	1ad3      	subs	r3, r2, r3
 8002734:	2b02      	cmp	r3, #2
 8002736:	d90d      	bls.n	8002754 <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800273c:	f043 0210 	orr.w	r2, r3, #16
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002748:	f043 0201 	orr.w	r2, r3, #1
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8002750:	2301      	movs	r3, #1
 8002752:	e007      	b.n	8002764 <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f003 0301 	and.w	r3, r3, #1
 800275e:	2b01      	cmp	r3, #1
 8002760:	d1d6      	bne.n	8002710 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002762:	2300      	movs	r3, #0
}
 8002764:	4618      	mov	r0, r3
 8002766:	3710      	adds	r7, #16
 8002768:	46bd      	mov	sp, r7
 800276a:	bd80      	pop	{r7, pc}
 800276c:	8000003f 	.word	0x8000003f

08002770 <LL_ADC_IsEnabled>:
{
 8002770:	b480      	push	{r7}
 8002772:	b083      	sub	sp, #12
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	689b      	ldr	r3, [r3, #8]
 800277c:	f003 0301 	and.w	r3, r3, #1
 8002780:	2b01      	cmp	r3, #1
 8002782:	d101      	bne.n	8002788 <LL_ADC_IsEnabled+0x18>
 8002784:	2301      	movs	r3, #1
 8002786:	e000      	b.n	800278a <LL_ADC_IsEnabled+0x1a>
 8002788:	2300      	movs	r3, #0
}
 800278a:	4618      	mov	r0, r3
 800278c:	370c      	adds	r7, #12
 800278e:	46bd      	mov	sp, r7
 8002790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002794:	4770      	bx	lr

08002796 <LL_ADC_REG_IsConversionOngoing>:
{
 8002796:	b480      	push	{r7}
 8002798:	b083      	sub	sp, #12
 800279a:	af00      	add	r7, sp, #0
 800279c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	689b      	ldr	r3, [r3, #8]
 80027a2:	f003 0304 	and.w	r3, r3, #4
 80027a6:	2b04      	cmp	r3, #4
 80027a8:	d101      	bne.n	80027ae <LL_ADC_REG_IsConversionOngoing+0x18>
 80027aa:	2301      	movs	r3, #1
 80027ac:	e000      	b.n	80027b0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80027ae:	2300      	movs	r3, #0
}
 80027b0:	4618      	mov	r0, r3
 80027b2:	370c      	adds	r7, #12
 80027b4:	46bd      	mov	sp, r7
 80027b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ba:	4770      	bx	lr

080027bc <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80027bc:	b480      	push	{r7}
 80027be:	b083      	sub	sp, #12
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80027c4:	bf00      	nop
 80027c6:	370c      	adds	r7, #12
 80027c8:	46bd      	mov	sp, r7
 80027ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ce:	4770      	bx	lr

080027d0 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80027d0:	b480      	push	{r7}
 80027d2:	b083      	sub	sp, #12
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80027d8:	bf00      	nop
 80027da:	370c      	adds	r7, #12
 80027dc:	46bd      	mov	sp, r7
 80027de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e2:	4770      	bx	lr

080027e4 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b083      	sub	sp, #12
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80027ec:	bf00      	nop
 80027ee:	370c      	adds	r7, #12
 80027f0:	46bd      	mov	sp, r7
 80027f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f6:	4770      	bx	lr

080027f8 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80027f8:	b480      	push	{r7}
 80027fa:	b083      	sub	sp, #12
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8002800:	bf00      	nop
 8002802:	370c      	adds	r7, #12
 8002804:	46bd      	mov	sp, r7
 8002806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280a:	4770      	bx	lr

0800280c <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 800280c:	b480      	push	{r7}
 800280e:	b083      	sub	sp, #12
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8002814:	bf00      	nop
 8002816:	370c      	adds	r7, #12
 8002818:	46bd      	mov	sp, r7
 800281a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281e:	4770      	bx	lr

08002820 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002820:	b590      	push	{r4, r7, lr}
 8002822:	b09f      	sub	sp, #124	; 0x7c
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
 8002828:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800282a:	2300      	movs	r3, #0
 800282c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002836:	2b01      	cmp	r3, #1
 8002838:	d101      	bne.n	800283e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800283a:	2302      	movs	r3, #2
 800283c:	e08f      	b.n	800295e <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2201      	movs	r2, #1
 8002842:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4a47      	ldr	r2, [pc, #284]	; (8002968 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d102      	bne.n	8002856 <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8002850:	4b46      	ldr	r3, [pc, #280]	; (800296c <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8002852:	60bb      	str	r3, [r7, #8]
 8002854:	e001      	b.n	800285a <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 8002856:	2300      	movs	r3, #0
 8002858:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800285a:	68bb      	ldr	r3, [r7, #8]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d10b      	bne.n	8002878 <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002864:	f043 0220 	orr.w	r2, r3, #32
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2200      	movs	r2, #0
 8002870:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8002874:	2301      	movs	r3, #1
 8002876:	e072      	b.n	800295e <HAL_ADCEx_MultiModeConfigChannel+0x13e>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	4618      	mov	r0, r3
 800287c:	f7ff ff8b 	bl	8002796 <LL_ADC_REG_IsConversionOngoing>
 8002880:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4618      	mov	r0, r3
 8002888:	f7ff ff85 	bl	8002796 <LL_ADC_REG_IsConversionOngoing>
 800288c:	4603      	mov	r3, r0
 800288e:	2b00      	cmp	r3, #0
 8002890:	d154      	bne.n	800293c <HAL_ADCEx_MultiModeConfigChannel+0x11c>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002892:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002894:	2b00      	cmp	r3, #0
 8002896:	d151      	bne.n	800293c <HAL_ADCEx_MultiModeConfigChannel+0x11c>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002898:	4b35      	ldr	r3, [pc, #212]	; (8002970 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800289a:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d02c      	beq.n	80028fe <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80028a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028a6:	689b      	ldr	r3, [r3, #8]
 80028a8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	6859      	ldr	r1, [r3, #4]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80028b6:	035b      	lsls	r3, r3, #13
 80028b8:	430b      	orrs	r3, r1
 80028ba:	431a      	orrs	r2, r3
 80028bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028be:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80028c0:	4829      	ldr	r0, [pc, #164]	; (8002968 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 80028c2:	f7ff ff55 	bl	8002770 <LL_ADC_IsEnabled>
 80028c6:	4604      	mov	r4, r0
 80028c8:	4828      	ldr	r0, [pc, #160]	; (800296c <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 80028ca:	f7ff ff51 	bl	8002770 <LL_ADC_IsEnabled>
 80028ce:	4603      	mov	r3, r0
 80028d0:	431c      	orrs	r4, r3
 80028d2:	4828      	ldr	r0, [pc, #160]	; (8002974 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80028d4:	f7ff ff4c 	bl	8002770 <LL_ADC_IsEnabled>
 80028d8:	4603      	mov	r3, r0
 80028da:	4323      	orrs	r3, r4
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d137      	bne.n	8002950 <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80028e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028e2:	689b      	ldr	r3, [r3, #8]
 80028e4:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80028e8:	f023 030f 	bic.w	r3, r3, #15
 80028ec:	683a      	ldr	r2, [r7, #0]
 80028ee:	6811      	ldr	r1, [r2, #0]
 80028f0:	683a      	ldr	r2, [r7, #0]
 80028f2:	6892      	ldr	r2, [r2, #8]
 80028f4:	430a      	orrs	r2, r1
 80028f6:	431a      	orrs	r2, r3
 80028f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028fa:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80028fc:	e028      	b.n	8002950 <HAL_ADCEx_MultiModeConfigChannel+0x130>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80028fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002900:	689b      	ldr	r3, [r3, #8]
 8002902:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002906:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002908:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800290a:	4817      	ldr	r0, [pc, #92]	; (8002968 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 800290c:	f7ff ff30 	bl	8002770 <LL_ADC_IsEnabled>
 8002910:	4604      	mov	r4, r0
 8002912:	4816      	ldr	r0, [pc, #88]	; (800296c <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8002914:	f7ff ff2c 	bl	8002770 <LL_ADC_IsEnabled>
 8002918:	4603      	mov	r3, r0
 800291a:	431c      	orrs	r4, r3
 800291c:	4815      	ldr	r0, [pc, #84]	; (8002974 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800291e:	f7ff ff27 	bl	8002770 <LL_ADC_IsEnabled>
 8002922:	4603      	mov	r3, r0
 8002924:	4323      	orrs	r3, r4
 8002926:	2b00      	cmp	r3, #0
 8002928:	d112      	bne.n	8002950 <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800292a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800292c:	689b      	ldr	r3, [r3, #8]
 800292e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002932:	f023 030f 	bic.w	r3, r3, #15
 8002936:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002938:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800293a:	e009      	b.n	8002950 <HAL_ADCEx_MultiModeConfigChannel+0x130>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002940:	f043 0220 	orr.w	r2, r3, #32
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002948:	2301      	movs	r3, #1
 800294a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800294e:	e000      	b.n	8002952 <HAL_ADCEx_MultiModeConfigChannel+0x132>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002950:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2200      	movs	r2, #0
 8002956:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800295a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 800295e:	4618      	mov	r0, r3
 8002960:	377c      	adds	r7, #124	; 0x7c
 8002962:	46bd      	mov	sp, r7
 8002964:	bd90      	pop	{r4, r7, pc}
 8002966:	bf00      	nop
 8002968:	50040000 	.word	0x50040000
 800296c:	50040100 	.word	0x50040100
 8002970:	50040300 	.word	0x50040300
 8002974:	50040200 	.word	0x50040200

08002978 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002978:	b480      	push	{r7}
 800297a:	b085      	sub	sp, #20
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	f003 0307 	and.w	r3, r3, #7
 8002986:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002988:	4b0c      	ldr	r3, [pc, #48]	; (80029bc <__NVIC_SetPriorityGrouping+0x44>)
 800298a:	68db      	ldr	r3, [r3, #12]
 800298c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800298e:	68ba      	ldr	r2, [r7, #8]
 8002990:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002994:	4013      	ands	r3, r2
 8002996:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80029a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80029a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80029aa:	4a04      	ldr	r2, [pc, #16]	; (80029bc <__NVIC_SetPriorityGrouping+0x44>)
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	60d3      	str	r3, [r2, #12]
}
 80029b0:	bf00      	nop
 80029b2:	3714      	adds	r7, #20
 80029b4:	46bd      	mov	sp, r7
 80029b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ba:	4770      	bx	lr
 80029bc:	e000ed00 	.word	0xe000ed00

080029c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80029c0:	b480      	push	{r7}
 80029c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80029c4:	4b04      	ldr	r3, [pc, #16]	; (80029d8 <__NVIC_GetPriorityGrouping+0x18>)
 80029c6:	68db      	ldr	r3, [r3, #12]
 80029c8:	0a1b      	lsrs	r3, r3, #8
 80029ca:	f003 0307 	and.w	r3, r3, #7
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	46bd      	mov	sp, r7
 80029d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d6:	4770      	bx	lr
 80029d8:	e000ed00 	.word	0xe000ed00

080029dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029dc:	b480      	push	{r7}
 80029de:	b083      	sub	sp, #12
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	4603      	mov	r3, r0
 80029e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	db0b      	blt.n	8002a06 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029ee:	79fb      	ldrb	r3, [r7, #7]
 80029f0:	f003 021f 	and.w	r2, r3, #31
 80029f4:	4907      	ldr	r1, [pc, #28]	; (8002a14 <__NVIC_EnableIRQ+0x38>)
 80029f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029fa:	095b      	lsrs	r3, r3, #5
 80029fc:	2001      	movs	r0, #1
 80029fe:	fa00 f202 	lsl.w	r2, r0, r2
 8002a02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002a06:	bf00      	nop
 8002a08:	370c      	adds	r7, #12
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a10:	4770      	bx	lr
 8002a12:	bf00      	nop
 8002a14:	e000e100 	.word	0xe000e100

08002a18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b083      	sub	sp, #12
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	4603      	mov	r3, r0
 8002a20:	6039      	str	r1, [r7, #0]
 8002a22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	db0a      	blt.n	8002a42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	b2da      	uxtb	r2, r3
 8002a30:	490c      	ldr	r1, [pc, #48]	; (8002a64 <__NVIC_SetPriority+0x4c>)
 8002a32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a36:	0112      	lsls	r2, r2, #4
 8002a38:	b2d2      	uxtb	r2, r2
 8002a3a:	440b      	add	r3, r1
 8002a3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a40:	e00a      	b.n	8002a58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	b2da      	uxtb	r2, r3
 8002a46:	4908      	ldr	r1, [pc, #32]	; (8002a68 <__NVIC_SetPriority+0x50>)
 8002a48:	79fb      	ldrb	r3, [r7, #7]
 8002a4a:	f003 030f 	and.w	r3, r3, #15
 8002a4e:	3b04      	subs	r3, #4
 8002a50:	0112      	lsls	r2, r2, #4
 8002a52:	b2d2      	uxtb	r2, r2
 8002a54:	440b      	add	r3, r1
 8002a56:	761a      	strb	r2, [r3, #24]
}
 8002a58:	bf00      	nop
 8002a5a:	370c      	adds	r7, #12
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a62:	4770      	bx	lr
 8002a64:	e000e100 	.word	0xe000e100
 8002a68:	e000ed00 	.word	0xe000ed00

08002a6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b089      	sub	sp, #36	; 0x24
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	60f8      	str	r0, [r7, #12]
 8002a74:	60b9      	str	r1, [r7, #8]
 8002a76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	f003 0307 	and.w	r3, r3, #7
 8002a7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a80:	69fb      	ldr	r3, [r7, #28]
 8002a82:	f1c3 0307 	rsb	r3, r3, #7
 8002a86:	2b04      	cmp	r3, #4
 8002a88:	bf28      	it	cs
 8002a8a:	2304      	movcs	r3, #4
 8002a8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a8e:	69fb      	ldr	r3, [r7, #28]
 8002a90:	3304      	adds	r3, #4
 8002a92:	2b06      	cmp	r3, #6
 8002a94:	d902      	bls.n	8002a9c <NVIC_EncodePriority+0x30>
 8002a96:	69fb      	ldr	r3, [r7, #28]
 8002a98:	3b03      	subs	r3, #3
 8002a9a:	e000      	b.n	8002a9e <NVIC_EncodePriority+0x32>
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002aa0:	f04f 32ff 	mov.w	r2, #4294967295
 8002aa4:	69bb      	ldr	r3, [r7, #24]
 8002aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aaa:	43da      	mvns	r2, r3
 8002aac:	68bb      	ldr	r3, [r7, #8]
 8002aae:	401a      	ands	r2, r3
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ab4:	f04f 31ff 	mov.w	r1, #4294967295
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	fa01 f303 	lsl.w	r3, r1, r3
 8002abe:	43d9      	mvns	r1, r3
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ac4:	4313      	orrs	r3, r2
         );
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	3724      	adds	r7, #36	; 0x24
 8002aca:	46bd      	mov	sp, r7
 8002acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad0:	4770      	bx	lr
	...

08002ad4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b082      	sub	sp, #8
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	3b01      	subs	r3, #1
 8002ae0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ae4:	d301      	bcc.n	8002aea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	e00f      	b.n	8002b0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002aea:	4a0a      	ldr	r2, [pc, #40]	; (8002b14 <SysTick_Config+0x40>)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	3b01      	subs	r3, #1
 8002af0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002af2:	210f      	movs	r1, #15
 8002af4:	f04f 30ff 	mov.w	r0, #4294967295
 8002af8:	f7ff ff8e 	bl	8002a18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002afc:	4b05      	ldr	r3, [pc, #20]	; (8002b14 <SysTick_Config+0x40>)
 8002afe:	2200      	movs	r2, #0
 8002b00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b02:	4b04      	ldr	r3, [pc, #16]	; (8002b14 <SysTick_Config+0x40>)
 8002b04:	2207      	movs	r2, #7
 8002b06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b08:	2300      	movs	r3, #0
}
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	3708      	adds	r7, #8
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}
 8002b12:	bf00      	nop
 8002b14:	e000e010 	.word	0xe000e010

08002b18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b082      	sub	sp, #8
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b20:	6878      	ldr	r0, [r7, #4]
 8002b22:	f7ff ff29 	bl	8002978 <__NVIC_SetPriorityGrouping>
}
 8002b26:	bf00      	nop
 8002b28:	3708      	adds	r7, #8
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}

08002b2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b2e:	b580      	push	{r7, lr}
 8002b30:	b086      	sub	sp, #24
 8002b32:	af00      	add	r7, sp, #0
 8002b34:	4603      	mov	r3, r0
 8002b36:	60b9      	str	r1, [r7, #8]
 8002b38:	607a      	str	r2, [r7, #4]
 8002b3a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002b40:	f7ff ff3e 	bl	80029c0 <__NVIC_GetPriorityGrouping>
 8002b44:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b46:	687a      	ldr	r2, [r7, #4]
 8002b48:	68b9      	ldr	r1, [r7, #8]
 8002b4a:	6978      	ldr	r0, [r7, #20]
 8002b4c:	f7ff ff8e 	bl	8002a6c <NVIC_EncodePriority>
 8002b50:	4602      	mov	r2, r0
 8002b52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b56:	4611      	mov	r1, r2
 8002b58:	4618      	mov	r0, r3
 8002b5a:	f7ff ff5d 	bl	8002a18 <__NVIC_SetPriority>
}
 8002b5e:	bf00      	nop
 8002b60:	3718      	adds	r7, #24
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}

08002b66 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b66:	b580      	push	{r7, lr}
 8002b68:	b082      	sub	sp, #8
 8002b6a:	af00      	add	r7, sp, #0
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b74:	4618      	mov	r0, r3
 8002b76:	f7ff ff31 	bl	80029dc <__NVIC_EnableIRQ>
}
 8002b7a:	bf00      	nop
 8002b7c:	3708      	adds	r7, #8
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}

08002b82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b82:	b580      	push	{r7, lr}
 8002b84:	b082      	sub	sp, #8
 8002b86:	af00      	add	r7, sp, #0
 8002b88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b8a:	6878      	ldr	r0, [r7, #4]
 8002b8c:	f7ff ffa2 	bl	8002ad4 <SysTick_Config>
 8002b90:	4603      	mov	r3, r0
}
 8002b92:	4618      	mov	r0, r3
 8002b94:	3708      	adds	r7, #8
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}

08002b9a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002b9a:	b580      	push	{r7, lr}
 8002b9c:	b082      	sub	sp, #8
 8002b9e:	af00      	add	r7, sp, #0
 8002ba0:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d101      	bne.n	8002bac <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8002ba8:	2301      	movs	r3, #1
 8002baa:	e014      	b.n	8002bd6 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	791b      	ldrb	r3, [r3, #4]
 8002bb0:	b2db      	uxtb	r3, r3
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d105      	bne.n	8002bc2 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2200      	movs	r2, #0
 8002bba:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002bbc:	6878      	ldr	r0, [r7, #4]
 8002bbe:	f7fd fdc7 	bl	8000750 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2202      	movs	r2, #2
 8002bc6:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2201      	movs	r2, #1
 8002bd2:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002bd4:	2300      	movs	r3, #0
}
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	3708      	adds	r7, #8
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}
	...

08002be0 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b086      	sub	sp, #24
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	60f8      	str	r0, [r7, #12]
 8002be8:	60b9      	str	r1, [r7, #8]
 8002bea:	607a      	str	r2, [r7, #4]
 8002bec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	795b      	ldrb	r3, [r3, #5]
 8002bf6:	2b01      	cmp	r3, #1
 8002bf8:	d101      	bne.n	8002bfe <HAL_DAC_Start_DMA+0x1e>
 8002bfa:	2302      	movs	r3, #2
 8002bfc:	e09e      	b.n	8002d3c <HAL_DAC_Start_DMA+0x15c>
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	2201      	movs	r2, #1
 8002c02:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	2202      	movs	r2, #2
 8002c08:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d12a      	bne.n	8002c66 <HAL_DAC_Start_DMA+0x86>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	4a4b      	ldr	r2, [pc, #300]	; (8002d44 <HAL_DAC_Start_DMA+0x164>)
 8002c16:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	689b      	ldr	r3, [r3, #8]
 8002c1c:	4a4a      	ldr	r2, [pc, #296]	; (8002d48 <HAL_DAC_Start_DMA+0x168>)
 8002c1e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	689b      	ldr	r3, [r3, #8]
 8002c24:	4a49      	ldr	r2, [pc, #292]	; (8002d4c <HAL_DAC_Start_DMA+0x16c>)
 8002c26:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	681a      	ldr	r2, [r3, #0]
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002c36:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8002c38:	6a3b      	ldr	r3, [r7, #32]
 8002c3a:	2b04      	cmp	r3, #4
 8002c3c:	d009      	beq.n	8002c52 <HAL_DAC_Start_DMA+0x72>
 8002c3e:	2b08      	cmp	r3, #8
 8002c40:	d00c      	beq.n	8002c5c <HAL_DAC_Start_DMA+0x7c>
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d000      	beq.n	8002c48 <HAL_DAC_Start_DMA+0x68>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8002c46:	e039      	b.n	8002cbc <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	3308      	adds	r3, #8
 8002c4e:	613b      	str	r3, [r7, #16]
        break;
 8002c50:	e034      	b.n	8002cbc <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	330c      	adds	r3, #12
 8002c58:	613b      	str	r3, [r7, #16]
        break;
 8002c5a:	e02f      	b.n	8002cbc <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	3310      	adds	r3, #16
 8002c62:	613b      	str	r3, [r7, #16]
        break;
 8002c64:	e02a      	b.n	8002cbc <HAL_DAC_Start_DMA+0xdc>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	68db      	ldr	r3, [r3, #12]
 8002c6a:	4a39      	ldr	r2, [pc, #228]	; (8002d50 <HAL_DAC_Start_DMA+0x170>)
 8002c6c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	68db      	ldr	r3, [r3, #12]
 8002c72:	4a38      	ldr	r2, [pc, #224]	; (8002d54 <HAL_DAC_Start_DMA+0x174>)
 8002c74:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	68db      	ldr	r3, [r3, #12]
 8002c7a:	4a37      	ldr	r2, [pc, #220]	; (8002d58 <HAL_DAC_Start_DMA+0x178>)
 8002c7c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	681a      	ldr	r2, [r3, #0]
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002c8c:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8002c8e:	6a3b      	ldr	r3, [r7, #32]
 8002c90:	2b04      	cmp	r3, #4
 8002c92:	d009      	beq.n	8002ca8 <HAL_DAC_Start_DMA+0xc8>
 8002c94:	2b08      	cmp	r3, #8
 8002c96:	d00c      	beq.n	8002cb2 <HAL_DAC_Start_DMA+0xd2>
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d000      	beq.n	8002c9e <HAL_DAC_Start_DMA+0xbe>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8002c9c:	e00e      	b.n	8002cbc <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	3314      	adds	r3, #20
 8002ca4:	613b      	str	r3, [r7, #16]
        break;
 8002ca6:	e009      	b.n	8002cbc <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	3318      	adds	r3, #24
 8002cae:	613b      	str	r3, [r7, #16]
        break;
 8002cb0:	e004      	b.n	8002cbc <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	331c      	adds	r3, #28
 8002cb8:	613b      	str	r3, [r7, #16]
        break;
 8002cba:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 8002cbc:	68bb      	ldr	r3, [r7, #8]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d111      	bne.n	8002ce6 <HAL_DAC_Start_DMA+0x106>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	681a      	ldr	r2, [r3, #0]
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002cd0:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	6898      	ldr	r0, [r3, #8]
 8002cd6:	6879      	ldr	r1, [r7, #4]
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	693a      	ldr	r2, [r7, #16]
 8002cdc:	f000 fade 	bl	800329c <HAL_DMA_Start_IT>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	75fb      	strb	r3, [r7, #23]
 8002ce4:	e010      	b.n	8002d08 <HAL_DAC_Start_DMA+0x128>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	681a      	ldr	r2, [r3, #0]
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002cf4:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	68d8      	ldr	r0, [r3, #12]
 8002cfa:	6879      	ldr	r1, [r7, #4]
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	693a      	ldr	r2, [r7, #16]
 8002d00:	f000 facc 	bl	800329c <HAL_DMA_Start_IT>
 8002d04:	4603      	mov	r3, r0
 8002d06:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8002d0e:	7dfb      	ldrb	r3, [r7, #23]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d10c      	bne.n	8002d2e <HAL_DAC_Start_DMA+0x14e>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	6819      	ldr	r1, [r3, #0]
 8002d1a:	68bb      	ldr	r3, [r7, #8]
 8002d1c:	f003 0310 	and.w	r3, r3, #16
 8002d20:	2201      	movs	r2, #1
 8002d22:	409a      	lsls	r2, r3
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	430a      	orrs	r2, r1
 8002d2a:	601a      	str	r2, [r3, #0]
 8002d2c:	e005      	b.n	8002d3a <HAL_DAC_Start_DMA+0x15a>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	691b      	ldr	r3, [r3, #16]
 8002d32:	f043 0204 	orr.w	r2, r3, #4
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8002d3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	3718      	adds	r7, #24
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bd80      	pop	{r7, pc}
 8002d44:	08003017 	.word	0x08003017
 8002d48:	08003039 	.word	0x08003039
 8002d4c:	08003055 	.word	0x08003055
 8002d50:	080030bf 	.word	0x080030bf
 8002d54:	080030e1 	.word	0x080030e1
 8002d58:	080030fd 	.word	0x080030fd

08002d5c <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b087      	sub	sp, #28
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	60f8      	str	r0, [r7, #12]
 8002d64:	60b9      	str	r1, [r7, #8]
 8002d66:	607a      	str	r2, [r7, #4]
 8002d68:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d105      	bne.n	8002d86 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8002d7a:	697a      	ldr	r2, [r7, #20]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	4413      	add	r3, r2
 8002d80:	3308      	adds	r3, #8
 8002d82:	617b      	str	r3, [r7, #20]
 8002d84:	e004      	b.n	8002d90 <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8002d86:	697a      	ldr	r2, [r7, #20]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	4413      	add	r3, r2
 8002d8c:	3314      	adds	r3, #20
 8002d8e:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8002d90:	697b      	ldr	r3, [r7, #20]
 8002d92:	461a      	mov	r2, r3
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8002d98:	2300      	movs	r3, #0
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	371c      	adds	r7, #28
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da4:	4770      	bx	lr

08002da6 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002da6:	b480      	push	{r7}
 8002da8:	b083      	sub	sp, #12
 8002daa:	af00      	add	r7, sp, #0
 8002dac:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8002dae:	bf00      	nop
 8002db0:	370c      	adds	r7, #12
 8002db2:	46bd      	mov	sp, r7
 8002db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db8:	4770      	bx	lr

08002dba <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002dba:	b480      	push	{r7}
 8002dbc:	b083      	sub	sp, #12
 8002dbe:	af00      	add	r7, sp, #0
 8002dc0:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8002dc2:	bf00      	nop
 8002dc4:	370c      	adds	r7, #12
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dcc:	4770      	bx	lr

08002dce <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002dce:	b480      	push	{r7}
 8002dd0:	b083      	sub	sp, #12
 8002dd2:	af00      	add	r7, sp, #0
 8002dd4:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8002dd6:	bf00      	nop
 8002dd8:	370c      	adds	r7, #12
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de0:	4770      	bx	lr

08002de2 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002de2:	b580      	push	{r7, lr}
 8002de4:	b088      	sub	sp, #32
 8002de6:	af00      	add	r7, sp, #0
 8002de8:	60f8      	str	r0, [r7, #12]
 8002dea:	60b9      	str	r1, [r7, #8]
 8002dec:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8002dee:	2300      	movs	r3, #0
 8002df0:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	795b      	ldrb	r3, [r3, #5]
 8002df6:	2b01      	cmp	r3, #1
 8002df8:	d101      	bne.n	8002dfe <HAL_DAC_ConfigChannel+0x1c>
 8002dfa:	2302      	movs	r3, #2
 8002dfc:	e107      	b.n	800300e <HAL_DAC_ConfigChannel+0x22c>
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	2201      	movs	r2, #1
 8002e02:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	2202      	movs	r2, #2
 8002e08:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	2b04      	cmp	r3, #4
 8002e10:	d174      	bne.n	8002efc <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8002e12:	f7fe f927 	bl	8001064 <HAL_GetTick>
 8002e16:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d134      	bne.n	8002e88 <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002e1e:	e011      	b.n	8002e44 <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002e20:	f7fe f920 	bl	8001064 <HAL_GetTick>
 8002e24:	4602      	mov	r2, r0
 8002e26:	69fb      	ldr	r3, [r7, #28]
 8002e28:	1ad3      	subs	r3, r2, r3
 8002e2a:	2b01      	cmp	r3, #1
 8002e2c:	d90a      	bls.n	8002e44 <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	691b      	ldr	r3, [r3, #16]
 8002e32:	f043 0208 	orr.w	r2, r3, #8
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	2203      	movs	r2, #3
 8002e3e:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8002e40:	2303      	movs	r3, #3
 8002e42:	e0e4      	b.n	800300e <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e4a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d1e6      	bne.n	8002e20 <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 8002e52:	2001      	movs	r0, #1
 8002e54:	f7fe f912 	bl	800107c <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	68ba      	ldr	r2, [r7, #8]
 8002e5e:	6992      	ldr	r2, [r2, #24]
 8002e60:	641a      	str	r2, [r3, #64]	; 0x40
 8002e62:	e01e      	b.n	8002ea2 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002e64:	f7fe f8fe 	bl	8001064 <HAL_GetTick>
 8002e68:	4602      	mov	r2, r0
 8002e6a:	69fb      	ldr	r3, [r7, #28]
 8002e6c:	1ad3      	subs	r3, r2, r3
 8002e6e:	2b01      	cmp	r3, #1
 8002e70:	d90a      	bls.n	8002e88 <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	691b      	ldr	r3, [r3, #16]
 8002e76:	f043 0208 	orr.w	r2, r3, #8
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	2203      	movs	r2, #3
 8002e82:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8002e84:	2303      	movs	r3, #3
 8002e86:	e0c2      	b.n	800300e <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	dbe8      	blt.n	8002e64 <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 8002e92:	2001      	movs	r0, #1
 8002e94:	f7fe f8f2 	bl	800107c <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	68ba      	ldr	r2, [r7, #8]
 8002e9e:	6992      	ldr	r2, [r2, #24]
 8002ea0:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	f003 0310 	and.w	r3, r3, #16
 8002eae:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8002eb2:	fa01 f303 	lsl.w	r3, r1, r3
 8002eb6:	43db      	mvns	r3, r3
 8002eb8:	ea02 0103 	and.w	r1, r2, r3
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	69da      	ldr	r2, [r3, #28]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	f003 0310 	and.w	r3, r3, #16
 8002ec6:	409a      	lsls	r2, r3
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	430a      	orrs	r2, r1
 8002ece:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	f003 0310 	and.w	r3, r3, #16
 8002edc:	21ff      	movs	r1, #255	; 0xff
 8002ede:	fa01 f303 	lsl.w	r3, r1, r3
 8002ee2:	43db      	mvns	r3, r3
 8002ee4:	ea02 0103 	and.w	r1, r2, r3
 8002ee8:	68bb      	ldr	r3, [r7, #8]
 8002eea:	6a1a      	ldr	r2, [r3, #32]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	f003 0310 	and.w	r3, r3, #16
 8002ef2:	409a      	lsls	r2, r3
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	430a      	orrs	r2, r1
 8002efa:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8002efc:	68bb      	ldr	r3, [r7, #8]
 8002efe:	691b      	ldr	r3, [r3, #16]
 8002f00:	2b01      	cmp	r3, #1
 8002f02:	d11d      	bne.n	8002f40 <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f0a:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	f003 0310 	and.w	r3, r3, #16
 8002f12:	221f      	movs	r2, #31
 8002f14:	fa02 f303 	lsl.w	r3, r2, r3
 8002f18:	43db      	mvns	r3, r3
 8002f1a:	69ba      	ldr	r2, [r7, #24]
 8002f1c:	4013      	ands	r3, r2
 8002f1e:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	695b      	ldr	r3, [r3, #20]
 8002f24:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	f003 0310 	and.w	r3, r3, #16
 8002f2c:	697a      	ldr	r2, [r7, #20]
 8002f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f32:	69ba      	ldr	r2, [r7, #24]
 8002f34:	4313      	orrs	r3, r2
 8002f36:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	69ba      	ldr	r2, [r7, #24]
 8002f3e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f46:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	f003 0310 	and.w	r3, r3, #16
 8002f4e:	2207      	movs	r2, #7
 8002f50:	fa02 f303 	lsl.w	r3, r2, r3
 8002f54:	43db      	mvns	r3, r3
 8002f56:	69ba      	ldr	r2, [r7, #24]
 8002f58:	4013      	ands	r3, r2
 8002f5a:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	681a      	ldr	r2, [r3, #0]
 8002f60:	68bb      	ldr	r3, [r7, #8]
 8002f62:	689b      	ldr	r3, [r3, #8]
 8002f64:	431a      	orrs	r2, r3
 8002f66:	68bb      	ldr	r3, [r7, #8]
 8002f68:	68db      	ldr	r3, [r3, #12]
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	f003 0310 	and.w	r3, r3, #16
 8002f74:	697a      	ldr	r2, [r7, #20]
 8002f76:	fa02 f303 	lsl.w	r3, r2, r3
 8002f7a:	69ba      	ldr	r2, [r7, #24]
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	69ba      	ldr	r2, [r7, #24]
 8002f86:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	6819      	ldr	r1, [r3, #0]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	f003 0310 	and.w	r3, r3, #16
 8002f94:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002f98:	fa02 f303 	lsl.w	r3, r2, r3
 8002f9c:	43da      	mvns	r2, r3
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	400a      	ands	r2, r1
 8002fa4:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	f003 0310 	and.w	r3, r3, #16
 8002fb4:	f640 72fc 	movw	r2, #4092	; 0xffc
 8002fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fbc:	43db      	mvns	r3, r3
 8002fbe:	69ba      	ldr	r2, [r7, #24]
 8002fc0:	4013      	ands	r3, r2
 8002fc2:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8002fc4:	68bb      	ldr	r3, [r7, #8]
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	f003 0310 	and.w	r3, r3, #16
 8002fd0:	697a      	ldr	r2, [r7, #20]
 8002fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd6:	69ba      	ldr	r2, [r7, #24]
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	69ba      	ldr	r2, [r7, #24]
 8002fe2:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	6819      	ldr	r1, [r3, #0]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	f003 0310 	and.w	r3, r3, #16
 8002ff0:	22c0      	movs	r2, #192	; 0xc0
 8002ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff6:	43da      	mvns	r2, r3
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	400a      	ands	r2, r1
 8002ffe:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	2201      	movs	r2, #1
 8003004:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	2200      	movs	r2, #0
 800300a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800300c:	2300      	movs	r3, #0
}
 800300e:	4618      	mov	r0, r3
 8003010:	3720      	adds	r7, #32
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}

08003016 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8003016:	b580      	push	{r7, lr}
 8003018:	b084      	sub	sp, #16
 800301a:	af00      	add	r7, sp, #0
 800301c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003022:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8003024:	68f8      	ldr	r0, [r7, #12]
 8003026:	f7ff febe 	bl	8002da6 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	2201      	movs	r2, #1
 800302e:	711a      	strb	r2, [r3, #4]
}
 8003030:	bf00      	nop
 8003032:	3710      	adds	r7, #16
 8003034:	46bd      	mov	sp, r7
 8003036:	bd80      	pop	{r7, pc}

08003038 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b084      	sub	sp, #16
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003044:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8003046:	68f8      	ldr	r0, [r7, #12]
 8003048:	f7ff feb7 	bl	8002dba <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800304c:	bf00      	nop
 800304e:	3710      	adds	r7, #16
 8003050:	46bd      	mov	sp, r7
 8003052:	bd80      	pop	{r7, pc}

08003054 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b084      	sub	sp, #16
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003060:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	691b      	ldr	r3, [r3, #16]
 8003066:	f043 0204 	orr.w	r2, r3, #4
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 800306e:	68f8      	ldr	r0, [r7, #12]
 8003070:	f7ff fead 	bl	8002dce <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	2201      	movs	r2, #1
 8003078:	711a      	strb	r2, [r3, #4]
}
 800307a:	bf00      	nop
 800307c:	3710      	adds	r7, #16
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}

08003082 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003082:	b480      	push	{r7}
 8003084:	b083      	sub	sp, #12
 8003086:	af00      	add	r7, sp, #0
 8003088:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 800308a:	bf00      	nop
 800308c:	370c      	adds	r7, #12
 800308e:	46bd      	mov	sp, r7
 8003090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003094:	4770      	bx	lr

08003096 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003096:	b480      	push	{r7}
 8003098:	b083      	sub	sp, #12
 800309a:	af00      	add	r7, sp, #0
 800309c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 800309e:	bf00      	nop
 80030a0:	370c      	adds	r7, #12
 80030a2:	46bd      	mov	sp, r7
 80030a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a8:	4770      	bx	lr

080030aa <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80030aa:	b480      	push	{r7}
 80030ac:	b083      	sub	sp, #12
 80030ae:	af00      	add	r7, sp, #0
 80030b0:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 80030b2:	bf00      	nop
 80030b4:	370c      	adds	r7, #12
 80030b6:	46bd      	mov	sp, r7
 80030b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030bc:	4770      	bx	lr

080030be <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80030be:	b580      	push	{r7, lr}
 80030c0:	b084      	sub	sp, #16
 80030c2:	af00      	add	r7, sp, #0
 80030c4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030ca:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 80030cc:	68f8      	ldr	r0, [r7, #12]
 80030ce:	f7ff ffd8 	bl	8003082 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	2201      	movs	r2, #1
 80030d6:	711a      	strb	r2, [r3, #4]
}
 80030d8:	bf00      	nop
 80030da:	3710      	adds	r7, #16
 80030dc:	46bd      	mov	sp, r7
 80030de:	bd80      	pop	{r7, pc}

080030e0 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b084      	sub	sp, #16
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030ec:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 80030ee:	68f8      	ldr	r0, [r7, #12]
 80030f0:	f7ff ffd1 	bl	8003096 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80030f4:	bf00      	nop
 80030f6:	3710      	adds	r7, #16
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bd80      	pop	{r7, pc}

080030fc <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b084      	sub	sp, #16
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003108:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	691b      	ldr	r3, [r3, #16]
 800310e:	f043 0204 	orr.w	r2, r3, #4
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8003116:	68f8      	ldr	r0, [r7, #12]
 8003118:	f7ff ffc7 	bl	80030aa <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	2201      	movs	r2, #1
 8003120:	711a      	strb	r2, [r3, #4]
}
 8003122:	bf00      	nop
 8003124:	3710      	adds	r7, #16
 8003126:	46bd      	mov	sp, r7
 8003128:	bd80      	pop	{r7, pc}
	...

0800312c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800312c:	b480      	push	{r7}
 800312e:	b085      	sub	sp, #20
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d101      	bne.n	800313e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800313a:	2301      	movs	r3, #1
 800313c:	e098      	b.n	8003270 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	461a      	mov	r2, r3
 8003144:	4b4d      	ldr	r3, [pc, #308]	; (800327c <HAL_DMA_Init+0x150>)
 8003146:	429a      	cmp	r2, r3
 8003148:	d80f      	bhi.n	800316a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	461a      	mov	r2, r3
 8003150:	4b4b      	ldr	r3, [pc, #300]	; (8003280 <HAL_DMA_Init+0x154>)
 8003152:	4413      	add	r3, r2
 8003154:	4a4b      	ldr	r2, [pc, #300]	; (8003284 <HAL_DMA_Init+0x158>)
 8003156:	fba2 2303 	umull	r2, r3, r2, r3
 800315a:	091b      	lsrs	r3, r3, #4
 800315c:	009a      	lsls	r2, r3, #2
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	4a48      	ldr	r2, [pc, #288]	; (8003288 <HAL_DMA_Init+0x15c>)
 8003166:	641a      	str	r2, [r3, #64]	; 0x40
 8003168:	e00e      	b.n	8003188 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	461a      	mov	r2, r3
 8003170:	4b46      	ldr	r3, [pc, #280]	; (800328c <HAL_DMA_Init+0x160>)
 8003172:	4413      	add	r3, r2
 8003174:	4a43      	ldr	r2, [pc, #268]	; (8003284 <HAL_DMA_Init+0x158>)
 8003176:	fba2 2303 	umull	r2, r3, r2, r3
 800317a:	091b      	lsrs	r3, r3, #4
 800317c:	009a      	lsls	r2, r3, #2
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	4a42      	ldr	r2, [pc, #264]	; (8003290 <HAL_DMA_Init+0x164>)
 8003186:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2202      	movs	r2, #2
 800318c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800319e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031a2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80031ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	691b      	ldr	r3, [r3, #16]
 80031b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	699b      	ldr	r3, [r3, #24]
 80031be:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031c4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6a1b      	ldr	r3, [r3, #32]
 80031ca:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80031cc:	68fa      	ldr	r2, [r7, #12]
 80031ce:	4313      	orrs	r3, r2
 80031d0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	68fa      	ldr	r2, [r7, #12]
 80031d8:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	689b      	ldr	r3, [r3, #8]
 80031de:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80031e2:	d039      	beq.n	8003258 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e8:	4a27      	ldr	r2, [pc, #156]	; (8003288 <HAL_DMA_Init+0x15c>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d11a      	bne.n	8003224 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80031ee:	4b29      	ldr	r3, [pc, #164]	; (8003294 <HAL_DMA_Init+0x168>)
 80031f0:	681a      	ldr	r2, [r3, #0]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031f6:	f003 031c 	and.w	r3, r3, #28
 80031fa:	210f      	movs	r1, #15
 80031fc:	fa01 f303 	lsl.w	r3, r1, r3
 8003200:	43db      	mvns	r3, r3
 8003202:	4924      	ldr	r1, [pc, #144]	; (8003294 <HAL_DMA_Init+0x168>)
 8003204:	4013      	ands	r3, r2
 8003206:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003208:	4b22      	ldr	r3, [pc, #136]	; (8003294 <HAL_DMA_Init+0x168>)
 800320a:	681a      	ldr	r2, [r3, #0]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6859      	ldr	r1, [r3, #4]
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003214:	f003 031c 	and.w	r3, r3, #28
 8003218:	fa01 f303 	lsl.w	r3, r1, r3
 800321c:	491d      	ldr	r1, [pc, #116]	; (8003294 <HAL_DMA_Init+0x168>)
 800321e:	4313      	orrs	r3, r2
 8003220:	600b      	str	r3, [r1, #0]
 8003222:	e019      	b.n	8003258 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003224:	4b1c      	ldr	r3, [pc, #112]	; (8003298 <HAL_DMA_Init+0x16c>)
 8003226:	681a      	ldr	r2, [r3, #0]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800322c:	f003 031c 	and.w	r3, r3, #28
 8003230:	210f      	movs	r1, #15
 8003232:	fa01 f303 	lsl.w	r3, r1, r3
 8003236:	43db      	mvns	r3, r3
 8003238:	4917      	ldr	r1, [pc, #92]	; (8003298 <HAL_DMA_Init+0x16c>)
 800323a:	4013      	ands	r3, r2
 800323c:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800323e:	4b16      	ldr	r3, [pc, #88]	; (8003298 <HAL_DMA_Init+0x16c>)
 8003240:	681a      	ldr	r2, [r3, #0]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6859      	ldr	r1, [r3, #4]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800324a:	f003 031c 	and.w	r3, r3, #28
 800324e:	fa01 f303 	lsl.w	r3, r1, r3
 8003252:	4911      	ldr	r1, [pc, #68]	; (8003298 <HAL_DMA_Init+0x16c>)
 8003254:	4313      	orrs	r3, r2
 8003256:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2200      	movs	r2, #0
 800325c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2201      	movs	r2, #1
 8003262:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2200      	movs	r2, #0
 800326a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800326e:	2300      	movs	r3, #0
}
 8003270:	4618      	mov	r0, r3
 8003272:	3714      	adds	r7, #20
 8003274:	46bd      	mov	sp, r7
 8003276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327a:	4770      	bx	lr
 800327c:	40020407 	.word	0x40020407
 8003280:	bffdfff8 	.word	0xbffdfff8
 8003284:	cccccccd 	.word	0xcccccccd
 8003288:	40020000 	.word	0x40020000
 800328c:	bffdfbf8 	.word	0xbffdfbf8
 8003290:	40020400 	.word	0x40020400
 8003294:	400200a8 	.word	0x400200a8
 8003298:	400204a8 	.word	0x400204a8

0800329c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b086      	sub	sp, #24
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	60f8      	str	r0, [r7, #12]
 80032a4:	60b9      	str	r1, [r7, #8]
 80032a6:	607a      	str	r2, [r7, #4]
 80032a8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80032aa:	2300      	movs	r3, #0
 80032ac:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80032b4:	2b01      	cmp	r3, #1
 80032b6:	d101      	bne.n	80032bc <HAL_DMA_Start_IT+0x20>
 80032b8:	2302      	movs	r3, #2
 80032ba:	e04b      	b.n	8003354 <HAL_DMA_Start_IT+0xb8>
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	2201      	movs	r2, #1
 80032c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80032ca:	b2db      	uxtb	r3, r3
 80032cc:	2b01      	cmp	r3, #1
 80032ce:	d13a      	bne.n	8003346 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	2202      	movs	r2, #2
 80032d4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	2200      	movs	r2, #0
 80032dc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	681a      	ldr	r2, [r3, #0]
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f022 0201 	bic.w	r2, r2, #1
 80032ec:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	687a      	ldr	r2, [r7, #4]
 80032f2:	68b9      	ldr	r1, [r7, #8]
 80032f4:	68f8      	ldr	r0, [r7, #12]
 80032f6:	f000 f8e0 	bl	80034ba <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d008      	beq.n	8003314 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	681a      	ldr	r2, [r3, #0]
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f042 020e 	orr.w	r2, r2, #14
 8003310:	601a      	str	r2, [r3, #0]
 8003312:	e00f      	b.n	8003334 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	681a      	ldr	r2, [r3, #0]
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f022 0204 	bic.w	r2, r2, #4
 8003322:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	681a      	ldr	r2, [r3, #0]
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f042 020a 	orr.w	r2, r2, #10
 8003332:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	681a      	ldr	r2, [r3, #0]
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f042 0201 	orr.w	r2, r2, #1
 8003342:	601a      	str	r2, [r3, #0]
 8003344:	e005      	b.n	8003352 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	2200      	movs	r2, #0
 800334a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800334e:	2302      	movs	r3, #2
 8003350:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003352:	7dfb      	ldrb	r3, [r7, #23]
}
 8003354:	4618      	mov	r0, r3
 8003356:	3718      	adds	r7, #24
 8003358:	46bd      	mov	sp, r7
 800335a:	bd80      	pop	{r7, pc}

0800335c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b084      	sub	sp, #16
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003378:	f003 031c 	and.w	r3, r3, #28
 800337c:	2204      	movs	r2, #4
 800337e:	409a      	lsls	r2, r3
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	4013      	ands	r3, r2
 8003384:	2b00      	cmp	r3, #0
 8003386:	d026      	beq.n	80033d6 <HAL_DMA_IRQHandler+0x7a>
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	f003 0304 	and.w	r3, r3, #4
 800338e:	2b00      	cmp	r3, #0
 8003390:	d021      	beq.n	80033d6 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f003 0320 	and.w	r3, r3, #32
 800339c:	2b00      	cmp	r3, #0
 800339e:	d107      	bne.n	80033b0 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	681a      	ldr	r2, [r3, #0]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f022 0204 	bic.w	r2, r2, #4
 80033ae:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033b4:	f003 021c 	and.w	r2, r3, #28
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033bc:	2104      	movs	r1, #4
 80033be:	fa01 f202 	lsl.w	r2, r1, r2
 80033c2:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d071      	beq.n	80034b0 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033d0:	6878      	ldr	r0, [r7, #4]
 80033d2:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 80033d4:	e06c      	b.n	80034b0 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033da:	f003 031c 	and.w	r3, r3, #28
 80033de:	2202      	movs	r2, #2
 80033e0:	409a      	lsls	r2, r3
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	4013      	ands	r3, r2
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d02e      	beq.n	8003448 <HAL_DMA_IRQHandler+0xec>
 80033ea:	68bb      	ldr	r3, [r7, #8]
 80033ec:	f003 0302 	and.w	r3, r3, #2
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d029      	beq.n	8003448 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f003 0320 	and.w	r3, r3, #32
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d10b      	bne.n	800341a <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	681a      	ldr	r2, [r3, #0]
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f022 020a 	bic.w	r2, r2, #10
 8003410:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2201      	movs	r2, #1
 8003416:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800341e:	f003 021c 	and.w	r2, r3, #28
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003426:	2102      	movs	r1, #2
 8003428:	fa01 f202 	lsl.w	r2, r1, r2
 800342c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2200      	movs	r2, #0
 8003432:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800343a:	2b00      	cmp	r3, #0
 800343c:	d038      	beq.n	80034b0 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003442:	6878      	ldr	r0, [r7, #4]
 8003444:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003446:	e033      	b.n	80034b0 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800344c:	f003 031c 	and.w	r3, r3, #28
 8003450:	2208      	movs	r2, #8
 8003452:	409a      	lsls	r2, r3
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	4013      	ands	r3, r2
 8003458:	2b00      	cmp	r3, #0
 800345a:	d02a      	beq.n	80034b2 <HAL_DMA_IRQHandler+0x156>
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	f003 0308 	and.w	r3, r3, #8
 8003462:	2b00      	cmp	r3, #0
 8003464:	d025      	beq.n	80034b2 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	681a      	ldr	r2, [r3, #0]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f022 020e 	bic.w	r2, r2, #14
 8003474:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800347a:	f003 021c 	and.w	r2, r3, #28
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003482:	2101      	movs	r1, #1
 8003484:	fa01 f202 	lsl.w	r2, r1, r2
 8003488:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2201      	movs	r2, #1
 800348e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2201      	movs	r2, #1
 8003494:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2200      	movs	r2, #0
 800349c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d004      	beq.n	80034b2 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034ac:	6878      	ldr	r0, [r7, #4]
 80034ae:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80034b0:	bf00      	nop
 80034b2:	bf00      	nop
}
 80034b4:	3710      	adds	r7, #16
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bd80      	pop	{r7, pc}

080034ba <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80034ba:	b480      	push	{r7}
 80034bc:	b085      	sub	sp, #20
 80034be:	af00      	add	r7, sp, #0
 80034c0:	60f8      	str	r0, [r7, #12]
 80034c2:	60b9      	str	r1, [r7, #8]
 80034c4:	607a      	str	r2, [r7, #4]
 80034c6:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034cc:	f003 021c 	and.w	r2, r3, #28
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d4:	2101      	movs	r1, #1
 80034d6:	fa01 f202 	lsl.w	r2, r1, r2
 80034da:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	683a      	ldr	r2, [r7, #0]
 80034e2:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	689b      	ldr	r3, [r3, #8]
 80034e8:	2b10      	cmp	r3, #16
 80034ea:	d108      	bne.n	80034fe <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	687a      	ldr	r2, [r7, #4]
 80034f2:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	68ba      	ldr	r2, [r7, #8]
 80034fa:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80034fc:	e007      	b.n	800350e <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	68ba      	ldr	r2, [r7, #8]
 8003504:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	687a      	ldr	r2, [r7, #4]
 800350c:	60da      	str	r2, [r3, #12]
}
 800350e:	bf00      	nop
 8003510:	3714      	adds	r7, #20
 8003512:	46bd      	mov	sp, r7
 8003514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003518:	4770      	bx	lr
	...

0800351c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800351c:	b480      	push	{r7}
 800351e:	b087      	sub	sp, #28
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
 8003524:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003526:	2300      	movs	r3, #0
 8003528:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800352a:	e17f      	b.n	800382c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	681a      	ldr	r2, [r3, #0]
 8003530:	2101      	movs	r1, #1
 8003532:	697b      	ldr	r3, [r7, #20]
 8003534:	fa01 f303 	lsl.w	r3, r1, r3
 8003538:	4013      	ands	r3, r2
 800353a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	2b00      	cmp	r3, #0
 8003540:	f000 8171 	beq.w	8003826 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	2b01      	cmp	r3, #1
 800354a:	d00b      	beq.n	8003564 <HAL_GPIO_Init+0x48>
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	2b02      	cmp	r3, #2
 8003552:	d007      	beq.n	8003564 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003558:	2b11      	cmp	r3, #17
 800355a:	d003      	beq.n	8003564 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	2b12      	cmp	r3, #18
 8003562:	d130      	bne.n	80035c6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	689b      	ldr	r3, [r3, #8]
 8003568:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800356a:	697b      	ldr	r3, [r7, #20]
 800356c:	005b      	lsls	r3, r3, #1
 800356e:	2203      	movs	r2, #3
 8003570:	fa02 f303 	lsl.w	r3, r2, r3
 8003574:	43db      	mvns	r3, r3
 8003576:	693a      	ldr	r2, [r7, #16]
 8003578:	4013      	ands	r3, r2
 800357a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	68da      	ldr	r2, [r3, #12]
 8003580:	697b      	ldr	r3, [r7, #20]
 8003582:	005b      	lsls	r3, r3, #1
 8003584:	fa02 f303 	lsl.w	r3, r2, r3
 8003588:	693a      	ldr	r2, [r7, #16]
 800358a:	4313      	orrs	r3, r2
 800358c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	693a      	ldr	r2, [r7, #16]
 8003592:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800359a:	2201      	movs	r2, #1
 800359c:	697b      	ldr	r3, [r7, #20]
 800359e:	fa02 f303 	lsl.w	r3, r2, r3
 80035a2:	43db      	mvns	r3, r3
 80035a4:	693a      	ldr	r2, [r7, #16]
 80035a6:	4013      	ands	r3, r2
 80035a8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	091b      	lsrs	r3, r3, #4
 80035b0:	f003 0201 	and.w	r2, r3, #1
 80035b4:	697b      	ldr	r3, [r7, #20]
 80035b6:	fa02 f303 	lsl.w	r3, r2, r3
 80035ba:	693a      	ldr	r2, [r7, #16]
 80035bc:	4313      	orrs	r3, r2
 80035be:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	693a      	ldr	r2, [r7, #16]
 80035c4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	f003 0303 	and.w	r3, r3, #3
 80035ce:	2b03      	cmp	r3, #3
 80035d0:	d118      	bne.n	8003604 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035d6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80035d8:	2201      	movs	r2, #1
 80035da:	697b      	ldr	r3, [r7, #20]
 80035dc:	fa02 f303 	lsl.w	r3, r2, r3
 80035e0:	43db      	mvns	r3, r3
 80035e2:	693a      	ldr	r2, [r7, #16]
 80035e4:	4013      	ands	r3, r2
 80035e6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	08db      	lsrs	r3, r3, #3
 80035ee:	f003 0201 	and.w	r2, r3, #1
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	fa02 f303 	lsl.w	r3, r2, r3
 80035f8:	693a      	ldr	r2, [r7, #16]
 80035fa:	4313      	orrs	r3, r2
 80035fc:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	693a      	ldr	r2, [r7, #16]
 8003602:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	68db      	ldr	r3, [r3, #12]
 8003608:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800360a:	697b      	ldr	r3, [r7, #20]
 800360c:	005b      	lsls	r3, r3, #1
 800360e:	2203      	movs	r2, #3
 8003610:	fa02 f303 	lsl.w	r3, r2, r3
 8003614:	43db      	mvns	r3, r3
 8003616:	693a      	ldr	r2, [r7, #16]
 8003618:	4013      	ands	r3, r2
 800361a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	689a      	ldr	r2, [r3, #8]
 8003620:	697b      	ldr	r3, [r7, #20]
 8003622:	005b      	lsls	r3, r3, #1
 8003624:	fa02 f303 	lsl.w	r3, r2, r3
 8003628:	693a      	ldr	r2, [r7, #16]
 800362a:	4313      	orrs	r3, r2
 800362c:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	693a      	ldr	r2, [r7, #16]
 8003632:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	2b02      	cmp	r3, #2
 800363a:	d003      	beq.n	8003644 <HAL_GPIO_Init+0x128>
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	2b12      	cmp	r3, #18
 8003642:	d123      	bne.n	800368c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003644:	697b      	ldr	r3, [r7, #20]
 8003646:	08da      	lsrs	r2, r3, #3
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	3208      	adds	r2, #8
 800364c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003650:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003652:	697b      	ldr	r3, [r7, #20]
 8003654:	f003 0307 	and.w	r3, r3, #7
 8003658:	009b      	lsls	r3, r3, #2
 800365a:	220f      	movs	r2, #15
 800365c:	fa02 f303 	lsl.w	r3, r2, r3
 8003660:	43db      	mvns	r3, r3
 8003662:	693a      	ldr	r2, [r7, #16]
 8003664:	4013      	ands	r3, r2
 8003666:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	691a      	ldr	r2, [r3, #16]
 800366c:	697b      	ldr	r3, [r7, #20]
 800366e:	f003 0307 	and.w	r3, r3, #7
 8003672:	009b      	lsls	r3, r3, #2
 8003674:	fa02 f303 	lsl.w	r3, r2, r3
 8003678:	693a      	ldr	r2, [r7, #16]
 800367a:	4313      	orrs	r3, r2
 800367c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800367e:	697b      	ldr	r3, [r7, #20]
 8003680:	08da      	lsrs	r2, r3, #3
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	3208      	adds	r2, #8
 8003686:	6939      	ldr	r1, [r7, #16]
 8003688:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003692:	697b      	ldr	r3, [r7, #20]
 8003694:	005b      	lsls	r3, r3, #1
 8003696:	2203      	movs	r2, #3
 8003698:	fa02 f303 	lsl.w	r3, r2, r3
 800369c:	43db      	mvns	r3, r3
 800369e:	693a      	ldr	r2, [r7, #16]
 80036a0:	4013      	ands	r3, r2
 80036a2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	f003 0203 	and.w	r2, r3, #3
 80036ac:	697b      	ldr	r3, [r7, #20]
 80036ae:	005b      	lsls	r3, r3, #1
 80036b0:	fa02 f303 	lsl.w	r3, r2, r3
 80036b4:	693a      	ldr	r2, [r7, #16]
 80036b6:	4313      	orrs	r3, r2
 80036b8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	693a      	ldr	r2, [r7, #16]
 80036be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	f000 80ac 	beq.w	8003826 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036ce:	4b5e      	ldr	r3, [pc, #376]	; (8003848 <HAL_GPIO_Init+0x32c>)
 80036d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036d2:	4a5d      	ldr	r2, [pc, #372]	; (8003848 <HAL_GPIO_Init+0x32c>)
 80036d4:	f043 0301 	orr.w	r3, r3, #1
 80036d8:	6613      	str	r3, [r2, #96]	; 0x60
 80036da:	4b5b      	ldr	r3, [pc, #364]	; (8003848 <HAL_GPIO_Init+0x32c>)
 80036dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036de:	f003 0301 	and.w	r3, r3, #1
 80036e2:	60bb      	str	r3, [r7, #8]
 80036e4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80036e6:	4a59      	ldr	r2, [pc, #356]	; (800384c <HAL_GPIO_Init+0x330>)
 80036e8:	697b      	ldr	r3, [r7, #20]
 80036ea:	089b      	lsrs	r3, r3, #2
 80036ec:	3302      	adds	r3, #2
 80036ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036f2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80036f4:	697b      	ldr	r3, [r7, #20]
 80036f6:	f003 0303 	and.w	r3, r3, #3
 80036fa:	009b      	lsls	r3, r3, #2
 80036fc:	220f      	movs	r2, #15
 80036fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003702:	43db      	mvns	r3, r3
 8003704:	693a      	ldr	r2, [r7, #16]
 8003706:	4013      	ands	r3, r2
 8003708:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003710:	d025      	beq.n	800375e <HAL_GPIO_Init+0x242>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	4a4e      	ldr	r2, [pc, #312]	; (8003850 <HAL_GPIO_Init+0x334>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d01f      	beq.n	800375a <HAL_GPIO_Init+0x23e>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	4a4d      	ldr	r2, [pc, #308]	; (8003854 <HAL_GPIO_Init+0x338>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d019      	beq.n	8003756 <HAL_GPIO_Init+0x23a>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	4a4c      	ldr	r2, [pc, #304]	; (8003858 <HAL_GPIO_Init+0x33c>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d013      	beq.n	8003752 <HAL_GPIO_Init+0x236>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	4a4b      	ldr	r2, [pc, #300]	; (800385c <HAL_GPIO_Init+0x340>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d00d      	beq.n	800374e <HAL_GPIO_Init+0x232>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	4a4a      	ldr	r2, [pc, #296]	; (8003860 <HAL_GPIO_Init+0x344>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d007      	beq.n	800374a <HAL_GPIO_Init+0x22e>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	4a49      	ldr	r2, [pc, #292]	; (8003864 <HAL_GPIO_Init+0x348>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d101      	bne.n	8003746 <HAL_GPIO_Init+0x22a>
 8003742:	2306      	movs	r3, #6
 8003744:	e00c      	b.n	8003760 <HAL_GPIO_Init+0x244>
 8003746:	2307      	movs	r3, #7
 8003748:	e00a      	b.n	8003760 <HAL_GPIO_Init+0x244>
 800374a:	2305      	movs	r3, #5
 800374c:	e008      	b.n	8003760 <HAL_GPIO_Init+0x244>
 800374e:	2304      	movs	r3, #4
 8003750:	e006      	b.n	8003760 <HAL_GPIO_Init+0x244>
 8003752:	2303      	movs	r3, #3
 8003754:	e004      	b.n	8003760 <HAL_GPIO_Init+0x244>
 8003756:	2302      	movs	r3, #2
 8003758:	e002      	b.n	8003760 <HAL_GPIO_Init+0x244>
 800375a:	2301      	movs	r3, #1
 800375c:	e000      	b.n	8003760 <HAL_GPIO_Init+0x244>
 800375e:	2300      	movs	r3, #0
 8003760:	697a      	ldr	r2, [r7, #20]
 8003762:	f002 0203 	and.w	r2, r2, #3
 8003766:	0092      	lsls	r2, r2, #2
 8003768:	4093      	lsls	r3, r2
 800376a:	693a      	ldr	r2, [r7, #16]
 800376c:	4313      	orrs	r3, r2
 800376e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003770:	4936      	ldr	r1, [pc, #216]	; (800384c <HAL_GPIO_Init+0x330>)
 8003772:	697b      	ldr	r3, [r7, #20]
 8003774:	089b      	lsrs	r3, r3, #2
 8003776:	3302      	adds	r3, #2
 8003778:	693a      	ldr	r2, [r7, #16]
 800377a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800377e:	4b3a      	ldr	r3, [pc, #232]	; (8003868 <HAL_GPIO_Init+0x34c>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	43db      	mvns	r3, r3
 8003788:	693a      	ldr	r2, [r7, #16]
 800378a:	4013      	ands	r3, r2
 800378c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003796:	2b00      	cmp	r3, #0
 8003798:	d003      	beq.n	80037a2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800379a:	693a      	ldr	r2, [r7, #16]
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	4313      	orrs	r3, r2
 80037a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80037a2:	4a31      	ldr	r2, [pc, #196]	; (8003868 <HAL_GPIO_Init+0x34c>)
 80037a4:	693b      	ldr	r3, [r7, #16]
 80037a6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80037a8:	4b2f      	ldr	r3, [pc, #188]	; (8003868 <HAL_GPIO_Init+0x34c>)
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	43db      	mvns	r3, r3
 80037b2:	693a      	ldr	r2, [r7, #16]
 80037b4:	4013      	ands	r3, r2
 80037b6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d003      	beq.n	80037cc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80037c4:	693a      	ldr	r2, [r7, #16]
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	4313      	orrs	r3, r2
 80037ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80037cc:	4a26      	ldr	r2, [pc, #152]	; (8003868 <HAL_GPIO_Init+0x34c>)
 80037ce:	693b      	ldr	r3, [r7, #16]
 80037d0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80037d2:	4b25      	ldr	r3, [pc, #148]	; (8003868 <HAL_GPIO_Init+0x34c>)
 80037d4:	689b      	ldr	r3, [r3, #8]
 80037d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	43db      	mvns	r3, r3
 80037dc:	693a      	ldr	r2, [r7, #16]
 80037de:	4013      	ands	r3, r2
 80037e0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d003      	beq.n	80037f6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80037ee:	693a      	ldr	r2, [r7, #16]
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	4313      	orrs	r3, r2
 80037f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80037f6:	4a1c      	ldr	r2, [pc, #112]	; (8003868 <HAL_GPIO_Init+0x34c>)
 80037f8:	693b      	ldr	r3, [r7, #16]
 80037fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80037fc:	4b1a      	ldr	r3, [pc, #104]	; (8003868 <HAL_GPIO_Init+0x34c>)
 80037fe:	68db      	ldr	r3, [r3, #12]
 8003800:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	43db      	mvns	r3, r3
 8003806:	693a      	ldr	r2, [r7, #16]
 8003808:	4013      	ands	r3, r2
 800380a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003814:	2b00      	cmp	r3, #0
 8003816:	d003      	beq.n	8003820 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003818:	693a      	ldr	r2, [r7, #16]
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	4313      	orrs	r3, r2
 800381e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003820:	4a11      	ldr	r2, [pc, #68]	; (8003868 <HAL_GPIO_Init+0x34c>)
 8003822:	693b      	ldr	r3, [r7, #16]
 8003824:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003826:	697b      	ldr	r3, [r7, #20]
 8003828:	3301      	adds	r3, #1
 800382a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	681a      	ldr	r2, [r3, #0]
 8003830:	697b      	ldr	r3, [r7, #20]
 8003832:	fa22 f303 	lsr.w	r3, r2, r3
 8003836:	2b00      	cmp	r3, #0
 8003838:	f47f ae78 	bne.w	800352c <HAL_GPIO_Init+0x10>
  }
}
 800383c:	bf00      	nop
 800383e:	371c      	adds	r7, #28
 8003840:	46bd      	mov	sp, r7
 8003842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003846:	4770      	bx	lr
 8003848:	40021000 	.word	0x40021000
 800384c:	40010000 	.word	0x40010000
 8003850:	48000400 	.word	0x48000400
 8003854:	48000800 	.word	0x48000800
 8003858:	48000c00 	.word	0x48000c00
 800385c:	48001000 	.word	0x48001000
 8003860:	48001400 	.word	0x48001400
 8003864:	48001800 	.word	0x48001800
 8003868:	40010400 	.word	0x40010400

0800386c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800386c:	b480      	push	{r7}
 800386e:	b083      	sub	sp, #12
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
 8003874:	460b      	mov	r3, r1
 8003876:	807b      	strh	r3, [r7, #2]
 8003878:	4613      	mov	r3, r2
 800387a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800387c:	787b      	ldrb	r3, [r7, #1]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d003      	beq.n	800388a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003882:	887a      	ldrh	r2, [r7, #2]
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003888:	e002      	b.n	8003890 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800388a:	887a      	ldrh	r2, [r7, #2]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003890:	bf00      	nop
 8003892:	370c      	adds	r7, #12
 8003894:	46bd      	mov	sp, r7
 8003896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389a:	4770      	bx	lr

0800389c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800389c:	b480      	push	{r7}
 800389e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80038a0:	4b04      	ldr	r3, [pc, #16]	; (80038b4 <HAL_PWREx_GetVoltageRange+0x18>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80038a8:	4618      	mov	r0, r3
 80038aa:	46bd      	mov	sp, r7
 80038ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b0:	4770      	bx	lr
 80038b2:	bf00      	nop
 80038b4:	40007000 	.word	0x40007000

080038b8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80038b8:	b480      	push	{r7}
 80038ba:	b085      	sub	sp, #20
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038c6:	d130      	bne.n	800392a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80038c8:	4b23      	ldr	r3, [pc, #140]	; (8003958 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80038d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038d4:	d038      	beq.n	8003948 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80038d6:	4b20      	ldr	r3, [pc, #128]	; (8003958 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80038de:	4a1e      	ldr	r2, [pc, #120]	; (8003958 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80038e0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80038e4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80038e6:	4b1d      	ldr	r3, [pc, #116]	; (800395c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	2232      	movs	r2, #50	; 0x32
 80038ec:	fb02 f303 	mul.w	r3, r2, r3
 80038f0:	4a1b      	ldr	r2, [pc, #108]	; (8003960 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80038f2:	fba2 2303 	umull	r2, r3, r2, r3
 80038f6:	0c9b      	lsrs	r3, r3, #18
 80038f8:	3301      	adds	r3, #1
 80038fa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80038fc:	e002      	b.n	8003904 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	3b01      	subs	r3, #1
 8003902:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003904:	4b14      	ldr	r3, [pc, #80]	; (8003958 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003906:	695b      	ldr	r3, [r3, #20]
 8003908:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800390c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003910:	d102      	bne.n	8003918 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d1f2      	bne.n	80038fe <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003918:	4b0f      	ldr	r3, [pc, #60]	; (8003958 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800391a:	695b      	ldr	r3, [r3, #20]
 800391c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003920:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003924:	d110      	bne.n	8003948 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003926:	2303      	movs	r3, #3
 8003928:	e00f      	b.n	800394a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800392a:	4b0b      	ldr	r3, [pc, #44]	; (8003958 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003932:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003936:	d007      	beq.n	8003948 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003938:	4b07      	ldr	r3, [pc, #28]	; (8003958 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003940:	4a05      	ldr	r2, [pc, #20]	; (8003958 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003942:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003946:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003948:	2300      	movs	r3, #0
}
 800394a:	4618      	mov	r0, r3
 800394c:	3714      	adds	r7, #20
 800394e:	46bd      	mov	sp, r7
 8003950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003954:	4770      	bx	lr
 8003956:	bf00      	nop
 8003958:	40007000 	.word	0x40007000
 800395c:	20000010 	.word	0x20000010
 8003960:	431bde83 	.word	0x431bde83

08003964 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b088      	sub	sp, #32
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d101      	bne.n	8003976 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003972:	2301      	movs	r3, #1
 8003974:	e3d4      	b.n	8004120 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003976:	4ba1      	ldr	r3, [pc, #644]	; (8003bfc <HAL_RCC_OscConfig+0x298>)
 8003978:	689b      	ldr	r3, [r3, #8]
 800397a:	f003 030c 	and.w	r3, r3, #12
 800397e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003980:	4b9e      	ldr	r3, [pc, #632]	; (8003bfc <HAL_RCC_OscConfig+0x298>)
 8003982:	68db      	ldr	r3, [r3, #12]
 8003984:	f003 0303 	and.w	r3, r3, #3
 8003988:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f003 0310 	and.w	r3, r3, #16
 8003992:	2b00      	cmp	r3, #0
 8003994:	f000 80e4 	beq.w	8003b60 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003998:	69bb      	ldr	r3, [r7, #24]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d007      	beq.n	80039ae <HAL_RCC_OscConfig+0x4a>
 800399e:	69bb      	ldr	r3, [r7, #24]
 80039a0:	2b0c      	cmp	r3, #12
 80039a2:	f040 808b 	bne.w	8003abc <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80039a6:	697b      	ldr	r3, [r7, #20]
 80039a8:	2b01      	cmp	r3, #1
 80039aa:	f040 8087 	bne.w	8003abc <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80039ae:	4b93      	ldr	r3, [pc, #588]	; (8003bfc <HAL_RCC_OscConfig+0x298>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f003 0302 	and.w	r3, r3, #2
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d005      	beq.n	80039c6 <HAL_RCC_OscConfig+0x62>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	699b      	ldr	r3, [r3, #24]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d101      	bne.n	80039c6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80039c2:	2301      	movs	r3, #1
 80039c4:	e3ac      	b.n	8004120 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6a1a      	ldr	r2, [r3, #32]
 80039ca:	4b8c      	ldr	r3, [pc, #560]	; (8003bfc <HAL_RCC_OscConfig+0x298>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f003 0308 	and.w	r3, r3, #8
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d004      	beq.n	80039e0 <HAL_RCC_OscConfig+0x7c>
 80039d6:	4b89      	ldr	r3, [pc, #548]	; (8003bfc <HAL_RCC_OscConfig+0x298>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80039de:	e005      	b.n	80039ec <HAL_RCC_OscConfig+0x88>
 80039e0:	4b86      	ldr	r3, [pc, #536]	; (8003bfc <HAL_RCC_OscConfig+0x298>)
 80039e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039e6:	091b      	lsrs	r3, r3, #4
 80039e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d223      	bcs.n	8003a38 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6a1b      	ldr	r3, [r3, #32]
 80039f4:	4618      	mov	r0, r3
 80039f6:	f000 fd3f 	bl	8004478 <RCC_SetFlashLatencyFromMSIRange>
 80039fa:	4603      	mov	r3, r0
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d001      	beq.n	8003a04 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003a00:	2301      	movs	r3, #1
 8003a02:	e38d      	b.n	8004120 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003a04:	4b7d      	ldr	r3, [pc, #500]	; (8003bfc <HAL_RCC_OscConfig+0x298>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4a7c      	ldr	r2, [pc, #496]	; (8003bfc <HAL_RCC_OscConfig+0x298>)
 8003a0a:	f043 0308 	orr.w	r3, r3, #8
 8003a0e:	6013      	str	r3, [r2, #0]
 8003a10:	4b7a      	ldr	r3, [pc, #488]	; (8003bfc <HAL_RCC_OscConfig+0x298>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6a1b      	ldr	r3, [r3, #32]
 8003a1c:	4977      	ldr	r1, [pc, #476]	; (8003bfc <HAL_RCC_OscConfig+0x298>)
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003a22:	4b76      	ldr	r3, [pc, #472]	; (8003bfc <HAL_RCC_OscConfig+0x298>)
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	69db      	ldr	r3, [r3, #28]
 8003a2e:	021b      	lsls	r3, r3, #8
 8003a30:	4972      	ldr	r1, [pc, #456]	; (8003bfc <HAL_RCC_OscConfig+0x298>)
 8003a32:	4313      	orrs	r3, r2
 8003a34:	604b      	str	r3, [r1, #4]
 8003a36:	e025      	b.n	8003a84 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003a38:	4b70      	ldr	r3, [pc, #448]	; (8003bfc <HAL_RCC_OscConfig+0x298>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a6f      	ldr	r2, [pc, #444]	; (8003bfc <HAL_RCC_OscConfig+0x298>)
 8003a3e:	f043 0308 	orr.w	r3, r3, #8
 8003a42:	6013      	str	r3, [r2, #0]
 8003a44:	4b6d      	ldr	r3, [pc, #436]	; (8003bfc <HAL_RCC_OscConfig+0x298>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6a1b      	ldr	r3, [r3, #32]
 8003a50:	496a      	ldr	r1, [pc, #424]	; (8003bfc <HAL_RCC_OscConfig+0x298>)
 8003a52:	4313      	orrs	r3, r2
 8003a54:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003a56:	4b69      	ldr	r3, [pc, #420]	; (8003bfc <HAL_RCC_OscConfig+0x298>)
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	69db      	ldr	r3, [r3, #28]
 8003a62:	021b      	lsls	r3, r3, #8
 8003a64:	4965      	ldr	r1, [pc, #404]	; (8003bfc <HAL_RCC_OscConfig+0x298>)
 8003a66:	4313      	orrs	r3, r2
 8003a68:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003a6a:	69bb      	ldr	r3, [r7, #24]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d109      	bne.n	8003a84 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6a1b      	ldr	r3, [r3, #32]
 8003a74:	4618      	mov	r0, r3
 8003a76:	f000 fcff 	bl	8004478 <RCC_SetFlashLatencyFromMSIRange>
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d001      	beq.n	8003a84 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003a80:	2301      	movs	r3, #1
 8003a82:	e34d      	b.n	8004120 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003a84:	f000 fc36 	bl	80042f4 <HAL_RCC_GetSysClockFreq>
 8003a88:	4601      	mov	r1, r0
 8003a8a:	4b5c      	ldr	r3, [pc, #368]	; (8003bfc <HAL_RCC_OscConfig+0x298>)
 8003a8c:	689b      	ldr	r3, [r3, #8]
 8003a8e:	091b      	lsrs	r3, r3, #4
 8003a90:	f003 030f 	and.w	r3, r3, #15
 8003a94:	4a5a      	ldr	r2, [pc, #360]	; (8003c00 <HAL_RCC_OscConfig+0x29c>)
 8003a96:	5cd3      	ldrb	r3, [r2, r3]
 8003a98:	f003 031f 	and.w	r3, r3, #31
 8003a9c:	fa21 f303 	lsr.w	r3, r1, r3
 8003aa0:	4a58      	ldr	r2, [pc, #352]	; (8003c04 <HAL_RCC_OscConfig+0x2a0>)
 8003aa2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003aa4:	4b58      	ldr	r3, [pc, #352]	; (8003c08 <HAL_RCC_OscConfig+0x2a4>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	f7fd fa8b 	bl	8000fc4 <HAL_InitTick>
 8003aae:	4603      	mov	r3, r0
 8003ab0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003ab2:	7bfb      	ldrb	r3, [r7, #15]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d052      	beq.n	8003b5e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003ab8:	7bfb      	ldrb	r3, [r7, #15]
 8003aba:	e331      	b.n	8004120 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	699b      	ldr	r3, [r3, #24]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d032      	beq.n	8003b2a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003ac4:	4b4d      	ldr	r3, [pc, #308]	; (8003bfc <HAL_RCC_OscConfig+0x298>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a4c      	ldr	r2, [pc, #304]	; (8003bfc <HAL_RCC_OscConfig+0x298>)
 8003aca:	f043 0301 	orr.w	r3, r3, #1
 8003ace:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003ad0:	f7fd fac8 	bl	8001064 <HAL_GetTick>
 8003ad4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003ad6:	e008      	b.n	8003aea <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003ad8:	f7fd fac4 	bl	8001064 <HAL_GetTick>
 8003adc:	4602      	mov	r2, r0
 8003ade:	693b      	ldr	r3, [r7, #16]
 8003ae0:	1ad3      	subs	r3, r2, r3
 8003ae2:	2b02      	cmp	r3, #2
 8003ae4:	d901      	bls.n	8003aea <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003ae6:	2303      	movs	r3, #3
 8003ae8:	e31a      	b.n	8004120 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003aea:	4b44      	ldr	r3, [pc, #272]	; (8003bfc <HAL_RCC_OscConfig+0x298>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f003 0302 	and.w	r3, r3, #2
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d0f0      	beq.n	8003ad8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003af6:	4b41      	ldr	r3, [pc, #260]	; (8003bfc <HAL_RCC_OscConfig+0x298>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4a40      	ldr	r2, [pc, #256]	; (8003bfc <HAL_RCC_OscConfig+0x298>)
 8003afc:	f043 0308 	orr.w	r3, r3, #8
 8003b00:	6013      	str	r3, [r2, #0]
 8003b02:	4b3e      	ldr	r3, [pc, #248]	; (8003bfc <HAL_RCC_OscConfig+0x298>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6a1b      	ldr	r3, [r3, #32]
 8003b0e:	493b      	ldr	r1, [pc, #236]	; (8003bfc <HAL_RCC_OscConfig+0x298>)
 8003b10:	4313      	orrs	r3, r2
 8003b12:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003b14:	4b39      	ldr	r3, [pc, #228]	; (8003bfc <HAL_RCC_OscConfig+0x298>)
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	69db      	ldr	r3, [r3, #28]
 8003b20:	021b      	lsls	r3, r3, #8
 8003b22:	4936      	ldr	r1, [pc, #216]	; (8003bfc <HAL_RCC_OscConfig+0x298>)
 8003b24:	4313      	orrs	r3, r2
 8003b26:	604b      	str	r3, [r1, #4]
 8003b28:	e01a      	b.n	8003b60 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003b2a:	4b34      	ldr	r3, [pc, #208]	; (8003bfc <HAL_RCC_OscConfig+0x298>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4a33      	ldr	r2, [pc, #204]	; (8003bfc <HAL_RCC_OscConfig+0x298>)
 8003b30:	f023 0301 	bic.w	r3, r3, #1
 8003b34:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003b36:	f7fd fa95 	bl	8001064 <HAL_GetTick>
 8003b3a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003b3c:	e008      	b.n	8003b50 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003b3e:	f7fd fa91 	bl	8001064 <HAL_GetTick>
 8003b42:	4602      	mov	r2, r0
 8003b44:	693b      	ldr	r3, [r7, #16]
 8003b46:	1ad3      	subs	r3, r2, r3
 8003b48:	2b02      	cmp	r3, #2
 8003b4a:	d901      	bls.n	8003b50 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003b4c:	2303      	movs	r3, #3
 8003b4e:	e2e7      	b.n	8004120 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003b50:	4b2a      	ldr	r3, [pc, #168]	; (8003bfc <HAL_RCC_OscConfig+0x298>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f003 0302 	and.w	r3, r3, #2
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d1f0      	bne.n	8003b3e <HAL_RCC_OscConfig+0x1da>
 8003b5c:	e000      	b.n	8003b60 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003b5e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f003 0301 	and.w	r3, r3, #1
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d074      	beq.n	8003c56 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003b6c:	69bb      	ldr	r3, [r7, #24]
 8003b6e:	2b08      	cmp	r3, #8
 8003b70:	d005      	beq.n	8003b7e <HAL_RCC_OscConfig+0x21a>
 8003b72:	69bb      	ldr	r3, [r7, #24]
 8003b74:	2b0c      	cmp	r3, #12
 8003b76:	d10e      	bne.n	8003b96 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003b78:	697b      	ldr	r3, [r7, #20]
 8003b7a:	2b03      	cmp	r3, #3
 8003b7c:	d10b      	bne.n	8003b96 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b7e:	4b1f      	ldr	r3, [pc, #124]	; (8003bfc <HAL_RCC_OscConfig+0x298>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d064      	beq.n	8003c54 <HAL_RCC_OscConfig+0x2f0>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d160      	bne.n	8003c54 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003b92:	2301      	movs	r3, #1
 8003b94:	e2c4      	b.n	8004120 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	685b      	ldr	r3, [r3, #4]
 8003b9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b9e:	d106      	bne.n	8003bae <HAL_RCC_OscConfig+0x24a>
 8003ba0:	4b16      	ldr	r3, [pc, #88]	; (8003bfc <HAL_RCC_OscConfig+0x298>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a15      	ldr	r2, [pc, #84]	; (8003bfc <HAL_RCC_OscConfig+0x298>)
 8003ba6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003baa:	6013      	str	r3, [r2, #0]
 8003bac:	e01d      	b.n	8003bea <HAL_RCC_OscConfig+0x286>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003bb6:	d10c      	bne.n	8003bd2 <HAL_RCC_OscConfig+0x26e>
 8003bb8:	4b10      	ldr	r3, [pc, #64]	; (8003bfc <HAL_RCC_OscConfig+0x298>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4a0f      	ldr	r2, [pc, #60]	; (8003bfc <HAL_RCC_OscConfig+0x298>)
 8003bbe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003bc2:	6013      	str	r3, [r2, #0]
 8003bc4:	4b0d      	ldr	r3, [pc, #52]	; (8003bfc <HAL_RCC_OscConfig+0x298>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4a0c      	ldr	r2, [pc, #48]	; (8003bfc <HAL_RCC_OscConfig+0x298>)
 8003bca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bce:	6013      	str	r3, [r2, #0]
 8003bd0:	e00b      	b.n	8003bea <HAL_RCC_OscConfig+0x286>
 8003bd2:	4b0a      	ldr	r3, [pc, #40]	; (8003bfc <HAL_RCC_OscConfig+0x298>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4a09      	ldr	r2, [pc, #36]	; (8003bfc <HAL_RCC_OscConfig+0x298>)
 8003bd8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003bdc:	6013      	str	r3, [r2, #0]
 8003bde:	4b07      	ldr	r3, [pc, #28]	; (8003bfc <HAL_RCC_OscConfig+0x298>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a06      	ldr	r2, [pc, #24]	; (8003bfc <HAL_RCC_OscConfig+0x298>)
 8003be4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003be8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d01c      	beq.n	8003c2c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bf2:	f7fd fa37 	bl	8001064 <HAL_GetTick>
 8003bf6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003bf8:	e011      	b.n	8003c1e <HAL_RCC_OscConfig+0x2ba>
 8003bfa:	bf00      	nop
 8003bfc:	40021000 	.word	0x40021000
 8003c00:	08006a64 	.word	0x08006a64
 8003c04:	20000010 	.word	0x20000010
 8003c08:	20000014 	.word	0x20000014
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c0c:	f7fd fa2a 	bl	8001064 <HAL_GetTick>
 8003c10:	4602      	mov	r2, r0
 8003c12:	693b      	ldr	r3, [r7, #16]
 8003c14:	1ad3      	subs	r3, r2, r3
 8003c16:	2b64      	cmp	r3, #100	; 0x64
 8003c18:	d901      	bls.n	8003c1e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003c1a:	2303      	movs	r3, #3
 8003c1c:	e280      	b.n	8004120 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c1e:	4baf      	ldr	r3, [pc, #700]	; (8003edc <HAL_RCC_OscConfig+0x578>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d0f0      	beq.n	8003c0c <HAL_RCC_OscConfig+0x2a8>
 8003c2a:	e014      	b.n	8003c56 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c2c:	f7fd fa1a 	bl	8001064 <HAL_GetTick>
 8003c30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003c32:	e008      	b.n	8003c46 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c34:	f7fd fa16 	bl	8001064 <HAL_GetTick>
 8003c38:	4602      	mov	r2, r0
 8003c3a:	693b      	ldr	r3, [r7, #16]
 8003c3c:	1ad3      	subs	r3, r2, r3
 8003c3e:	2b64      	cmp	r3, #100	; 0x64
 8003c40:	d901      	bls.n	8003c46 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003c42:	2303      	movs	r3, #3
 8003c44:	e26c      	b.n	8004120 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003c46:	4ba5      	ldr	r3, [pc, #660]	; (8003edc <HAL_RCC_OscConfig+0x578>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d1f0      	bne.n	8003c34 <HAL_RCC_OscConfig+0x2d0>
 8003c52:	e000      	b.n	8003c56 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f003 0302 	and.w	r3, r3, #2
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d060      	beq.n	8003d24 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003c62:	69bb      	ldr	r3, [r7, #24]
 8003c64:	2b04      	cmp	r3, #4
 8003c66:	d005      	beq.n	8003c74 <HAL_RCC_OscConfig+0x310>
 8003c68:	69bb      	ldr	r3, [r7, #24]
 8003c6a:	2b0c      	cmp	r3, #12
 8003c6c:	d119      	bne.n	8003ca2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003c6e:	697b      	ldr	r3, [r7, #20]
 8003c70:	2b02      	cmp	r3, #2
 8003c72:	d116      	bne.n	8003ca2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c74:	4b99      	ldr	r3, [pc, #612]	; (8003edc <HAL_RCC_OscConfig+0x578>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d005      	beq.n	8003c8c <HAL_RCC_OscConfig+0x328>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	68db      	ldr	r3, [r3, #12]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d101      	bne.n	8003c8c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003c88:	2301      	movs	r3, #1
 8003c8a:	e249      	b.n	8004120 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c8c:	4b93      	ldr	r3, [pc, #588]	; (8003edc <HAL_RCC_OscConfig+0x578>)
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	691b      	ldr	r3, [r3, #16]
 8003c98:	061b      	lsls	r3, r3, #24
 8003c9a:	4990      	ldr	r1, [pc, #576]	; (8003edc <HAL_RCC_OscConfig+0x578>)
 8003c9c:	4313      	orrs	r3, r2
 8003c9e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ca0:	e040      	b.n	8003d24 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	68db      	ldr	r3, [r3, #12]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d023      	beq.n	8003cf2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003caa:	4b8c      	ldr	r3, [pc, #560]	; (8003edc <HAL_RCC_OscConfig+0x578>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4a8b      	ldr	r2, [pc, #556]	; (8003edc <HAL_RCC_OscConfig+0x578>)
 8003cb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cb4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cb6:	f7fd f9d5 	bl	8001064 <HAL_GetTick>
 8003cba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003cbc:	e008      	b.n	8003cd0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003cbe:	f7fd f9d1 	bl	8001064 <HAL_GetTick>
 8003cc2:	4602      	mov	r2, r0
 8003cc4:	693b      	ldr	r3, [r7, #16]
 8003cc6:	1ad3      	subs	r3, r2, r3
 8003cc8:	2b02      	cmp	r3, #2
 8003cca:	d901      	bls.n	8003cd0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003ccc:	2303      	movs	r3, #3
 8003cce:	e227      	b.n	8004120 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003cd0:	4b82      	ldr	r3, [pc, #520]	; (8003edc <HAL_RCC_OscConfig+0x578>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d0f0      	beq.n	8003cbe <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cdc:	4b7f      	ldr	r3, [pc, #508]	; (8003edc <HAL_RCC_OscConfig+0x578>)
 8003cde:	685b      	ldr	r3, [r3, #4]
 8003ce0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	691b      	ldr	r3, [r3, #16]
 8003ce8:	061b      	lsls	r3, r3, #24
 8003cea:	497c      	ldr	r1, [pc, #496]	; (8003edc <HAL_RCC_OscConfig+0x578>)
 8003cec:	4313      	orrs	r3, r2
 8003cee:	604b      	str	r3, [r1, #4]
 8003cf0:	e018      	b.n	8003d24 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003cf2:	4b7a      	ldr	r3, [pc, #488]	; (8003edc <HAL_RCC_OscConfig+0x578>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a79      	ldr	r2, [pc, #484]	; (8003edc <HAL_RCC_OscConfig+0x578>)
 8003cf8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003cfc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cfe:	f7fd f9b1 	bl	8001064 <HAL_GetTick>
 8003d02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003d04:	e008      	b.n	8003d18 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d06:	f7fd f9ad 	bl	8001064 <HAL_GetTick>
 8003d0a:	4602      	mov	r2, r0
 8003d0c:	693b      	ldr	r3, [r7, #16]
 8003d0e:	1ad3      	subs	r3, r2, r3
 8003d10:	2b02      	cmp	r3, #2
 8003d12:	d901      	bls.n	8003d18 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003d14:	2303      	movs	r3, #3
 8003d16:	e203      	b.n	8004120 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003d18:	4b70      	ldr	r3, [pc, #448]	; (8003edc <HAL_RCC_OscConfig+0x578>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d1f0      	bne.n	8003d06 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f003 0308 	and.w	r3, r3, #8
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d03c      	beq.n	8003daa <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	695b      	ldr	r3, [r3, #20]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d01c      	beq.n	8003d72 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d38:	4b68      	ldr	r3, [pc, #416]	; (8003edc <HAL_RCC_OscConfig+0x578>)
 8003d3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d3e:	4a67      	ldr	r2, [pc, #412]	; (8003edc <HAL_RCC_OscConfig+0x578>)
 8003d40:	f043 0301 	orr.w	r3, r3, #1
 8003d44:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d48:	f7fd f98c 	bl	8001064 <HAL_GetTick>
 8003d4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003d4e:	e008      	b.n	8003d62 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d50:	f7fd f988 	bl	8001064 <HAL_GetTick>
 8003d54:	4602      	mov	r2, r0
 8003d56:	693b      	ldr	r3, [r7, #16]
 8003d58:	1ad3      	subs	r3, r2, r3
 8003d5a:	2b02      	cmp	r3, #2
 8003d5c:	d901      	bls.n	8003d62 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003d5e:	2303      	movs	r3, #3
 8003d60:	e1de      	b.n	8004120 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003d62:	4b5e      	ldr	r3, [pc, #376]	; (8003edc <HAL_RCC_OscConfig+0x578>)
 8003d64:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d68:	f003 0302 	and.w	r3, r3, #2
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d0ef      	beq.n	8003d50 <HAL_RCC_OscConfig+0x3ec>
 8003d70:	e01b      	b.n	8003daa <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d72:	4b5a      	ldr	r3, [pc, #360]	; (8003edc <HAL_RCC_OscConfig+0x578>)
 8003d74:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d78:	4a58      	ldr	r2, [pc, #352]	; (8003edc <HAL_RCC_OscConfig+0x578>)
 8003d7a:	f023 0301 	bic.w	r3, r3, #1
 8003d7e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d82:	f7fd f96f 	bl	8001064 <HAL_GetTick>
 8003d86:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003d88:	e008      	b.n	8003d9c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d8a:	f7fd f96b 	bl	8001064 <HAL_GetTick>
 8003d8e:	4602      	mov	r2, r0
 8003d90:	693b      	ldr	r3, [r7, #16]
 8003d92:	1ad3      	subs	r3, r2, r3
 8003d94:	2b02      	cmp	r3, #2
 8003d96:	d901      	bls.n	8003d9c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003d98:	2303      	movs	r3, #3
 8003d9a:	e1c1      	b.n	8004120 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003d9c:	4b4f      	ldr	r3, [pc, #316]	; (8003edc <HAL_RCC_OscConfig+0x578>)
 8003d9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003da2:	f003 0302 	and.w	r3, r3, #2
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d1ef      	bne.n	8003d8a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f003 0304 	and.w	r3, r3, #4
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	f000 80a6 	beq.w	8003f04 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003db8:	2300      	movs	r3, #0
 8003dba:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003dbc:	4b47      	ldr	r3, [pc, #284]	; (8003edc <HAL_RCC_OscConfig+0x578>)
 8003dbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d10d      	bne.n	8003de4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003dc8:	4b44      	ldr	r3, [pc, #272]	; (8003edc <HAL_RCC_OscConfig+0x578>)
 8003dca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dcc:	4a43      	ldr	r2, [pc, #268]	; (8003edc <HAL_RCC_OscConfig+0x578>)
 8003dce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003dd2:	6593      	str	r3, [r2, #88]	; 0x58
 8003dd4:	4b41      	ldr	r3, [pc, #260]	; (8003edc <HAL_RCC_OscConfig+0x578>)
 8003dd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ddc:	60bb      	str	r3, [r7, #8]
 8003dde:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003de0:	2301      	movs	r3, #1
 8003de2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003de4:	4b3e      	ldr	r3, [pc, #248]	; (8003ee0 <HAL_RCC_OscConfig+0x57c>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d118      	bne.n	8003e22 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003df0:	4b3b      	ldr	r3, [pc, #236]	; (8003ee0 <HAL_RCC_OscConfig+0x57c>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4a3a      	ldr	r2, [pc, #232]	; (8003ee0 <HAL_RCC_OscConfig+0x57c>)
 8003df6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dfa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003dfc:	f7fd f932 	bl	8001064 <HAL_GetTick>
 8003e00:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e02:	e008      	b.n	8003e16 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e04:	f7fd f92e 	bl	8001064 <HAL_GetTick>
 8003e08:	4602      	mov	r2, r0
 8003e0a:	693b      	ldr	r3, [r7, #16]
 8003e0c:	1ad3      	subs	r3, r2, r3
 8003e0e:	2b02      	cmp	r3, #2
 8003e10:	d901      	bls.n	8003e16 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003e12:	2303      	movs	r3, #3
 8003e14:	e184      	b.n	8004120 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e16:	4b32      	ldr	r3, [pc, #200]	; (8003ee0 <HAL_RCC_OscConfig+0x57c>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d0f0      	beq.n	8003e04 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	689b      	ldr	r3, [r3, #8]
 8003e26:	2b01      	cmp	r3, #1
 8003e28:	d108      	bne.n	8003e3c <HAL_RCC_OscConfig+0x4d8>
 8003e2a:	4b2c      	ldr	r3, [pc, #176]	; (8003edc <HAL_RCC_OscConfig+0x578>)
 8003e2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e30:	4a2a      	ldr	r2, [pc, #168]	; (8003edc <HAL_RCC_OscConfig+0x578>)
 8003e32:	f043 0301 	orr.w	r3, r3, #1
 8003e36:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003e3a:	e024      	b.n	8003e86 <HAL_RCC_OscConfig+0x522>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	689b      	ldr	r3, [r3, #8]
 8003e40:	2b05      	cmp	r3, #5
 8003e42:	d110      	bne.n	8003e66 <HAL_RCC_OscConfig+0x502>
 8003e44:	4b25      	ldr	r3, [pc, #148]	; (8003edc <HAL_RCC_OscConfig+0x578>)
 8003e46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e4a:	4a24      	ldr	r2, [pc, #144]	; (8003edc <HAL_RCC_OscConfig+0x578>)
 8003e4c:	f043 0304 	orr.w	r3, r3, #4
 8003e50:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003e54:	4b21      	ldr	r3, [pc, #132]	; (8003edc <HAL_RCC_OscConfig+0x578>)
 8003e56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e5a:	4a20      	ldr	r2, [pc, #128]	; (8003edc <HAL_RCC_OscConfig+0x578>)
 8003e5c:	f043 0301 	orr.w	r3, r3, #1
 8003e60:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003e64:	e00f      	b.n	8003e86 <HAL_RCC_OscConfig+0x522>
 8003e66:	4b1d      	ldr	r3, [pc, #116]	; (8003edc <HAL_RCC_OscConfig+0x578>)
 8003e68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e6c:	4a1b      	ldr	r2, [pc, #108]	; (8003edc <HAL_RCC_OscConfig+0x578>)
 8003e6e:	f023 0301 	bic.w	r3, r3, #1
 8003e72:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003e76:	4b19      	ldr	r3, [pc, #100]	; (8003edc <HAL_RCC_OscConfig+0x578>)
 8003e78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e7c:	4a17      	ldr	r2, [pc, #92]	; (8003edc <HAL_RCC_OscConfig+0x578>)
 8003e7e:	f023 0304 	bic.w	r3, r3, #4
 8003e82:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	689b      	ldr	r3, [r3, #8]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d016      	beq.n	8003ebc <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e8e:	f7fd f8e9 	bl	8001064 <HAL_GetTick>
 8003e92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e94:	e00a      	b.n	8003eac <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e96:	f7fd f8e5 	bl	8001064 <HAL_GetTick>
 8003e9a:	4602      	mov	r2, r0
 8003e9c:	693b      	ldr	r3, [r7, #16]
 8003e9e:	1ad3      	subs	r3, r2, r3
 8003ea0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d901      	bls.n	8003eac <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8003ea8:	2303      	movs	r3, #3
 8003eaa:	e139      	b.n	8004120 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003eac:	4b0b      	ldr	r3, [pc, #44]	; (8003edc <HAL_RCC_OscConfig+0x578>)
 8003eae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003eb2:	f003 0302 	and.w	r3, r3, #2
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d0ed      	beq.n	8003e96 <HAL_RCC_OscConfig+0x532>
 8003eba:	e01a      	b.n	8003ef2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ebc:	f7fd f8d2 	bl	8001064 <HAL_GetTick>
 8003ec0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003ec2:	e00f      	b.n	8003ee4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ec4:	f7fd f8ce 	bl	8001064 <HAL_GetTick>
 8003ec8:	4602      	mov	r2, r0
 8003eca:	693b      	ldr	r3, [r7, #16]
 8003ecc:	1ad3      	subs	r3, r2, r3
 8003ece:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d906      	bls.n	8003ee4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003ed6:	2303      	movs	r3, #3
 8003ed8:	e122      	b.n	8004120 <HAL_RCC_OscConfig+0x7bc>
 8003eda:	bf00      	nop
 8003edc:	40021000 	.word	0x40021000
 8003ee0:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003ee4:	4b90      	ldr	r3, [pc, #576]	; (8004128 <HAL_RCC_OscConfig+0x7c4>)
 8003ee6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003eea:	f003 0302 	and.w	r3, r3, #2
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d1e8      	bne.n	8003ec4 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ef2:	7ffb      	ldrb	r3, [r7, #31]
 8003ef4:	2b01      	cmp	r3, #1
 8003ef6:	d105      	bne.n	8003f04 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ef8:	4b8b      	ldr	r3, [pc, #556]	; (8004128 <HAL_RCC_OscConfig+0x7c4>)
 8003efa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003efc:	4a8a      	ldr	r2, [pc, #552]	; (8004128 <HAL_RCC_OscConfig+0x7c4>)
 8003efe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f02:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	f000 8108 	beq.w	800411e <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f12:	2b02      	cmp	r3, #2
 8003f14:	f040 80d0 	bne.w	80040b8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003f18:	4b83      	ldr	r3, [pc, #524]	; (8004128 <HAL_RCC_OscConfig+0x7c4>)
 8003f1a:	68db      	ldr	r3, [r3, #12]
 8003f1c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f1e:	697b      	ldr	r3, [r7, #20]
 8003f20:	f003 0203 	and.w	r2, r3, #3
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f28:	429a      	cmp	r2, r3
 8003f2a:	d130      	bne.n	8003f8e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003f2c:	697b      	ldr	r3, [r7, #20]
 8003f2e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f36:	3b01      	subs	r3, #1
 8003f38:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f3a:	429a      	cmp	r2, r3
 8003f3c:	d127      	bne.n	8003f8e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f3e:	697b      	ldr	r3, [r7, #20]
 8003f40:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f48:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003f4a:	429a      	cmp	r2, r3
 8003f4c:	d11f      	bne.n	8003f8e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003f4e:	697b      	ldr	r3, [r7, #20]
 8003f50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f54:	687a      	ldr	r2, [r7, #4]
 8003f56:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003f58:	2a07      	cmp	r2, #7
 8003f5a:	bf14      	ite	ne
 8003f5c:	2201      	movne	r2, #1
 8003f5e:	2200      	moveq	r2, #0
 8003f60:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d113      	bne.n	8003f8e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f66:	697b      	ldr	r3, [r7, #20]
 8003f68:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f70:	085b      	lsrs	r3, r3, #1
 8003f72:	3b01      	subs	r3, #1
 8003f74:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003f76:	429a      	cmp	r2, r3
 8003f78:	d109      	bne.n	8003f8e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003f7a:	697b      	ldr	r3, [r7, #20]
 8003f7c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f84:	085b      	lsrs	r3, r3, #1
 8003f86:	3b01      	subs	r3, #1
 8003f88:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f8a:	429a      	cmp	r2, r3
 8003f8c:	d06e      	beq.n	800406c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003f8e:	69bb      	ldr	r3, [r7, #24]
 8003f90:	2b0c      	cmp	r3, #12
 8003f92:	d069      	beq.n	8004068 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003f94:	4b64      	ldr	r3, [pc, #400]	; (8004128 <HAL_RCC_OscConfig+0x7c4>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d105      	bne.n	8003fac <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003fa0:	4b61      	ldr	r3, [pc, #388]	; (8004128 <HAL_RCC_OscConfig+0x7c4>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d001      	beq.n	8003fb0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003fac:	2301      	movs	r3, #1
 8003fae:	e0b7      	b.n	8004120 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003fb0:	4b5d      	ldr	r3, [pc, #372]	; (8004128 <HAL_RCC_OscConfig+0x7c4>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4a5c      	ldr	r2, [pc, #368]	; (8004128 <HAL_RCC_OscConfig+0x7c4>)
 8003fb6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003fba:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003fbc:	f7fd f852 	bl	8001064 <HAL_GetTick>
 8003fc0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003fc2:	e008      	b.n	8003fd6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fc4:	f7fd f84e 	bl	8001064 <HAL_GetTick>
 8003fc8:	4602      	mov	r2, r0
 8003fca:	693b      	ldr	r3, [r7, #16]
 8003fcc:	1ad3      	subs	r3, r2, r3
 8003fce:	2b02      	cmp	r3, #2
 8003fd0:	d901      	bls.n	8003fd6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003fd2:	2303      	movs	r3, #3
 8003fd4:	e0a4      	b.n	8004120 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003fd6:	4b54      	ldr	r3, [pc, #336]	; (8004128 <HAL_RCC_OscConfig+0x7c4>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d1f0      	bne.n	8003fc4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003fe2:	4b51      	ldr	r3, [pc, #324]	; (8004128 <HAL_RCC_OscConfig+0x7c4>)
 8003fe4:	68da      	ldr	r2, [r3, #12]
 8003fe6:	4b51      	ldr	r3, [pc, #324]	; (800412c <HAL_RCC_OscConfig+0x7c8>)
 8003fe8:	4013      	ands	r3, r2
 8003fea:	687a      	ldr	r2, [r7, #4]
 8003fec:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003fee:	687a      	ldr	r2, [r7, #4]
 8003ff0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003ff2:	3a01      	subs	r2, #1
 8003ff4:	0112      	lsls	r2, r2, #4
 8003ff6:	4311      	orrs	r1, r2
 8003ff8:	687a      	ldr	r2, [r7, #4]
 8003ffa:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003ffc:	0212      	lsls	r2, r2, #8
 8003ffe:	4311      	orrs	r1, r2
 8004000:	687a      	ldr	r2, [r7, #4]
 8004002:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004004:	0852      	lsrs	r2, r2, #1
 8004006:	3a01      	subs	r2, #1
 8004008:	0552      	lsls	r2, r2, #21
 800400a:	4311      	orrs	r1, r2
 800400c:	687a      	ldr	r2, [r7, #4]
 800400e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004010:	0852      	lsrs	r2, r2, #1
 8004012:	3a01      	subs	r2, #1
 8004014:	0652      	lsls	r2, r2, #25
 8004016:	4311      	orrs	r1, r2
 8004018:	687a      	ldr	r2, [r7, #4]
 800401a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800401c:	0912      	lsrs	r2, r2, #4
 800401e:	0452      	lsls	r2, r2, #17
 8004020:	430a      	orrs	r2, r1
 8004022:	4941      	ldr	r1, [pc, #260]	; (8004128 <HAL_RCC_OscConfig+0x7c4>)
 8004024:	4313      	orrs	r3, r2
 8004026:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004028:	4b3f      	ldr	r3, [pc, #252]	; (8004128 <HAL_RCC_OscConfig+0x7c4>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a3e      	ldr	r2, [pc, #248]	; (8004128 <HAL_RCC_OscConfig+0x7c4>)
 800402e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004032:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004034:	4b3c      	ldr	r3, [pc, #240]	; (8004128 <HAL_RCC_OscConfig+0x7c4>)
 8004036:	68db      	ldr	r3, [r3, #12]
 8004038:	4a3b      	ldr	r2, [pc, #236]	; (8004128 <HAL_RCC_OscConfig+0x7c4>)
 800403a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800403e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004040:	f7fd f810 	bl	8001064 <HAL_GetTick>
 8004044:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004046:	e008      	b.n	800405a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004048:	f7fd f80c 	bl	8001064 <HAL_GetTick>
 800404c:	4602      	mov	r2, r0
 800404e:	693b      	ldr	r3, [r7, #16]
 8004050:	1ad3      	subs	r3, r2, r3
 8004052:	2b02      	cmp	r3, #2
 8004054:	d901      	bls.n	800405a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004056:	2303      	movs	r3, #3
 8004058:	e062      	b.n	8004120 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800405a:	4b33      	ldr	r3, [pc, #204]	; (8004128 <HAL_RCC_OscConfig+0x7c4>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004062:	2b00      	cmp	r3, #0
 8004064:	d0f0      	beq.n	8004048 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004066:	e05a      	b.n	800411e <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004068:	2301      	movs	r3, #1
 800406a:	e059      	b.n	8004120 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800406c:	4b2e      	ldr	r3, [pc, #184]	; (8004128 <HAL_RCC_OscConfig+0x7c4>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004074:	2b00      	cmp	r3, #0
 8004076:	d152      	bne.n	800411e <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004078:	4b2b      	ldr	r3, [pc, #172]	; (8004128 <HAL_RCC_OscConfig+0x7c4>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4a2a      	ldr	r2, [pc, #168]	; (8004128 <HAL_RCC_OscConfig+0x7c4>)
 800407e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004082:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004084:	4b28      	ldr	r3, [pc, #160]	; (8004128 <HAL_RCC_OscConfig+0x7c4>)
 8004086:	68db      	ldr	r3, [r3, #12]
 8004088:	4a27      	ldr	r2, [pc, #156]	; (8004128 <HAL_RCC_OscConfig+0x7c4>)
 800408a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800408e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004090:	f7fc ffe8 	bl	8001064 <HAL_GetTick>
 8004094:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004096:	e008      	b.n	80040aa <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004098:	f7fc ffe4 	bl	8001064 <HAL_GetTick>
 800409c:	4602      	mov	r2, r0
 800409e:	693b      	ldr	r3, [r7, #16]
 80040a0:	1ad3      	subs	r3, r2, r3
 80040a2:	2b02      	cmp	r3, #2
 80040a4:	d901      	bls.n	80040aa <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80040a6:	2303      	movs	r3, #3
 80040a8:	e03a      	b.n	8004120 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040aa:	4b1f      	ldr	r3, [pc, #124]	; (8004128 <HAL_RCC_OscConfig+0x7c4>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d0f0      	beq.n	8004098 <HAL_RCC_OscConfig+0x734>
 80040b6:	e032      	b.n	800411e <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80040b8:	69bb      	ldr	r3, [r7, #24]
 80040ba:	2b0c      	cmp	r3, #12
 80040bc:	d02d      	beq.n	800411a <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040be:	4b1a      	ldr	r3, [pc, #104]	; (8004128 <HAL_RCC_OscConfig+0x7c4>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4a19      	ldr	r2, [pc, #100]	; (8004128 <HAL_RCC_OscConfig+0x7c4>)
 80040c4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80040c8:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80040ca:	4b17      	ldr	r3, [pc, #92]	; (8004128 <HAL_RCC_OscConfig+0x7c4>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d105      	bne.n	80040e2 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80040d6:	4b14      	ldr	r3, [pc, #80]	; (8004128 <HAL_RCC_OscConfig+0x7c4>)
 80040d8:	68db      	ldr	r3, [r3, #12]
 80040da:	4a13      	ldr	r2, [pc, #76]	; (8004128 <HAL_RCC_OscConfig+0x7c4>)
 80040dc:	f023 0303 	bic.w	r3, r3, #3
 80040e0:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80040e2:	4b11      	ldr	r3, [pc, #68]	; (8004128 <HAL_RCC_OscConfig+0x7c4>)
 80040e4:	68db      	ldr	r3, [r3, #12]
 80040e6:	4a10      	ldr	r2, [pc, #64]	; (8004128 <HAL_RCC_OscConfig+0x7c4>)
 80040e8:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80040ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040f0:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040f2:	f7fc ffb7 	bl	8001064 <HAL_GetTick>
 80040f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80040f8:	e008      	b.n	800410c <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040fa:	f7fc ffb3 	bl	8001064 <HAL_GetTick>
 80040fe:	4602      	mov	r2, r0
 8004100:	693b      	ldr	r3, [r7, #16]
 8004102:	1ad3      	subs	r3, r2, r3
 8004104:	2b02      	cmp	r3, #2
 8004106:	d901      	bls.n	800410c <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8004108:	2303      	movs	r3, #3
 800410a:	e009      	b.n	8004120 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800410c:	4b06      	ldr	r3, [pc, #24]	; (8004128 <HAL_RCC_OscConfig+0x7c4>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004114:	2b00      	cmp	r3, #0
 8004116:	d1f0      	bne.n	80040fa <HAL_RCC_OscConfig+0x796>
 8004118:	e001      	b.n	800411e <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800411a:	2301      	movs	r3, #1
 800411c:	e000      	b.n	8004120 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 800411e:	2300      	movs	r3, #0
}
 8004120:	4618      	mov	r0, r3
 8004122:	3720      	adds	r7, #32
 8004124:	46bd      	mov	sp, r7
 8004126:	bd80      	pop	{r7, pc}
 8004128:	40021000 	.word	0x40021000
 800412c:	f99d808c 	.word	0xf99d808c

08004130 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b084      	sub	sp, #16
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
 8004138:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d101      	bne.n	8004144 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004140:	2301      	movs	r3, #1
 8004142:	e0c8      	b.n	80042d6 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004144:	4b66      	ldr	r3, [pc, #408]	; (80042e0 <HAL_RCC_ClockConfig+0x1b0>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f003 0307 	and.w	r3, r3, #7
 800414c:	683a      	ldr	r2, [r7, #0]
 800414e:	429a      	cmp	r2, r3
 8004150:	d910      	bls.n	8004174 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004152:	4b63      	ldr	r3, [pc, #396]	; (80042e0 <HAL_RCC_ClockConfig+0x1b0>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f023 0207 	bic.w	r2, r3, #7
 800415a:	4961      	ldr	r1, [pc, #388]	; (80042e0 <HAL_RCC_ClockConfig+0x1b0>)
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	4313      	orrs	r3, r2
 8004160:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004162:	4b5f      	ldr	r3, [pc, #380]	; (80042e0 <HAL_RCC_ClockConfig+0x1b0>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f003 0307 	and.w	r3, r3, #7
 800416a:	683a      	ldr	r2, [r7, #0]
 800416c:	429a      	cmp	r2, r3
 800416e:	d001      	beq.n	8004174 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004170:	2301      	movs	r3, #1
 8004172:	e0b0      	b.n	80042d6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f003 0301 	and.w	r3, r3, #1
 800417c:	2b00      	cmp	r3, #0
 800417e:	d04c      	beq.n	800421a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	2b03      	cmp	r3, #3
 8004186:	d107      	bne.n	8004198 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004188:	4b56      	ldr	r3, [pc, #344]	; (80042e4 <HAL_RCC_ClockConfig+0x1b4>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004190:	2b00      	cmp	r3, #0
 8004192:	d121      	bne.n	80041d8 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8004194:	2301      	movs	r3, #1
 8004196:	e09e      	b.n	80042d6 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	2b02      	cmp	r3, #2
 800419e:	d107      	bne.n	80041b0 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80041a0:	4b50      	ldr	r3, [pc, #320]	; (80042e4 <HAL_RCC_ClockConfig+0x1b4>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d115      	bne.n	80041d8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80041ac:	2301      	movs	r3, #1
 80041ae:	e092      	b.n	80042d6 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	685b      	ldr	r3, [r3, #4]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d107      	bne.n	80041c8 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80041b8:	4b4a      	ldr	r3, [pc, #296]	; (80042e4 <HAL_RCC_ClockConfig+0x1b4>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f003 0302 	and.w	r3, r3, #2
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d109      	bne.n	80041d8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80041c4:	2301      	movs	r3, #1
 80041c6:	e086      	b.n	80042d6 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80041c8:	4b46      	ldr	r3, [pc, #280]	; (80042e4 <HAL_RCC_ClockConfig+0x1b4>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d101      	bne.n	80041d8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80041d4:	2301      	movs	r3, #1
 80041d6:	e07e      	b.n	80042d6 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80041d8:	4b42      	ldr	r3, [pc, #264]	; (80042e4 <HAL_RCC_ClockConfig+0x1b4>)
 80041da:	689b      	ldr	r3, [r3, #8]
 80041dc:	f023 0203 	bic.w	r2, r3, #3
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	493f      	ldr	r1, [pc, #252]	; (80042e4 <HAL_RCC_ClockConfig+0x1b4>)
 80041e6:	4313      	orrs	r3, r2
 80041e8:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041ea:	f7fc ff3b 	bl	8001064 <HAL_GetTick>
 80041ee:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041f0:	e00a      	b.n	8004208 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041f2:	f7fc ff37 	bl	8001064 <HAL_GetTick>
 80041f6:	4602      	mov	r2, r0
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	1ad3      	subs	r3, r2, r3
 80041fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004200:	4293      	cmp	r3, r2
 8004202:	d901      	bls.n	8004208 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8004204:	2303      	movs	r3, #3
 8004206:	e066      	b.n	80042d6 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004208:	4b36      	ldr	r3, [pc, #216]	; (80042e4 <HAL_RCC_ClockConfig+0x1b4>)
 800420a:	689b      	ldr	r3, [r3, #8]
 800420c:	f003 020c 	and.w	r2, r3, #12
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	009b      	lsls	r3, r3, #2
 8004216:	429a      	cmp	r2, r3
 8004218:	d1eb      	bne.n	80041f2 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f003 0302 	and.w	r3, r3, #2
 8004222:	2b00      	cmp	r3, #0
 8004224:	d008      	beq.n	8004238 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004226:	4b2f      	ldr	r3, [pc, #188]	; (80042e4 <HAL_RCC_ClockConfig+0x1b4>)
 8004228:	689b      	ldr	r3, [r3, #8]
 800422a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	689b      	ldr	r3, [r3, #8]
 8004232:	492c      	ldr	r1, [pc, #176]	; (80042e4 <HAL_RCC_ClockConfig+0x1b4>)
 8004234:	4313      	orrs	r3, r2
 8004236:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004238:	4b29      	ldr	r3, [pc, #164]	; (80042e0 <HAL_RCC_ClockConfig+0x1b0>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f003 0307 	and.w	r3, r3, #7
 8004240:	683a      	ldr	r2, [r7, #0]
 8004242:	429a      	cmp	r2, r3
 8004244:	d210      	bcs.n	8004268 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004246:	4b26      	ldr	r3, [pc, #152]	; (80042e0 <HAL_RCC_ClockConfig+0x1b0>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f023 0207 	bic.w	r2, r3, #7
 800424e:	4924      	ldr	r1, [pc, #144]	; (80042e0 <HAL_RCC_ClockConfig+0x1b0>)
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	4313      	orrs	r3, r2
 8004254:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004256:	4b22      	ldr	r3, [pc, #136]	; (80042e0 <HAL_RCC_ClockConfig+0x1b0>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f003 0307 	and.w	r3, r3, #7
 800425e:	683a      	ldr	r2, [r7, #0]
 8004260:	429a      	cmp	r2, r3
 8004262:	d001      	beq.n	8004268 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8004264:	2301      	movs	r3, #1
 8004266:	e036      	b.n	80042d6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f003 0304 	and.w	r3, r3, #4
 8004270:	2b00      	cmp	r3, #0
 8004272:	d008      	beq.n	8004286 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004274:	4b1b      	ldr	r3, [pc, #108]	; (80042e4 <HAL_RCC_ClockConfig+0x1b4>)
 8004276:	689b      	ldr	r3, [r3, #8]
 8004278:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	68db      	ldr	r3, [r3, #12]
 8004280:	4918      	ldr	r1, [pc, #96]	; (80042e4 <HAL_RCC_ClockConfig+0x1b4>)
 8004282:	4313      	orrs	r3, r2
 8004284:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f003 0308 	and.w	r3, r3, #8
 800428e:	2b00      	cmp	r3, #0
 8004290:	d009      	beq.n	80042a6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004292:	4b14      	ldr	r3, [pc, #80]	; (80042e4 <HAL_RCC_ClockConfig+0x1b4>)
 8004294:	689b      	ldr	r3, [r3, #8]
 8004296:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	691b      	ldr	r3, [r3, #16]
 800429e:	00db      	lsls	r3, r3, #3
 80042a0:	4910      	ldr	r1, [pc, #64]	; (80042e4 <HAL_RCC_ClockConfig+0x1b4>)
 80042a2:	4313      	orrs	r3, r2
 80042a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80042a6:	f000 f825 	bl	80042f4 <HAL_RCC_GetSysClockFreq>
 80042aa:	4601      	mov	r1, r0
 80042ac:	4b0d      	ldr	r3, [pc, #52]	; (80042e4 <HAL_RCC_ClockConfig+0x1b4>)
 80042ae:	689b      	ldr	r3, [r3, #8]
 80042b0:	091b      	lsrs	r3, r3, #4
 80042b2:	f003 030f 	and.w	r3, r3, #15
 80042b6:	4a0c      	ldr	r2, [pc, #48]	; (80042e8 <HAL_RCC_ClockConfig+0x1b8>)
 80042b8:	5cd3      	ldrb	r3, [r2, r3]
 80042ba:	f003 031f 	and.w	r3, r3, #31
 80042be:	fa21 f303 	lsr.w	r3, r1, r3
 80042c2:	4a0a      	ldr	r2, [pc, #40]	; (80042ec <HAL_RCC_ClockConfig+0x1bc>)
 80042c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80042c6:	4b0a      	ldr	r3, [pc, #40]	; (80042f0 <HAL_RCC_ClockConfig+0x1c0>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4618      	mov	r0, r3
 80042cc:	f7fc fe7a 	bl	8000fc4 <HAL_InitTick>
 80042d0:	4603      	mov	r3, r0
 80042d2:	72fb      	strb	r3, [r7, #11]

  return status;
 80042d4:	7afb      	ldrb	r3, [r7, #11]
}
 80042d6:	4618      	mov	r0, r3
 80042d8:	3710      	adds	r7, #16
 80042da:	46bd      	mov	sp, r7
 80042dc:	bd80      	pop	{r7, pc}
 80042de:	bf00      	nop
 80042e0:	40022000 	.word	0x40022000
 80042e4:	40021000 	.word	0x40021000
 80042e8:	08006a64 	.word	0x08006a64
 80042ec:	20000010 	.word	0x20000010
 80042f0:	20000014 	.word	0x20000014

080042f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80042f4:	b480      	push	{r7}
 80042f6:	b089      	sub	sp, #36	; 0x24
 80042f8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80042fa:	2300      	movs	r3, #0
 80042fc:	61fb      	str	r3, [r7, #28]
 80042fe:	2300      	movs	r3, #0
 8004300:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004302:	4b3d      	ldr	r3, [pc, #244]	; (80043f8 <HAL_RCC_GetSysClockFreq+0x104>)
 8004304:	689b      	ldr	r3, [r3, #8]
 8004306:	f003 030c 	and.w	r3, r3, #12
 800430a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800430c:	4b3a      	ldr	r3, [pc, #232]	; (80043f8 <HAL_RCC_GetSysClockFreq+0x104>)
 800430e:	68db      	ldr	r3, [r3, #12]
 8004310:	f003 0303 	and.w	r3, r3, #3
 8004314:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004316:	693b      	ldr	r3, [r7, #16]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d005      	beq.n	8004328 <HAL_RCC_GetSysClockFreq+0x34>
 800431c:	693b      	ldr	r3, [r7, #16]
 800431e:	2b0c      	cmp	r3, #12
 8004320:	d121      	bne.n	8004366 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	2b01      	cmp	r3, #1
 8004326:	d11e      	bne.n	8004366 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004328:	4b33      	ldr	r3, [pc, #204]	; (80043f8 <HAL_RCC_GetSysClockFreq+0x104>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f003 0308 	and.w	r3, r3, #8
 8004330:	2b00      	cmp	r3, #0
 8004332:	d107      	bne.n	8004344 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004334:	4b30      	ldr	r3, [pc, #192]	; (80043f8 <HAL_RCC_GetSysClockFreq+0x104>)
 8004336:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800433a:	0a1b      	lsrs	r3, r3, #8
 800433c:	f003 030f 	and.w	r3, r3, #15
 8004340:	61fb      	str	r3, [r7, #28]
 8004342:	e005      	b.n	8004350 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004344:	4b2c      	ldr	r3, [pc, #176]	; (80043f8 <HAL_RCC_GetSysClockFreq+0x104>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	091b      	lsrs	r3, r3, #4
 800434a:	f003 030f 	and.w	r3, r3, #15
 800434e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004350:	4a2a      	ldr	r2, [pc, #168]	; (80043fc <HAL_RCC_GetSysClockFreq+0x108>)
 8004352:	69fb      	ldr	r3, [r7, #28]
 8004354:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004358:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800435a:	693b      	ldr	r3, [r7, #16]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d10d      	bne.n	800437c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004360:	69fb      	ldr	r3, [r7, #28]
 8004362:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004364:	e00a      	b.n	800437c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004366:	693b      	ldr	r3, [r7, #16]
 8004368:	2b04      	cmp	r3, #4
 800436a:	d102      	bne.n	8004372 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800436c:	4b24      	ldr	r3, [pc, #144]	; (8004400 <HAL_RCC_GetSysClockFreq+0x10c>)
 800436e:	61bb      	str	r3, [r7, #24]
 8004370:	e004      	b.n	800437c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004372:	693b      	ldr	r3, [r7, #16]
 8004374:	2b08      	cmp	r3, #8
 8004376:	d101      	bne.n	800437c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004378:	4b22      	ldr	r3, [pc, #136]	; (8004404 <HAL_RCC_GetSysClockFreq+0x110>)
 800437a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800437c:	693b      	ldr	r3, [r7, #16]
 800437e:	2b0c      	cmp	r3, #12
 8004380:	d133      	bne.n	80043ea <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004382:	4b1d      	ldr	r3, [pc, #116]	; (80043f8 <HAL_RCC_GetSysClockFreq+0x104>)
 8004384:	68db      	ldr	r3, [r3, #12]
 8004386:	f003 0303 	and.w	r3, r3, #3
 800438a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	2b02      	cmp	r3, #2
 8004390:	d002      	beq.n	8004398 <HAL_RCC_GetSysClockFreq+0xa4>
 8004392:	2b03      	cmp	r3, #3
 8004394:	d003      	beq.n	800439e <HAL_RCC_GetSysClockFreq+0xaa>
 8004396:	e005      	b.n	80043a4 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004398:	4b19      	ldr	r3, [pc, #100]	; (8004400 <HAL_RCC_GetSysClockFreq+0x10c>)
 800439a:	617b      	str	r3, [r7, #20]
      break;
 800439c:	e005      	b.n	80043aa <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800439e:	4b19      	ldr	r3, [pc, #100]	; (8004404 <HAL_RCC_GetSysClockFreq+0x110>)
 80043a0:	617b      	str	r3, [r7, #20]
      break;
 80043a2:	e002      	b.n	80043aa <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80043a4:	69fb      	ldr	r3, [r7, #28]
 80043a6:	617b      	str	r3, [r7, #20]
      break;
 80043a8:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80043aa:	4b13      	ldr	r3, [pc, #76]	; (80043f8 <HAL_RCC_GetSysClockFreq+0x104>)
 80043ac:	68db      	ldr	r3, [r3, #12]
 80043ae:	091b      	lsrs	r3, r3, #4
 80043b0:	f003 0307 	and.w	r3, r3, #7
 80043b4:	3301      	adds	r3, #1
 80043b6:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80043b8:	4b0f      	ldr	r3, [pc, #60]	; (80043f8 <HAL_RCC_GetSysClockFreq+0x104>)
 80043ba:	68db      	ldr	r3, [r3, #12]
 80043bc:	0a1b      	lsrs	r3, r3, #8
 80043be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80043c2:	697a      	ldr	r2, [r7, #20]
 80043c4:	fb02 f203 	mul.w	r2, r2, r3
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80043ce:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80043d0:	4b09      	ldr	r3, [pc, #36]	; (80043f8 <HAL_RCC_GetSysClockFreq+0x104>)
 80043d2:	68db      	ldr	r3, [r3, #12]
 80043d4:	0e5b      	lsrs	r3, r3, #25
 80043d6:	f003 0303 	and.w	r3, r3, #3
 80043da:	3301      	adds	r3, #1
 80043dc:	005b      	lsls	r3, r3, #1
 80043de:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80043e0:	697a      	ldr	r2, [r7, #20]
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80043e8:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80043ea:	69bb      	ldr	r3, [r7, #24]
}
 80043ec:	4618      	mov	r0, r3
 80043ee:	3724      	adds	r7, #36	; 0x24
 80043f0:	46bd      	mov	sp, r7
 80043f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f6:	4770      	bx	lr
 80043f8:	40021000 	.word	0x40021000
 80043fc:	08006a7c 	.word	0x08006a7c
 8004400:	00f42400 	.word	0x00f42400
 8004404:	007a1200 	.word	0x007a1200

08004408 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004408:	b480      	push	{r7}
 800440a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800440c:	4b03      	ldr	r3, [pc, #12]	; (800441c <HAL_RCC_GetHCLKFreq+0x14>)
 800440e:	681b      	ldr	r3, [r3, #0]
}
 8004410:	4618      	mov	r0, r3
 8004412:	46bd      	mov	sp, r7
 8004414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004418:	4770      	bx	lr
 800441a:	bf00      	nop
 800441c:	20000010 	.word	0x20000010

08004420 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004424:	f7ff fff0 	bl	8004408 <HAL_RCC_GetHCLKFreq>
 8004428:	4601      	mov	r1, r0
 800442a:	4b06      	ldr	r3, [pc, #24]	; (8004444 <HAL_RCC_GetPCLK1Freq+0x24>)
 800442c:	689b      	ldr	r3, [r3, #8]
 800442e:	0a1b      	lsrs	r3, r3, #8
 8004430:	f003 0307 	and.w	r3, r3, #7
 8004434:	4a04      	ldr	r2, [pc, #16]	; (8004448 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004436:	5cd3      	ldrb	r3, [r2, r3]
 8004438:	f003 031f 	and.w	r3, r3, #31
 800443c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004440:	4618      	mov	r0, r3
 8004442:	bd80      	pop	{r7, pc}
 8004444:	40021000 	.word	0x40021000
 8004448:	08006a74 	.word	0x08006a74

0800444c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004450:	f7ff ffda 	bl	8004408 <HAL_RCC_GetHCLKFreq>
 8004454:	4601      	mov	r1, r0
 8004456:	4b06      	ldr	r3, [pc, #24]	; (8004470 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004458:	689b      	ldr	r3, [r3, #8]
 800445a:	0adb      	lsrs	r3, r3, #11
 800445c:	f003 0307 	and.w	r3, r3, #7
 8004460:	4a04      	ldr	r2, [pc, #16]	; (8004474 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004462:	5cd3      	ldrb	r3, [r2, r3]
 8004464:	f003 031f 	and.w	r3, r3, #31
 8004468:	fa21 f303 	lsr.w	r3, r1, r3
}
 800446c:	4618      	mov	r0, r3
 800446e:	bd80      	pop	{r7, pc}
 8004470:	40021000 	.word	0x40021000
 8004474:	08006a74 	.word	0x08006a74

08004478 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b086      	sub	sp, #24
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004480:	2300      	movs	r3, #0
 8004482:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004484:	4b2a      	ldr	r3, [pc, #168]	; (8004530 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004486:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004488:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800448c:	2b00      	cmp	r3, #0
 800448e:	d003      	beq.n	8004498 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004490:	f7ff fa04 	bl	800389c <HAL_PWREx_GetVoltageRange>
 8004494:	6178      	str	r0, [r7, #20]
 8004496:	e014      	b.n	80044c2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004498:	4b25      	ldr	r3, [pc, #148]	; (8004530 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800449a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800449c:	4a24      	ldr	r2, [pc, #144]	; (8004530 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800449e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044a2:	6593      	str	r3, [r2, #88]	; 0x58
 80044a4:	4b22      	ldr	r3, [pc, #136]	; (8004530 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80044a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044ac:	60fb      	str	r3, [r7, #12]
 80044ae:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80044b0:	f7ff f9f4 	bl	800389c <HAL_PWREx_GetVoltageRange>
 80044b4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80044b6:	4b1e      	ldr	r3, [pc, #120]	; (8004530 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80044b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044ba:	4a1d      	ldr	r2, [pc, #116]	; (8004530 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80044bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044c0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80044c2:	697b      	ldr	r3, [r7, #20]
 80044c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80044c8:	d10b      	bne.n	80044e2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2b80      	cmp	r3, #128	; 0x80
 80044ce:	d919      	bls.n	8004504 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2ba0      	cmp	r3, #160	; 0xa0
 80044d4:	d902      	bls.n	80044dc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80044d6:	2302      	movs	r3, #2
 80044d8:	613b      	str	r3, [r7, #16]
 80044da:	e013      	b.n	8004504 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80044dc:	2301      	movs	r3, #1
 80044de:	613b      	str	r3, [r7, #16]
 80044e0:	e010      	b.n	8004504 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2b80      	cmp	r3, #128	; 0x80
 80044e6:	d902      	bls.n	80044ee <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80044e8:	2303      	movs	r3, #3
 80044ea:	613b      	str	r3, [r7, #16]
 80044ec:	e00a      	b.n	8004504 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2b80      	cmp	r3, #128	; 0x80
 80044f2:	d102      	bne.n	80044fa <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80044f4:	2302      	movs	r3, #2
 80044f6:	613b      	str	r3, [r7, #16]
 80044f8:	e004      	b.n	8004504 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2b70      	cmp	r3, #112	; 0x70
 80044fe:	d101      	bne.n	8004504 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004500:	2301      	movs	r3, #1
 8004502:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004504:	4b0b      	ldr	r3, [pc, #44]	; (8004534 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f023 0207 	bic.w	r2, r3, #7
 800450c:	4909      	ldr	r1, [pc, #36]	; (8004534 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800450e:	693b      	ldr	r3, [r7, #16]
 8004510:	4313      	orrs	r3, r2
 8004512:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004514:	4b07      	ldr	r3, [pc, #28]	; (8004534 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f003 0307 	and.w	r3, r3, #7
 800451c:	693a      	ldr	r2, [r7, #16]
 800451e:	429a      	cmp	r2, r3
 8004520:	d001      	beq.n	8004526 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004522:	2301      	movs	r3, #1
 8004524:	e000      	b.n	8004528 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004526:	2300      	movs	r3, #0
}
 8004528:	4618      	mov	r0, r3
 800452a:	3718      	adds	r7, #24
 800452c:	46bd      	mov	sp, r7
 800452e:	bd80      	pop	{r7, pc}
 8004530:	40021000 	.word	0x40021000
 8004534:	40022000 	.word	0x40022000

08004538 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b086      	sub	sp, #24
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004540:	2300      	movs	r3, #0
 8004542:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004544:	2300      	movs	r3, #0
 8004546:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004550:	2b00      	cmp	r3, #0
 8004552:	d03f      	beq.n	80045d4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004558:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800455c:	d01c      	beq.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0x60>
 800455e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004562:	d802      	bhi.n	800456a <HAL_RCCEx_PeriphCLKConfig+0x32>
 8004564:	2b00      	cmp	r3, #0
 8004566:	d00e      	beq.n	8004586 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8004568:	e01f      	b.n	80045aa <HAL_RCCEx_PeriphCLKConfig+0x72>
 800456a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800456e:	d003      	beq.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8004570:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004574:	d01c      	beq.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8004576:	e018      	b.n	80045aa <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004578:	4b85      	ldr	r3, [pc, #532]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800457a:	68db      	ldr	r3, [r3, #12]
 800457c:	4a84      	ldr	r2, [pc, #528]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800457e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004582:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004584:	e015      	b.n	80045b2 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	3304      	adds	r3, #4
 800458a:	2100      	movs	r1, #0
 800458c:	4618      	mov	r0, r3
 800458e:	f000 fab9 	bl	8004b04 <RCCEx_PLLSAI1_Config>
 8004592:	4603      	mov	r3, r0
 8004594:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004596:	e00c      	b.n	80045b2 <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	3320      	adds	r3, #32
 800459c:	2100      	movs	r1, #0
 800459e:	4618      	mov	r0, r3
 80045a0:	f000 fba0 	bl	8004ce4 <RCCEx_PLLSAI2_Config>
 80045a4:	4603      	mov	r3, r0
 80045a6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80045a8:	e003      	b.n	80045b2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80045aa:	2301      	movs	r3, #1
 80045ac:	74fb      	strb	r3, [r7, #19]
      break;
 80045ae:	e000      	b.n	80045b2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 80045b0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80045b2:	7cfb      	ldrb	r3, [r7, #19]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d10b      	bne.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80045b8:	4b75      	ldr	r3, [pc, #468]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80045ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045be:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80045c6:	4972      	ldr	r1, [pc, #456]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80045c8:	4313      	orrs	r3, r2
 80045ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80045ce:	e001      	b.n	80045d4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045d0:	7cfb      	ldrb	r3, [r7, #19]
 80045d2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d03f      	beq.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80045e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80045e8:	d01c      	beq.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0xec>
 80045ea:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80045ee:	d802      	bhi.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d00e      	beq.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0xda>
 80045f4:	e01f      	b.n	8004636 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80045f6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80045fa:	d003      	beq.n	8004604 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 80045fc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004600:	d01c      	beq.n	800463c <HAL_RCCEx_PeriphCLKConfig+0x104>
 8004602:	e018      	b.n	8004636 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004604:	4b62      	ldr	r3, [pc, #392]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004606:	68db      	ldr	r3, [r3, #12]
 8004608:	4a61      	ldr	r2, [pc, #388]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800460a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800460e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004610:	e015      	b.n	800463e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	3304      	adds	r3, #4
 8004616:	2100      	movs	r1, #0
 8004618:	4618      	mov	r0, r3
 800461a:	f000 fa73 	bl	8004b04 <RCCEx_PLLSAI1_Config>
 800461e:	4603      	mov	r3, r0
 8004620:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004622:	e00c      	b.n	800463e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	3320      	adds	r3, #32
 8004628:	2100      	movs	r1, #0
 800462a:	4618      	mov	r0, r3
 800462c:	f000 fb5a 	bl	8004ce4 <RCCEx_PLLSAI2_Config>
 8004630:	4603      	mov	r3, r0
 8004632:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004634:	e003      	b.n	800463e <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004636:	2301      	movs	r3, #1
 8004638:	74fb      	strb	r3, [r7, #19]
      break;
 800463a:	e000      	b.n	800463e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800463c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800463e:	7cfb      	ldrb	r3, [r7, #19]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d10b      	bne.n	800465c <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004644:	4b52      	ldr	r3, [pc, #328]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004646:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800464a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004652:	494f      	ldr	r1, [pc, #316]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004654:	4313      	orrs	r3, r2
 8004656:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800465a:	e001      	b.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800465c:	7cfb      	ldrb	r3, [r7, #19]
 800465e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004668:	2b00      	cmp	r3, #0
 800466a:	f000 80a0 	beq.w	80047ae <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 800466e:	2300      	movs	r3, #0
 8004670:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004672:	4b47      	ldr	r3, [pc, #284]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004674:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004676:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800467a:	2b00      	cmp	r3, #0
 800467c:	d101      	bne.n	8004682 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 800467e:	2301      	movs	r3, #1
 8004680:	e000      	b.n	8004684 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8004682:	2300      	movs	r3, #0
 8004684:	2b00      	cmp	r3, #0
 8004686:	d00d      	beq.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004688:	4b41      	ldr	r3, [pc, #260]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800468a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800468c:	4a40      	ldr	r2, [pc, #256]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800468e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004692:	6593      	str	r3, [r2, #88]	; 0x58
 8004694:	4b3e      	ldr	r3, [pc, #248]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004696:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004698:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800469c:	60bb      	str	r3, [r7, #8]
 800469e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80046a0:	2301      	movs	r3, #1
 80046a2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80046a4:	4b3b      	ldr	r3, [pc, #236]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4a3a      	ldr	r2, [pc, #232]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80046aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046ae:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80046b0:	f7fc fcd8 	bl	8001064 <HAL_GetTick>
 80046b4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80046b6:	e009      	b.n	80046cc <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046b8:	f7fc fcd4 	bl	8001064 <HAL_GetTick>
 80046bc:	4602      	mov	r2, r0
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	1ad3      	subs	r3, r2, r3
 80046c2:	2b02      	cmp	r3, #2
 80046c4:	d902      	bls.n	80046cc <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 80046c6:	2303      	movs	r3, #3
 80046c8:	74fb      	strb	r3, [r7, #19]
        break;
 80046ca:	e005      	b.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80046cc:	4b31      	ldr	r3, [pc, #196]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d0ef      	beq.n	80046b8 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 80046d8:	7cfb      	ldrb	r3, [r7, #19]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d15c      	bne.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80046de:	4b2c      	ldr	r3, [pc, #176]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80046e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046e8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80046ea:	697b      	ldr	r3, [r7, #20]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d01f      	beq.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046f6:	697a      	ldr	r2, [r7, #20]
 80046f8:	429a      	cmp	r2, r3
 80046fa:	d019      	beq.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80046fc:	4b24      	ldr	r3, [pc, #144]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80046fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004702:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004706:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004708:	4b21      	ldr	r3, [pc, #132]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800470a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800470e:	4a20      	ldr	r2, [pc, #128]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004710:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004714:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004718:	4b1d      	ldr	r3, [pc, #116]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800471a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800471e:	4a1c      	ldr	r2, [pc, #112]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004720:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004724:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004728:	4a19      	ldr	r2, [pc, #100]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800472a:	697b      	ldr	r3, [r7, #20]
 800472c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004730:	697b      	ldr	r3, [r7, #20]
 8004732:	f003 0301 	and.w	r3, r3, #1
 8004736:	2b00      	cmp	r3, #0
 8004738:	d016      	beq.n	8004768 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800473a:	f7fc fc93 	bl	8001064 <HAL_GetTick>
 800473e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004740:	e00b      	b.n	800475a <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004742:	f7fc fc8f 	bl	8001064 <HAL_GetTick>
 8004746:	4602      	mov	r2, r0
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	1ad3      	subs	r3, r2, r3
 800474c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004750:	4293      	cmp	r3, r2
 8004752:	d902      	bls.n	800475a <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8004754:	2303      	movs	r3, #3
 8004756:	74fb      	strb	r3, [r7, #19]
            break;
 8004758:	e006      	b.n	8004768 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800475a:	4b0d      	ldr	r3, [pc, #52]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800475c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004760:	f003 0302 	and.w	r3, r3, #2
 8004764:	2b00      	cmp	r3, #0
 8004766:	d0ec      	beq.n	8004742 <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8004768:	7cfb      	ldrb	r3, [r7, #19]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d10c      	bne.n	8004788 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800476e:	4b08      	ldr	r3, [pc, #32]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004770:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004774:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800477e:	4904      	ldr	r1, [pc, #16]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004780:	4313      	orrs	r3, r2
 8004782:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004786:	e009      	b.n	800479c <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004788:	7cfb      	ldrb	r3, [r7, #19]
 800478a:	74bb      	strb	r3, [r7, #18]
 800478c:	e006      	b.n	800479c <HAL_RCCEx_PeriphCLKConfig+0x264>
 800478e:	bf00      	nop
 8004790:	40021000 	.word	0x40021000
 8004794:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004798:	7cfb      	ldrb	r3, [r7, #19]
 800479a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800479c:	7c7b      	ldrb	r3, [r7, #17]
 800479e:	2b01      	cmp	r3, #1
 80047a0:	d105      	bne.n	80047ae <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047a2:	4b9e      	ldr	r3, [pc, #632]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80047a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047a6:	4a9d      	ldr	r2, [pc, #628]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80047a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80047ac:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f003 0301 	and.w	r3, r3, #1
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d00a      	beq.n	80047d0 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80047ba:	4b98      	ldr	r3, [pc, #608]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80047bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047c0:	f023 0203 	bic.w	r2, r3, #3
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047c8:	4994      	ldr	r1, [pc, #592]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80047ca:	4313      	orrs	r3, r2
 80047cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f003 0302 	and.w	r3, r3, #2
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d00a      	beq.n	80047f2 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80047dc:	4b8f      	ldr	r3, [pc, #572]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80047de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047e2:	f023 020c 	bic.w	r2, r3, #12
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047ea:	498c      	ldr	r1, [pc, #560]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80047ec:	4313      	orrs	r3, r2
 80047ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f003 0304 	and.w	r3, r3, #4
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d00a      	beq.n	8004814 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80047fe:	4b87      	ldr	r3, [pc, #540]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004800:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004804:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800480c:	4983      	ldr	r1, [pc, #524]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800480e:	4313      	orrs	r3, r2
 8004810:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f003 0308 	and.w	r3, r3, #8
 800481c:	2b00      	cmp	r3, #0
 800481e:	d00a      	beq.n	8004836 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004820:	4b7e      	ldr	r3, [pc, #504]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004822:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004826:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800482e:	497b      	ldr	r1, [pc, #492]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004830:	4313      	orrs	r3, r2
 8004832:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f003 0310 	and.w	r3, r3, #16
 800483e:	2b00      	cmp	r3, #0
 8004840:	d00a      	beq.n	8004858 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004842:	4b76      	ldr	r3, [pc, #472]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004844:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004848:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004850:	4972      	ldr	r1, [pc, #456]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004852:	4313      	orrs	r3, r2
 8004854:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f003 0320 	and.w	r3, r3, #32
 8004860:	2b00      	cmp	r3, #0
 8004862:	d00a      	beq.n	800487a <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004864:	4b6d      	ldr	r3, [pc, #436]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004866:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800486a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004872:	496a      	ldr	r1, [pc, #424]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004874:	4313      	orrs	r3, r2
 8004876:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004882:	2b00      	cmp	r3, #0
 8004884:	d00a      	beq.n	800489c <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004886:	4b65      	ldr	r3, [pc, #404]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004888:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800488c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004894:	4961      	ldr	r1, [pc, #388]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004896:	4313      	orrs	r3, r2
 8004898:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d00a      	beq.n	80048be <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80048a8:	4b5c      	ldr	r3, [pc, #368]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80048aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048ae:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048b6:	4959      	ldr	r1, [pc, #356]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80048b8:	4313      	orrs	r3, r2
 80048ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d00a      	beq.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80048ca:	4b54      	ldr	r3, [pc, #336]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80048cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048d0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048d8:	4950      	ldr	r1, [pc, #320]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80048da:	4313      	orrs	r3, r2
 80048dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d00a      	beq.n	8004902 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80048ec:	4b4b      	ldr	r3, [pc, #300]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80048ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048f2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048fa:	4948      	ldr	r1, [pc, #288]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80048fc:	4313      	orrs	r3, r2
 80048fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800490a:	2b00      	cmp	r3, #0
 800490c:	d00a      	beq.n	8004924 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800490e:	4b43      	ldr	r3, [pc, #268]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004910:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004914:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800491c:	493f      	ldr	r1, [pc, #252]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800491e:	4313      	orrs	r3, r2
 8004920:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800492c:	2b00      	cmp	r3, #0
 800492e:	d028      	beq.n	8004982 <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004930:	4b3a      	ldr	r3, [pc, #232]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004932:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004936:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800493e:	4937      	ldr	r1, [pc, #220]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004940:	4313      	orrs	r3, r2
 8004942:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800494a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800494e:	d106      	bne.n	800495e <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004950:	4b32      	ldr	r3, [pc, #200]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004952:	68db      	ldr	r3, [r3, #12]
 8004954:	4a31      	ldr	r2, [pc, #196]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004956:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800495a:	60d3      	str	r3, [r2, #12]
 800495c:	e011      	b.n	8004982 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004962:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004966:	d10c      	bne.n	8004982 <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	3304      	adds	r3, #4
 800496c:	2101      	movs	r1, #1
 800496e:	4618      	mov	r0, r3
 8004970:	f000 f8c8 	bl	8004b04 <RCCEx_PLLSAI1_Config>
 8004974:	4603      	mov	r3, r0
 8004976:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004978:	7cfb      	ldrb	r3, [r7, #19]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d001      	beq.n	8004982 <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 800497e:	7cfb      	ldrb	r3, [r7, #19]
 8004980:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800498a:	2b00      	cmp	r3, #0
 800498c:	d028      	beq.n	80049e0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800498e:	4b23      	ldr	r3, [pc, #140]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004990:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004994:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800499c:	491f      	ldr	r1, [pc, #124]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800499e:	4313      	orrs	r3, r2
 80049a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049a8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80049ac:	d106      	bne.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80049ae:	4b1b      	ldr	r3, [pc, #108]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80049b0:	68db      	ldr	r3, [r3, #12]
 80049b2:	4a1a      	ldr	r2, [pc, #104]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80049b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80049b8:	60d3      	str	r3, [r2, #12]
 80049ba:	e011      	b.n	80049e0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049c0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80049c4:	d10c      	bne.n	80049e0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	3304      	adds	r3, #4
 80049ca:	2101      	movs	r1, #1
 80049cc:	4618      	mov	r0, r3
 80049ce:	f000 f899 	bl	8004b04 <RCCEx_PLLSAI1_Config>
 80049d2:	4603      	mov	r3, r0
 80049d4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80049d6:	7cfb      	ldrb	r3, [r7, #19]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d001      	beq.n	80049e0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 80049dc:	7cfb      	ldrb	r3, [r7, #19]
 80049de:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d02b      	beq.n	8004a44 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80049ec:	4b0b      	ldr	r3, [pc, #44]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80049ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049f2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049fa:	4908      	ldr	r1, [pc, #32]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80049fc:	4313      	orrs	r3, r2
 80049fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a06:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004a0a:	d109      	bne.n	8004a20 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a0c:	4b03      	ldr	r3, [pc, #12]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004a0e:	68db      	ldr	r3, [r3, #12]
 8004a10:	4a02      	ldr	r2, [pc, #8]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004a12:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004a16:	60d3      	str	r3, [r2, #12]
 8004a18:	e014      	b.n	8004a44 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8004a1a:	bf00      	nop
 8004a1c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a24:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004a28:	d10c      	bne.n	8004a44 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	3304      	adds	r3, #4
 8004a2e:	2101      	movs	r1, #1
 8004a30:	4618      	mov	r0, r3
 8004a32:	f000 f867 	bl	8004b04 <RCCEx_PLLSAI1_Config>
 8004a36:	4603      	mov	r3, r0
 8004a38:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004a3a:	7cfb      	ldrb	r3, [r7, #19]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d001      	beq.n	8004a44 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8004a40:	7cfb      	ldrb	r3, [r7, #19]
 8004a42:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d02f      	beq.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004a50:	4b2b      	ldr	r3, [pc, #172]	; (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004a52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a56:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004a5e:	4928      	ldr	r1, [pc, #160]	; (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004a60:	4313      	orrs	r3, r2
 8004a62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004a6a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004a6e:	d10d      	bne.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	3304      	adds	r3, #4
 8004a74:	2102      	movs	r1, #2
 8004a76:	4618      	mov	r0, r3
 8004a78:	f000 f844 	bl	8004b04 <RCCEx_PLLSAI1_Config>
 8004a7c:	4603      	mov	r3, r0
 8004a7e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004a80:	7cfb      	ldrb	r3, [r7, #19]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d014      	beq.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8004a86:	7cfb      	ldrb	r3, [r7, #19]
 8004a88:	74bb      	strb	r3, [r7, #18]
 8004a8a:	e011      	b.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004a90:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004a94:	d10c      	bne.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	3320      	adds	r3, #32
 8004a9a:	2102      	movs	r1, #2
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	f000 f921 	bl	8004ce4 <RCCEx_PLLSAI2_Config>
 8004aa2:	4603      	mov	r3, r0
 8004aa4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004aa6:	7cfb      	ldrb	r3, [r7, #19]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d001      	beq.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8004aac:	7cfb      	ldrb	r3, [r7, #19]
 8004aae:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d00a      	beq.n	8004ad2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004abc:	4b10      	ldr	r3, [pc, #64]	; (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004abe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ac2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004aca:	490d      	ldr	r1, [pc, #52]	; (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004acc:	4313      	orrs	r3, r2
 8004ace:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d00b      	beq.n	8004af6 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004ade:	4b08      	ldr	r3, [pc, #32]	; (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004ae0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ae4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004aee:	4904      	ldr	r1, [pc, #16]	; (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004af0:	4313      	orrs	r3, r2
 8004af2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004af6:	7cbb      	ldrb	r3, [r7, #18]
}
 8004af8:	4618      	mov	r0, r3
 8004afa:	3718      	adds	r7, #24
 8004afc:	46bd      	mov	sp, r7
 8004afe:	bd80      	pop	{r7, pc}
 8004b00:	40021000 	.word	0x40021000

08004b04 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b084      	sub	sp, #16
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
 8004b0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004b0e:	2300      	movs	r3, #0
 8004b10:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004b12:	4b73      	ldr	r3, [pc, #460]	; (8004ce0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004b14:	68db      	ldr	r3, [r3, #12]
 8004b16:	f003 0303 	and.w	r3, r3, #3
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d018      	beq.n	8004b50 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004b1e:	4b70      	ldr	r3, [pc, #448]	; (8004ce0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004b20:	68db      	ldr	r3, [r3, #12]
 8004b22:	f003 0203 	and.w	r2, r3, #3
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	429a      	cmp	r2, r3
 8004b2c:	d10d      	bne.n	8004b4a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
       ||
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d009      	beq.n	8004b4a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004b36:	4b6a      	ldr	r3, [pc, #424]	; (8004ce0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004b38:	68db      	ldr	r3, [r3, #12]
 8004b3a:	091b      	lsrs	r3, r3, #4
 8004b3c:	f003 0307 	and.w	r3, r3, #7
 8004b40:	1c5a      	adds	r2, r3, #1
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	685b      	ldr	r3, [r3, #4]
       ||
 8004b46:	429a      	cmp	r2, r3
 8004b48:	d044      	beq.n	8004bd4 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	73fb      	strb	r3, [r7, #15]
 8004b4e:	e041      	b.n	8004bd4 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	2b02      	cmp	r3, #2
 8004b56:	d00c      	beq.n	8004b72 <RCCEx_PLLSAI1_Config+0x6e>
 8004b58:	2b03      	cmp	r3, #3
 8004b5a:	d013      	beq.n	8004b84 <RCCEx_PLLSAI1_Config+0x80>
 8004b5c:	2b01      	cmp	r3, #1
 8004b5e:	d120      	bne.n	8004ba2 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004b60:	4b5f      	ldr	r3, [pc, #380]	; (8004ce0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f003 0302 	and.w	r3, r3, #2
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d11d      	bne.n	8004ba8 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b70:	e01a      	b.n	8004ba8 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004b72:	4b5b      	ldr	r3, [pc, #364]	; (8004ce0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d116      	bne.n	8004bac <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8004b7e:	2301      	movs	r3, #1
 8004b80:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b82:	e013      	b.n	8004bac <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004b84:	4b56      	ldr	r3, [pc, #344]	; (8004ce0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d10f      	bne.n	8004bb0 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004b90:	4b53      	ldr	r3, [pc, #332]	; (8004ce0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d109      	bne.n	8004bb0 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8004b9c:	2301      	movs	r3, #1
 8004b9e:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004ba0:	e006      	b.n	8004bb0 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	73fb      	strb	r3, [r7, #15]
      break;
 8004ba6:	e004      	b.n	8004bb2 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8004ba8:	bf00      	nop
 8004baa:	e002      	b.n	8004bb2 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8004bac:	bf00      	nop
 8004bae:	e000      	b.n	8004bb2 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8004bb0:	bf00      	nop
    }

    if(status == HAL_OK)
 8004bb2:	7bfb      	ldrb	r3, [r7, #15]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d10d      	bne.n	8004bd4 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004bb8:	4b49      	ldr	r3, [pc, #292]	; (8004ce0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004bba:	68db      	ldr	r3, [r3, #12]
 8004bbc:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6819      	ldr	r1, [r3, #0]
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	685b      	ldr	r3, [r3, #4]
 8004bc8:	3b01      	subs	r3, #1
 8004bca:	011b      	lsls	r3, r3, #4
 8004bcc:	430b      	orrs	r3, r1
 8004bce:	4944      	ldr	r1, [pc, #272]	; (8004ce0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004bd0:	4313      	orrs	r3, r2
 8004bd2:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004bd4:	7bfb      	ldrb	r3, [r7, #15]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d17d      	bne.n	8004cd6 <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004bda:	4b41      	ldr	r3, [pc, #260]	; (8004ce0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	4a40      	ldr	r2, [pc, #256]	; (8004ce0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004be0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004be4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004be6:	f7fc fa3d 	bl	8001064 <HAL_GetTick>
 8004bea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004bec:	e009      	b.n	8004c02 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004bee:	f7fc fa39 	bl	8001064 <HAL_GetTick>
 8004bf2:	4602      	mov	r2, r0
 8004bf4:	68bb      	ldr	r3, [r7, #8]
 8004bf6:	1ad3      	subs	r3, r2, r3
 8004bf8:	2b02      	cmp	r3, #2
 8004bfa:	d902      	bls.n	8004c02 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8004bfc:	2303      	movs	r3, #3
 8004bfe:	73fb      	strb	r3, [r7, #15]
        break;
 8004c00:	e005      	b.n	8004c0e <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004c02:	4b37      	ldr	r3, [pc, #220]	; (8004ce0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d1ef      	bne.n	8004bee <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8004c0e:	7bfb      	ldrb	r3, [r7, #15]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d160      	bne.n	8004cd6 <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d111      	bne.n	8004c3e <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004c1a:	4b31      	ldr	r3, [pc, #196]	; (8004ce0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004c1c:	691b      	ldr	r3, [r3, #16]
 8004c1e:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004c22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c26:	687a      	ldr	r2, [r7, #4]
 8004c28:	6892      	ldr	r2, [r2, #8]
 8004c2a:	0211      	lsls	r1, r2, #8
 8004c2c:	687a      	ldr	r2, [r7, #4]
 8004c2e:	68d2      	ldr	r2, [r2, #12]
 8004c30:	0912      	lsrs	r2, r2, #4
 8004c32:	0452      	lsls	r2, r2, #17
 8004c34:	430a      	orrs	r2, r1
 8004c36:	492a      	ldr	r1, [pc, #168]	; (8004ce0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004c38:	4313      	orrs	r3, r2
 8004c3a:	610b      	str	r3, [r1, #16]
 8004c3c:	e027      	b.n	8004c8e <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	2b01      	cmp	r3, #1
 8004c42:	d112      	bne.n	8004c6a <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004c44:	4b26      	ldr	r3, [pc, #152]	; (8004ce0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004c46:	691b      	ldr	r3, [r3, #16]
 8004c48:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004c4c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004c50:	687a      	ldr	r2, [r7, #4]
 8004c52:	6892      	ldr	r2, [r2, #8]
 8004c54:	0211      	lsls	r1, r2, #8
 8004c56:	687a      	ldr	r2, [r7, #4]
 8004c58:	6912      	ldr	r2, [r2, #16]
 8004c5a:	0852      	lsrs	r2, r2, #1
 8004c5c:	3a01      	subs	r2, #1
 8004c5e:	0552      	lsls	r2, r2, #21
 8004c60:	430a      	orrs	r2, r1
 8004c62:	491f      	ldr	r1, [pc, #124]	; (8004ce0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004c64:	4313      	orrs	r3, r2
 8004c66:	610b      	str	r3, [r1, #16]
 8004c68:	e011      	b.n	8004c8e <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004c6a:	4b1d      	ldr	r3, [pc, #116]	; (8004ce0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004c6c:	691b      	ldr	r3, [r3, #16]
 8004c6e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004c72:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004c76:	687a      	ldr	r2, [r7, #4]
 8004c78:	6892      	ldr	r2, [r2, #8]
 8004c7a:	0211      	lsls	r1, r2, #8
 8004c7c:	687a      	ldr	r2, [r7, #4]
 8004c7e:	6952      	ldr	r2, [r2, #20]
 8004c80:	0852      	lsrs	r2, r2, #1
 8004c82:	3a01      	subs	r2, #1
 8004c84:	0652      	lsls	r2, r2, #25
 8004c86:	430a      	orrs	r2, r1
 8004c88:	4915      	ldr	r1, [pc, #84]	; (8004ce0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004c8a:	4313      	orrs	r3, r2
 8004c8c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004c8e:	4b14      	ldr	r3, [pc, #80]	; (8004ce0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4a13      	ldr	r2, [pc, #76]	; (8004ce0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004c94:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004c98:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c9a:	f7fc f9e3 	bl	8001064 <HAL_GetTick>
 8004c9e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004ca0:	e009      	b.n	8004cb6 <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004ca2:	f7fc f9df 	bl	8001064 <HAL_GetTick>
 8004ca6:	4602      	mov	r2, r0
 8004ca8:	68bb      	ldr	r3, [r7, #8]
 8004caa:	1ad3      	subs	r3, r2, r3
 8004cac:	2b02      	cmp	r3, #2
 8004cae:	d902      	bls.n	8004cb6 <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8004cb0:	2303      	movs	r3, #3
 8004cb2:	73fb      	strb	r3, [r7, #15]
          break;
 8004cb4:	e005      	b.n	8004cc2 <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004cb6:	4b0a      	ldr	r3, [pc, #40]	; (8004ce0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d0ef      	beq.n	8004ca2 <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 8004cc2:	7bfb      	ldrb	r3, [r7, #15]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d106      	bne.n	8004cd6 <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004cc8:	4b05      	ldr	r3, [pc, #20]	; (8004ce0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004cca:	691a      	ldr	r2, [r3, #16]
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	699b      	ldr	r3, [r3, #24]
 8004cd0:	4903      	ldr	r1, [pc, #12]	; (8004ce0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004cd2:	4313      	orrs	r3, r2
 8004cd4:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004cd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cd8:	4618      	mov	r0, r3
 8004cda:	3710      	adds	r7, #16
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	bd80      	pop	{r7, pc}
 8004ce0:	40021000 	.word	0x40021000

08004ce4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b084      	sub	sp, #16
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
 8004cec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004cee:	2300      	movs	r3, #0
 8004cf0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004cf2:	4b68      	ldr	r3, [pc, #416]	; (8004e94 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004cf4:	68db      	ldr	r3, [r3, #12]
 8004cf6:	f003 0303 	and.w	r3, r3, #3
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d018      	beq.n	8004d30 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004cfe:	4b65      	ldr	r3, [pc, #404]	; (8004e94 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004d00:	68db      	ldr	r3, [r3, #12]
 8004d02:	f003 0203 	and.w	r2, r3, #3
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	429a      	cmp	r2, r3
 8004d0c:	d10d      	bne.n	8004d2a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
       ||
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d009      	beq.n	8004d2a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004d16:	4b5f      	ldr	r3, [pc, #380]	; (8004e94 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004d18:	68db      	ldr	r3, [r3, #12]
 8004d1a:	091b      	lsrs	r3, r3, #4
 8004d1c:	f003 0307 	and.w	r3, r3, #7
 8004d20:	1c5a      	adds	r2, r3, #1
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	685b      	ldr	r3, [r3, #4]
       ||
 8004d26:	429a      	cmp	r2, r3
 8004d28:	d044      	beq.n	8004db4 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	73fb      	strb	r3, [r7, #15]
 8004d2e:	e041      	b.n	8004db4 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	2b02      	cmp	r3, #2
 8004d36:	d00c      	beq.n	8004d52 <RCCEx_PLLSAI2_Config+0x6e>
 8004d38:	2b03      	cmp	r3, #3
 8004d3a:	d013      	beq.n	8004d64 <RCCEx_PLLSAI2_Config+0x80>
 8004d3c:	2b01      	cmp	r3, #1
 8004d3e:	d120      	bne.n	8004d82 <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004d40:	4b54      	ldr	r3, [pc, #336]	; (8004e94 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f003 0302 	and.w	r3, r3, #2
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d11d      	bne.n	8004d88 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8004d4c:	2301      	movs	r3, #1
 8004d4e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d50:	e01a      	b.n	8004d88 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004d52:	4b50      	ldr	r3, [pc, #320]	; (8004e94 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d116      	bne.n	8004d8c <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8004d5e:	2301      	movs	r3, #1
 8004d60:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d62:	e013      	b.n	8004d8c <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004d64:	4b4b      	ldr	r3, [pc, #300]	; (8004e94 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d10f      	bne.n	8004d90 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004d70:	4b48      	ldr	r3, [pc, #288]	; (8004e94 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d109      	bne.n	8004d90 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004d80:	e006      	b.n	8004d90 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 8004d82:	2301      	movs	r3, #1
 8004d84:	73fb      	strb	r3, [r7, #15]
      break;
 8004d86:	e004      	b.n	8004d92 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8004d88:	bf00      	nop
 8004d8a:	e002      	b.n	8004d92 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8004d8c:	bf00      	nop
 8004d8e:	e000      	b.n	8004d92 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8004d90:	bf00      	nop
    }

    if(status == HAL_OK)
 8004d92:	7bfb      	ldrb	r3, [r7, #15]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d10d      	bne.n	8004db4 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004d98:	4b3e      	ldr	r3, [pc, #248]	; (8004e94 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004d9a:	68db      	ldr	r3, [r3, #12]
 8004d9c:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6819      	ldr	r1, [r3, #0]
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	685b      	ldr	r3, [r3, #4]
 8004da8:	3b01      	subs	r3, #1
 8004daa:	011b      	lsls	r3, r3, #4
 8004dac:	430b      	orrs	r3, r1
 8004dae:	4939      	ldr	r1, [pc, #228]	; (8004e94 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004db0:	4313      	orrs	r3, r2
 8004db2:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004db4:	7bfb      	ldrb	r3, [r7, #15]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d167      	bne.n	8004e8a <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004dba:	4b36      	ldr	r3, [pc, #216]	; (8004e94 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	4a35      	ldr	r2, [pc, #212]	; (8004e94 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004dc0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004dc4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004dc6:	f7fc f94d 	bl	8001064 <HAL_GetTick>
 8004dca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004dcc:	e009      	b.n	8004de2 <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004dce:	f7fc f949 	bl	8001064 <HAL_GetTick>
 8004dd2:	4602      	mov	r2, r0
 8004dd4:	68bb      	ldr	r3, [r7, #8]
 8004dd6:	1ad3      	subs	r3, r2, r3
 8004dd8:	2b02      	cmp	r3, #2
 8004dda:	d902      	bls.n	8004de2 <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8004ddc:	2303      	movs	r3, #3
 8004dde:	73fb      	strb	r3, [r7, #15]
        break;
 8004de0:	e005      	b.n	8004dee <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004de2:	4b2c      	ldr	r3, [pc, #176]	; (8004e94 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d1ef      	bne.n	8004dce <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8004dee:	7bfb      	ldrb	r3, [r7, #15]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d14a      	bne.n	8004e8a <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d111      	bne.n	8004e1e <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004dfa:	4b26      	ldr	r3, [pc, #152]	; (8004e94 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004dfc:	695b      	ldr	r3, [r3, #20]
 8004dfe:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004e02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e06:	687a      	ldr	r2, [r7, #4]
 8004e08:	6892      	ldr	r2, [r2, #8]
 8004e0a:	0211      	lsls	r1, r2, #8
 8004e0c:	687a      	ldr	r2, [r7, #4]
 8004e0e:	68d2      	ldr	r2, [r2, #12]
 8004e10:	0912      	lsrs	r2, r2, #4
 8004e12:	0452      	lsls	r2, r2, #17
 8004e14:	430a      	orrs	r2, r1
 8004e16:	491f      	ldr	r1, [pc, #124]	; (8004e94 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	614b      	str	r3, [r1, #20]
 8004e1c:	e011      	b.n	8004e42 <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004e1e:	4b1d      	ldr	r3, [pc, #116]	; (8004e94 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004e20:	695b      	ldr	r3, [r3, #20]
 8004e22:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004e26:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004e2a:	687a      	ldr	r2, [r7, #4]
 8004e2c:	6892      	ldr	r2, [r2, #8]
 8004e2e:	0211      	lsls	r1, r2, #8
 8004e30:	687a      	ldr	r2, [r7, #4]
 8004e32:	6912      	ldr	r2, [r2, #16]
 8004e34:	0852      	lsrs	r2, r2, #1
 8004e36:	3a01      	subs	r2, #1
 8004e38:	0652      	lsls	r2, r2, #25
 8004e3a:	430a      	orrs	r2, r1
 8004e3c:	4915      	ldr	r1, [pc, #84]	; (8004e94 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004e3e:	4313      	orrs	r3, r2
 8004e40:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004e42:	4b14      	ldr	r3, [pc, #80]	; (8004e94 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	4a13      	ldr	r2, [pc, #76]	; (8004e94 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004e48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e4c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e4e:	f7fc f909 	bl	8001064 <HAL_GetTick>
 8004e52:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004e54:	e009      	b.n	8004e6a <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004e56:	f7fc f905 	bl	8001064 <HAL_GetTick>
 8004e5a:	4602      	mov	r2, r0
 8004e5c:	68bb      	ldr	r3, [r7, #8]
 8004e5e:	1ad3      	subs	r3, r2, r3
 8004e60:	2b02      	cmp	r3, #2
 8004e62:	d902      	bls.n	8004e6a <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8004e64:	2303      	movs	r3, #3
 8004e66:	73fb      	strb	r3, [r7, #15]
          break;
 8004e68:	e005      	b.n	8004e76 <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004e6a:	4b0a      	ldr	r3, [pc, #40]	; (8004e94 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d0ef      	beq.n	8004e56 <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 8004e76:	7bfb      	ldrb	r3, [r7, #15]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d106      	bne.n	8004e8a <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004e7c:	4b05      	ldr	r3, [pc, #20]	; (8004e94 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004e7e:	695a      	ldr	r2, [r3, #20]
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	695b      	ldr	r3, [r3, #20]
 8004e84:	4903      	ldr	r1, [pc, #12]	; (8004e94 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004e86:	4313      	orrs	r3, r2
 8004e88:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004e8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	3710      	adds	r7, #16
 8004e90:	46bd      	mov	sp, r7
 8004e92:	bd80      	pop	{r7, pc}
 8004e94:	40021000 	.word	0x40021000

08004e98 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b082      	sub	sp, #8
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d101      	bne.n	8004eaa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	e049      	b.n	8004f3e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004eb0:	b2db      	uxtb	r3, r3
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d106      	bne.n	8004ec4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2200      	movs	r2, #0
 8004eba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004ebe:	6878      	ldr	r0, [r7, #4]
 8004ec0:	f7fb ffa4 	bl	8000e0c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2202      	movs	r2, #2
 8004ec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681a      	ldr	r2, [r3, #0]
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	3304      	adds	r3, #4
 8004ed4:	4619      	mov	r1, r3
 8004ed6:	4610      	mov	r0, r2
 8004ed8:	f000 f8a6 	bl	8005028 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2201      	movs	r2, #1
 8004ee0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2201      	movs	r2, #1
 8004ee8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2201      	movs	r2, #1
 8004ef0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2201      	movs	r2, #1
 8004ef8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2201      	movs	r2, #1
 8004f00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2201      	movs	r2, #1
 8004f08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2201      	movs	r2, #1
 8004f10:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2201      	movs	r2, #1
 8004f18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2201      	movs	r2, #1
 8004f20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2201      	movs	r2, #1
 8004f28:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2201      	movs	r2, #1
 8004f30:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2201      	movs	r2, #1
 8004f38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004f3c:	2300      	movs	r3, #0
}
 8004f3e:	4618      	mov	r0, r3
 8004f40:	3708      	adds	r7, #8
 8004f42:	46bd      	mov	sp, r7
 8004f44:	bd80      	pop	{r7, pc}
	...

08004f48 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004f48:	b480      	push	{r7}
 8004f4a:	b085      	sub	sp, #20
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f56:	b2db      	uxtb	r3, r3
 8004f58:	2b01      	cmp	r3, #1
 8004f5a:	d001      	beq.n	8004f60 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004f5c:	2301      	movs	r3, #1
 8004f5e:	e04f      	b.n	8005000 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2202      	movs	r2, #2
 8004f64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	68da      	ldr	r2, [r3, #12]
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f042 0201 	orr.w	r2, r2, #1
 8004f76:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	4a23      	ldr	r2, [pc, #140]	; (800500c <HAL_TIM_Base_Start_IT+0xc4>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d01d      	beq.n	8004fbe <HAL_TIM_Base_Start_IT+0x76>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f8a:	d018      	beq.n	8004fbe <HAL_TIM_Base_Start_IT+0x76>
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	4a1f      	ldr	r2, [pc, #124]	; (8005010 <HAL_TIM_Base_Start_IT+0xc8>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d013      	beq.n	8004fbe <HAL_TIM_Base_Start_IT+0x76>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	4a1e      	ldr	r2, [pc, #120]	; (8005014 <HAL_TIM_Base_Start_IT+0xcc>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d00e      	beq.n	8004fbe <HAL_TIM_Base_Start_IT+0x76>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4a1c      	ldr	r2, [pc, #112]	; (8005018 <HAL_TIM_Base_Start_IT+0xd0>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d009      	beq.n	8004fbe <HAL_TIM_Base_Start_IT+0x76>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	4a1b      	ldr	r2, [pc, #108]	; (800501c <HAL_TIM_Base_Start_IT+0xd4>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d004      	beq.n	8004fbe <HAL_TIM_Base_Start_IT+0x76>
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	4a19      	ldr	r2, [pc, #100]	; (8005020 <HAL_TIM_Base_Start_IT+0xd8>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d115      	bne.n	8004fea <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	689a      	ldr	r2, [r3, #8]
 8004fc4:	4b17      	ldr	r3, [pc, #92]	; (8005024 <HAL_TIM_Base_Start_IT+0xdc>)
 8004fc6:	4013      	ands	r3, r2
 8004fc8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	2b06      	cmp	r3, #6
 8004fce:	d015      	beq.n	8004ffc <HAL_TIM_Base_Start_IT+0xb4>
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fd6:	d011      	beq.n	8004ffc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	681a      	ldr	r2, [r3, #0]
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f042 0201 	orr.w	r2, r2, #1
 8004fe6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fe8:	e008      	b.n	8004ffc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	681a      	ldr	r2, [r3, #0]
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f042 0201 	orr.w	r2, r2, #1
 8004ff8:	601a      	str	r2, [r3, #0]
 8004ffa:	e000      	b.n	8004ffe <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ffc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004ffe:	2300      	movs	r3, #0
}
 8005000:	4618      	mov	r0, r3
 8005002:	3714      	adds	r7, #20
 8005004:	46bd      	mov	sp, r7
 8005006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500a:	4770      	bx	lr
 800500c:	40012c00 	.word	0x40012c00
 8005010:	40000400 	.word	0x40000400
 8005014:	40000800 	.word	0x40000800
 8005018:	40000c00 	.word	0x40000c00
 800501c:	40013400 	.word	0x40013400
 8005020:	40014000 	.word	0x40014000
 8005024:	00010007 	.word	0x00010007

08005028 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005028:	b480      	push	{r7}
 800502a:	b085      	sub	sp, #20
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
 8005030:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	4a40      	ldr	r2, [pc, #256]	; (800513c <TIM_Base_SetConfig+0x114>)
 800503c:	4293      	cmp	r3, r2
 800503e:	d013      	beq.n	8005068 <TIM_Base_SetConfig+0x40>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005046:	d00f      	beq.n	8005068 <TIM_Base_SetConfig+0x40>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	4a3d      	ldr	r2, [pc, #244]	; (8005140 <TIM_Base_SetConfig+0x118>)
 800504c:	4293      	cmp	r3, r2
 800504e:	d00b      	beq.n	8005068 <TIM_Base_SetConfig+0x40>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	4a3c      	ldr	r2, [pc, #240]	; (8005144 <TIM_Base_SetConfig+0x11c>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d007      	beq.n	8005068 <TIM_Base_SetConfig+0x40>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	4a3b      	ldr	r2, [pc, #236]	; (8005148 <TIM_Base_SetConfig+0x120>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d003      	beq.n	8005068 <TIM_Base_SetConfig+0x40>
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	4a3a      	ldr	r2, [pc, #232]	; (800514c <TIM_Base_SetConfig+0x124>)
 8005064:	4293      	cmp	r3, r2
 8005066:	d108      	bne.n	800507a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800506e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	685b      	ldr	r3, [r3, #4]
 8005074:	68fa      	ldr	r2, [r7, #12]
 8005076:	4313      	orrs	r3, r2
 8005078:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	4a2f      	ldr	r2, [pc, #188]	; (800513c <TIM_Base_SetConfig+0x114>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d01f      	beq.n	80050c2 <TIM_Base_SetConfig+0x9a>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005088:	d01b      	beq.n	80050c2 <TIM_Base_SetConfig+0x9a>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	4a2c      	ldr	r2, [pc, #176]	; (8005140 <TIM_Base_SetConfig+0x118>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d017      	beq.n	80050c2 <TIM_Base_SetConfig+0x9a>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	4a2b      	ldr	r2, [pc, #172]	; (8005144 <TIM_Base_SetConfig+0x11c>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d013      	beq.n	80050c2 <TIM_Base_SetConfig+0x9a>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	4a2a      	ldr	r2, [pc, #168]	; (8005148 <TIM_Base_SetConfig+0x120>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d00f      	beq.n	80050c2 <TIM_Base_SetConfig+0x9a>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	4a29      	ldr	r2, [pc, #164]	; (800514c <TIM_Base_SetConfig+0x124>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d00b      	beq.n	80050c2 <TIM_Base_SetConfig+0x9a>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	4a28      	ldr	r2, [pc, #160]	; (8005150 <TIM_Base_SetConfig+0x128>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d007      	beq.n	80050c2 <TIM_Base_SetConfig+0x9a>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	4a27      	ldr	r2, [pc, #156]	; (8005154 <TIM_Base_SetConfig+0x12c>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d003      	beq.n	80050c2 <TIM_Base_SetConfig+0x9a>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	4a26      	ldr	r2, [pc, #152]	; (8005158 <TIM_Base_SetConfig+0x130>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d108      	bne.n	80050d4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	68db      	ldr	r3, [r3, #12]
 80050ce:	68fa      	ldr	r2, [r7, #12]
 80050d0:	4313      	orrs	r3, r2
 80050d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	695b      	ldr	r3, [r3, #20]
 80050de:	4313      	orrs	r3, r2
 80050e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	68fa      	ldr	r2, [r7, #12]
 80050e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	689a      	ldr	r2, [r3, #8]
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	681a      	ldr	r2, [r3, #0]
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	4a10      	ldr	r2, [pc, #64]	; (800513c <TIM_Base_SetConfig+0x114>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d00f      	beq.n	8005120 <TIM_Base_SetConfig+0xf8>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	4a12      	ldr	r2, [pc, #72]	; (800514c <TIM_Base_SetConfig+0x124>)
 8005104:	4293      	cmp	r3, r2
 8005106:	d00b      	beq.n	8005120 <TIM_Base_SetConfig+0xf8>
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	4a11      	ldr	r2, [pc, #68]	; (8005150 <TIM_Base_SetConfig+0x128>)
 800510c:	4293      	cmp	r3, r2
 800510e:	d007      	beq.n	8005120 <TIM_Base_SetConfig+0xf8>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	4a10      	ldr	r2, [pc, #64]	; (8005154 <TIM_Base_SetConfig+0x12c>)
 8005114:	4293      	cmp	r3, r2
 8005116:	d003      	beq.n	8005120 <TIM_Base_SetConfig+0xf8>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	4a0f      	ldr	r2, [pc, #60]	; (8005158 <TIM_Base_SetConfig+0x130>)
 800511c:	4293      	cmp	r3, r2
 800511e:	d103      	bne.n	8005128 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	691a      	ldr	r2, [r3, #16]
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2201      	movs	r2, #1
 800512c:	615a      	str	r2, [r3, #20]
}
 800512e:	bf00      	nop
 8005130:	3714      	adds	r7, #20
 8005132:	46bd      	mov	sp, r7
 8005134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005138:	4770      	bx	lr
 800513a:	bf00      	nop
 800513c:	40012c00 	.word	0x40012c00
 8005140:	40000400 	.word	0x40000400
 8005144:	40000800 	.word	0x40000800
 8005148:	40000c00 	.word	0x40000c00
 800514c:	40013400 	.word	0x40013400
 8005150:	40014000 	.word	0x40014000
 8005154:	40014400 	.word	0x40014400
 8005158:	40014800 	.word	0x40014800

0800515c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800515c:	b480      	push	{r7}
 800515e:	b085      	sub	sp, #20
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
 8005164:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800516c:	2b01      	cmp	r3, #1
 800516e:	d101      	bne.n	8005174 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005170:	2302      	movs	r3, #2
 8005172:	e068      	b.n	8005246 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2201      	movs	r2, #1
 8005178:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2202      	movs	r2, #2
 8005180:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	685b      	ldr	r3, [r3, #4]
 800518a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	689b      	ldr	r3, [r3, #8]
 8005192:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	4a2e      	ldr	r2, [pc, #184]	; (8005254 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800519a:	4293      	cmp	r3, r2
 800519c:	d004      	beq.n	80051a8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	4a2d      	ldr	r2, [pc, #180]	; (8005258 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80051a4:	4293      	cmp	r3, r2
 80051a6:	d108      	bne.n	80051ba <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80051ae:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	685b      	ldr	r3, [r3, #4]
 80051b4:	68fa      	ldr	r2, [r7, #12]
 80051b6:	4313      	orrs	r3, r2
 80051b8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051c0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	68fa      	ldr	r2, [r7, #12]
 80051c8:	4313      	orrs	r3, r2
 80051ca:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	68fa      	ldr	r2, [r7, #12]
 80051d2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4a1e      	ldr	r2, [pc, #120]	; (8005254 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d01d      	beq.n	800521a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051e6:	d018      	beq.n	800521a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	4a1b      	ldr	r2, [pc, #108]	; (800525c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d013      	beq.n	800521a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	4a1a      	ldr	r2, [pc, #104]	; (8005260 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d00e      	beq.n	800521a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	4a18      	ldr	r2, [pc, #96]	; (8005264 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d009      	beq.n	800521a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	4a13      	ldr	r2, [pc, #76]	; (8005258 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800520c:	4293      	cmp	r3, r2
 800520e:	d004      	beq.n	800521a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	4a14      	ldr	r2, [pc, #80]	; (8005268 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005216:	4293      	cmp	r3, r2
 8005218:	d10c      	bne.n	8005234 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800521a:	68bb      	ldr	r3, [r7, #8]
 800521c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005220:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	689b      	ldr	r3, [r3, #8]
 8005226:	68ba      	ldr	r2, [r7, #8]
 8005228:	4313      	orrs	r3, r2
 800522a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	68ba      	ldr	r2, [r7, #8]
 8005232:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2201      	movs	r2, #1
 8005238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2200      	movs	r2, #0
 8005240:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005244:	2300      	movs	r3, #0
}
 8005246:	4618      	mov	r0, r3
 8005248:	3714      	adds	r7, #20
 800524a:	46bd      	mov	sp, r7
 800524c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005250:	4770      	bx	lr
 8005252:	bf00      	nop
 8005254:	40012c00 	.word	0x40012c00
 8005258:	40013400 	.word	0x40013400
 800525c:	40000400 	.word	0x40000400
 8005260:	40000800 	.word	0x40000800
 8005264:	40000c00 	.word	0x40000c00
 8005268:	40014000 	.word	0x40014000

0800526c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800526c:	b580      	push	{r7, lr}
 800526e:	b082      	sub	sp, #8
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d101      	bne.n	800527e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800527a:	2301      	movs	r3, #1
 800527c:	e040      	b.n	8005300 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005282:	2b00      	cmp	r3, #0
 8005284:	d106      	bne.n	8005294 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	2200      	movs	r2, #0
 800528a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800528e:	6878      	ldr	r0, [r7, #4]
 8005290:	f7fb fe0c 	bl	8000eac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2224      	movs	r2, #36	; 0x24
 8005298:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	681a      	ldr	r2, [r3, #0]
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f022 0201 	bic.w	r2, r2, #1
 80052a8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80052aa:	6878      	ldr	r0, [r7, #4]
 80052ac:	f000 f8c0 	bl	8005430 <UART_SetConfig>
 80052b0:	4603      	mov	r3, r0
 80052b2:	2b01      	cmp	r3, #1
 80052b4:	d101      	bne.n	80052ba <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80052b6:	2301      	movs	r3, #1
 80052b8:	e022      	b.n	8005300 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d002      	beq.n	80052c8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80052c2:	6878      	ldr	r0, [r7, #4]
 80052c4:	f000 fb3e 	bl	8005944 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	685a      	ldr	r2, [r3, #4]
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80052d6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	689a      	ldr	r2, [r3, #8]
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80052e6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	681a      	ldr	r2, [r3, #0]
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f042 0201 	orr.w	r2, r2, #1
 80052f6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80052f8:	6878      	ldr	r0, [r7, #4]
 80052fa:	f000 fbc5 	bl	8005a88 <UART_CheckIdleState>
 80052fe:	4603      	mov	r3, r0
}
 8005300:	4618      	mov	r0, r3
 8005302:	3708      	adds	r7, #8
 8005304:	46bd      	mov	sp, r7
 8005306:	bd80      	pop	{r7, pc}

08005308 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005308:	b580      	push	{r7, lr}
 800530a:	b08a      	sub	sp, #40	; 0x28
 800530c:	af02      	add	r7, sp, #8
 800530e:	60f8      	str	r0, [r7, #12]
 8005310:	60b9      	str	r1, [r7, #8]
 8005312:	603b      	str	r3, [r7, #0]
 8005314:	4613      	mov	r3, r2
 8005316:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800531c:	2b20      	cmp	r3, #32
 800531e:	f040 8081 	bne.w	8005424 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005322:	68bb      	ldr	r3, [r7, #8]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d002      	beq.n	800532e <HAL_UART_Transmit+0x26>
 8005328:	88fb      	ldrh	r3, [r7, #6]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d101      	bne.n	8005332 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800532e:	2301      	movs	r3, #1
 8005330:	e079      	b.n	8005426 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8005338:	2b01      	cmp	r3, #1
 800533a:	d101      	bne.n	8005340 <HAL_UART_Transmit+0x38>
 800533c:	2302      	movs	r3, #2
 800533e:	e072      	b.n	8005426 <HAL_UART_Transmit+0x11e>
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	2201      	movs	r2, #1
 8005344:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	2200      	movs	r2, #0
 800534c:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	2221      	movs	r2, #33	; 0x21
 8005352:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8005354:	f7fb fe86 	bl	8001064 <HAL_GetTick>
 8005358:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	88fa      	ldrh	r2, [r7, #6]
 800535e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	88fa      	ldrh	r2, [r7, #6]
 8005366:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	689b      	ldr	r3, [r3, #8]
 800536e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005372:	d108      	bne.n	8005386 <HAL_UART_Transmit+0x7e>
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	691b      	ldr	r3, [r3, #16]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d104      	bne.n	8005386 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 800537c:	2300      	movs	r3, #0
 800537e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	61bb      	str	r3, [r7, #24]
 8005384:	e003      	b.n	800538e <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8005386:	68bb      	ldr	r3, [r7, #8]
 8005388:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800538a:	2300      	movs	r3, #0
 800538c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	2200      	movs	r2, #0
 8005392:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8005396:	e02d      	b.n	80053f4 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	9300      	str	r3, [sp, #0]
 800539c:	697b      	ldr	r3, [r7, #20]
 800539e:	2200      	movs	r2, #0
 80053a0:	2180      	movs	r1, #128	; 0x80
 80053a2:	68f8      	ldr	r0, [r7, #12]
 80053a4:	f000 fbb5 	bl	8005b12 <UART_WaitOnFlagUntilTimeout>
 80053a8:	4603      	mov	r3, r0
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d001      	beq.n	80053b2 <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 80053ae:	2303      	movs	r3, #3
 80053b0:	e039      	b.n	8005426 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 80053b2:	69fb      	ldr	r3, [r7, #28]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d10b      	bne.n	80053d0 <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80053b8:	69bb      	ldr	r3, [r7, #24]
 80053ba:	881a      	ldrh	r2, [r3, #0]
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80053c4:	b292      	uxth	r2, r2
 80053c6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80053c8:	69bb      	ldr	r3, [r7, #24]
 80053ca:	3302      	adds	r3, #2
 80053cc:	61bb      	str	r3, [r7, #24]
 80053ce:	e008      	b.n	80053e2 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80053d0:	69fb      	ldr	r3, [r7, #28]
 80053d2:	781a      	ldrb	r2, [r3, #0]
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	b292      	uxth	r2, r2
 80053da:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80053dc:	69fb      	ldr	r3, [r7, #28]
 80053de:	3301      	adds	r3, #1
 80053e0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80053e8:	b29b      	uxth	r3, r3
 80053ea:	3b01      	subs	r3, #1
 80053ec:	b29a      	uxth	r2, r3
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80053fa:	b29b      	uxth	r3, r3
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d1cb      	bne.n	8005398 <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	9300      	str	r3, [sp, #0]
 8005404:	697b      	ldr	r3, [r7, #20]
 8005406:	2200      	movs	r2, #0
 8005408:	2140      	movs	r1, #64	; 0x40
 800540a:	68f8      	ldr	r0, [r7, #12]
 800540c:	f000 fb81 	bl	8005b12 <UART_WaitOnFlagUntilTimeout>
 8005410:	4603      	mov	r3, r0
 8005412:	2b00      	cmp	r3, #0
 8005414:	d001      	beq.n	800541a <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8005416:	2303      	movs	r3, #3
 8005418:	e005      	b.n	8005426 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	2220      	movs	r2, #32
 800541e:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8005420:	2300      	movs	r3, #0
 8005422:	e000      	b.n	8005426 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8005424:	2302      	movs	r3, #2
  }
}
 8005426:	4618      	mov	r0, r3
 8005428:	3720      	adds	r7, #32
 800542a:	46bd      	mov	sp, r7
 800542c:	bd80      	pop	{r7, pc}
	...

08005430 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005430:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8005434:	b088      	sub	sp, #32
 8005436:	af00      	add	r7, sp, #0
 8005438:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800543a:	2300      	movs	r3, #0
 800543c:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	689a      	ldr	r2, [r3, #8]
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	691b      	ldr	r3, [r3, #16]
 8005446:	431a      	orrs	r2, r3
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	695b      	ldr	r3, [r3, #20]
 800544c:	431a      	orrs	r2, r3
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	69db      	ldr	r3, [r3, #28]
 8005452:	4313      	orrs	r3, r2
 8005454:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	681a      	ldr	r2, [r3, #0]
 800545c:	4bac      	ldr	r3, [pc, #688]	; (8005710 <UART_SetConfig+0x2e0>)
 800545e:	4013      	ands	r3, r2
 8005460:	687a      	ldr	r2, [r7, #4]
 8005462:	6812      	ldr	r2, [r2, #0]
 8005464:	69f9      	ldr	r1, [r7, #28]
 8005466:	430b      	orrs	r3, r1
 8005468:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	685b      	ldr	r3, [r3, #4]
 8005470:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	68da      	ldr	r2, [r3, #12]
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	430a      	orrs	r2, r1
 800547e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	699b      	ldr	r3, [r3, #24]
 8005484:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	4aa2      	ldr	r2, [pc, #648]	; (8005714 <UART_SetConfig+0x2e4>)
 800548c:	4293      	cmp	r3, r2
 800548e:	d004      	beq.n	800549a <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6a1b      	ldr	r3, [r3, #32]
 8005494:	69fa      	ldr	r2, [r7, #28]
 8005496:	4313      	orrs	r3, r2
 8005498:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	689b      	ldr	r3, [r3, #8]
 80054a0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	69fa      	ldr	r2, [r7, #28]
 80054aa:	430a      	orrs	r2, r1
 80054ac:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	4a99      	ldr	r2, [pc, #612]	; (8005718 <UART_SetConfig+0x2e8>)
 80054b4:	4293      	cmp	r3, r2
 80054b6:	d121      	bne.n	80054fc <UART_SetConfig+0xcc>
 80054b8:	4b98      	ldr	r3, [pc, #608]	; (800571c <UART_SetConfig+0x2ec>)
 80054ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054be:	f003 0303 	and.w	r3, r3, #3
 80054c2:	2b03      	cmp	r3, #3
 80054c4:	d816      	bhi.n	80054f4 <UART_SetConfig+0xc4>
 80054c6:	a201      	add	r2, pc, #4	; (adr r2, 80054cc <UART_SetConfig+0x9c>)
 80054c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054cc:	080054dd 	.word	0x080054dd
 80054d0:	080054e9 	.word	0x080054e9
 80054d4:	080054e3 	.word	0x080054e3
 80054d8:	080054ef 	.word	0x080054ef
 80054dc:	2301      	movs	r3, #1
 80054de:	76fb      	strb	r3, [r7, #27]
 80054e0:	e0e8      	b.n	80056b4 <UART_SetConfig+0x284>
 80054e2:	2302      	movs	r3, #2
 80054e4:	76fb      	strb	r3, [r7, #27]
 80054e6:	e0e5      	b.n	80056b4 <UART_SetConfig+0x284>
 80054e8:	2304      	movs	r3, #4
 80054ea:	76fb      	strb	r3, [r7, #27]
 80054ec:	e0e2      	b.n	80056b4 <UART_SetConfig+0x284>
 80054ee:	2308      	movs	r3, #8
 80054f0:	76fb      	strb	r3, [r7, #27]
 80054f2:	e0df      	b.n	80056b4 <UART_SetConfig+0x284>
 80054f4:	2310      	movs	r3, #16
 80054f6:	76fb      	strb	r3, [r7, #27]
 80054f8:	bf00      	nop
 80054fa:	e0db      	b.n	80056b4 <UART_SetConfig+0x284>
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	4a87      	ldr	r2, [pc, #540]	; (8005720 <UART_SetConfig+0x2f0>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d134      	bne.n	8005570 <UART_SetConfig+0x140>
 8005506:	4b85      	ldr	r3, [pc, #532]	; (800571c <UART_SetConfig+0x2ec>)
 8005508:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800550c:	f003 030c 	and.w	r3, r3, #12
 8005510:	2b0c      	cmp	r3, #12
 8005512:	d829      	bhi.n	8005568 <UART_SetConfig+0x138>
 8005514:	a201      	add	r2, pc, #4	; (adr r2, 800551c <UART_SetConfig+0xec>)
 8005516:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800551a:	bf00      	nop
 800551c:	08005551 	.word	0x08005551
 8005520:	08005569 	.word	0x08005569
 8005524:	08005569 	.word	0x08005569
 8005528:	08005569 	.word	0x08005569
 800552c:	0800555d 	.word	0x0800555d
 8005530:	08005569 	.word	0x08005569
 8005534:	08005569 	.word	0x08005569
 8005538:	08005569 	.word	0x08005569
 800553c:	08005557 	.word	0x08005557
 8005540:	08005569 	.word	0x08005569
 8005544:	08005569 	.word	0x08005569
 8005548:	08005569 	.word	0x08005569
 800554c:	08005563 	.word	0x08005563
 8005550:	2300      	movs	r3, #0
 8005552:	76fb      	strb	r3, [r7, #27]
 8005554:	e0ae      	b.n	80056b4 <UART_SetConfig+0x284>
 8005556:	2302      	movs	r3, #2
 8005558:	76fb      	strb	r3, [r7, #27]
 800555a:	e0ab      	b.n	80056b4 <UART_SetConfig+0x284>
 800555c:	2304      	movs	r3, #4
 800555e:	76fb      	strb	r3, [r7, #27]
 8005560:	e0a8      	b.n	80056b4 <UART_SetConfig+0x284>
 8005562:	2308      	movs	r3, #8
 8005564:	76fb      	strb	r3, [r7, #27]
 8005566:	e0a5      	b.n	80056b4 <UART_SetConfig+0x284>
 8005568:	2310      	movs	r3, #16
 800556a:	76fb      	strb	r3, [r7, #27]
 800556c:	bf00      	nop
 800556e:	e0a1      	b.n	80056b4 <UART_SetConfig+0x284>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	4a6b      	ldr	r2, [pc, #428]	; (8005724 <UART_SetConfig+0x2f4>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d120      	bne.n	80055bc <UART_SetConfig+0x18c>
 800557a:	4b68      	ldr	r3, [pc, #416]	; (800571c <UART_SetConfig+0x2ec>)
 800557c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005580:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005584:	2b10      	cmp	r3, #16
 8005586:	d00f      	beq.n	80055a8 <UART_SetConfig+0x178>
 8005588:	2b10      	cmp	r3, #16
 800558a:	d802      	bhi.n	8005592 <UART_SetConfig+0x162>
 800558c:	2b00      	cmp	r3, #0
 800558e:	d005      	beq.n	800559c <UART_SetConfig+0x16c>
 8005590:	e010      	b.n	80055b4 <UART_SetConfig+0x184>
 8005592:	2b20      	cmp	r3, #32
 8005594:	d005      	beq.n	80055a2 <UART_SetConfig+0x172>
 8005596:	2b30      	cmp	r3, #48	; 0x30
 8005598:	d009      	beq.n	80055ae <UART_SetConfig+0x17e>
 800559a:	e00b      	b.n	80055b4 <UART_SetConfig+0x184>
 800559c:	2300      	movs	r3, #0
 800559e:	76fb      	strb	r3, [r7, #27]
 80055a0:	e088      	b.n	80056b4 <UART_SetConfig+0x284>
 80055a2:	2302      	movs	r3, #2
 80055a4:	76fb      	strb	r3, [r7, #27]
 80055a6:	e085      	b.n	80056b4 <UART_SetConfig+0x284>
 80055a8:	2304      	movs	r3, #4
 80055aa:	76fb      	strb	r3, [r7, #27]
 80055ac:	e082      	b.n	80056b4 <UART_SetConfig+0x284>
 80055ae:	2308      	movs	r3, #8
 80055b0:	76fb      	strb	r3, [r7, #27]
 80055b2:	e07f      	b.n	80056b4 <UART_SetConfig+0x284>
 80055b4:	2310      	movs	r3, #16
 80055b6:	76fb      	strb	r3, [r7, #27]
 80055b8:	bf00      	nop
 80055ba:	e07b      	b.n	80056b4 <UART_SetConfig+0x284>
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	4a59      	ldr	r2, [pc, #356]	; (8005728 <UART_SetConfig+0x2f8>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d120      	bne.n	8005608 <UART_SetConfig+0x1d8>
 80055c6:	4b55      	ldr	r3, [pc, #340]	; (800571c <UART_SetConfig+0x2ec>)
 80055c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055cc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80055d0:	2b40      	cmp	r3, #64	; 0x40
 80055d2:	d00f      	beq.n	80055f4 <UART_SetConfig+0x1c4>
 80055d4:	2b40      	cmp	r3, #64	; 0x40
 80055d6:	d802      	bhi.n	80055de <UART_SetConfig+0x1ae>
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d005      	beq.n	80055e8 <UART_SetConfig+0x1b8>
 80055dc:	e010      	b.n	8005600 <UART_SetConfig+0x1d0>
 80055de:	2b80      	cmp	r3, #128	; 0x80
 80055e0:	d005      	beq.n	80055ee <UART_SetConfig+0x1be>
 80055e2:	2bc0      	cmp	r3, #192	; 0xc0
 80055e4:	d009      	beq.n	80055fa <UART_SetConfig+0x1ca>
 80055e6:	e00b      	b.n	8005600 <UART_SetConfig+0x1d0>
 80055e8:	2300      	movs	r3, #0
 80055ea:	76fb      	strb	r3, [r7, #27]
 80055ec:	e062      	b.n	80056b4 <UART_SetConfig+0x284>
 80055ee:	2302      	movs	r3, #2
 80055f0:	76fb      	strb	r3, [r7, #27]
 80055f2:	e05f      	b.n	80056b4 <UART_SetConfig+0x284>
 80055f4:	2304      	movs	r3, #4
 80055f6:	76fb      	strb	r3, [r7, #27]
 80055f8:	e05c      	b.n	80056b4 <UART_SetConfig+0x284>
 80055fa:	2308      	movs	r3, #8
 80055fc:	76fb      	strb	r3, [r7, #27]
 80055fe:	e059      	b.n	80056b4 <UART_SetConfig+0x284>
 8005600:	2310      	movs	r3, #16
 8005602:	76fb      	strb	r3, [r7, #27]
 8005604:	bf00      	nop
 8005606:	e055      	b.n	80056b4 <UART_SetConfig+0x284>
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	4a47      	ldr	r2, [pc, #284]	; (800572c <UART_SetConfig+0x2fc>)
 800560e:	4293      	cmp	r3, r2
 8005610:	d124      	bne.n	800565c <UART_SetConfig+0x22c>
 8005612:	4b42      	ldr	r3, [pc, #264]	; (800571c <UART_SetConfig+0x2ec>)
 8005614:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005618:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800561c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005620:	d012      	beq.n	8005648 <UART_SetConfig+0x218>
 8005622:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005626:	d802      	bhi.n	800562e <UART_SetConfig+0x1fe>
 8005628:	2b00      	cmp	r3, #0
 800562a:	d007      	beq.n	800563c <UART_SetConfig+0x20c>
 800562c:	e012      	b.n	8005654 <UART_SetConfig+0x224>
 800562e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005632:	d006      	beq.n	8005642 <UART_SetConfig+0x212>
 8005634:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005638:	d009      	beq.n	800564e <UART_SetConfig+0x21e>
 800563a:	e00b      	b.n	8005654 <UART_SetConfig+0x224>
 800563c:	2300      	movs	r3, #0
 800563e:	76fb      	strb	r3, [r7, #27]
 8005640:	e038      	b.n	80056b4 <UART_SetConfig+0x284>
 8005642:	2302      	movs	r3, #2
 8005644:	76fb      	strb	r3, [r7, #27]
 8005646:	e035      	b.n	80056b4 <UART_SetConfig+0x284>
 8005648:	2304      	movs	r3, #4
 800564a:	76fb      	strb	r3, [r7, #27]
 800564c:	e032      	b.n	80056b4 <UART_SetConfig+0x284>
 800564e:	2308      	movs	r3, #8
 8005650:	76fb      	strb	r3, [r7, #27]
 8005652:	e02f      	b.n	80056b4 <UART_SetConfig+0x284>
 8005654:	2310      	movs	r3, #16
 8005656:	76fb      	strb	r3, [r7, #27]
 8005658:	bf00      	nop
 800565a:	e02b      	b.n	80056b4 <UART_SetConfig+0x284>
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	4a2c      	ldr	r2, [pc, #176]	; (8005714 <UART_SetConfig+0x2e4>)
 8005662:	4293      	cmp	r3, r2
 8005664:	d124      	bne.n	80056b0 <UART_SetConfig+0x280>
 8005666:	4b2d      	ldr	r3, [pc, #180]	; (800571c <UART_SetConfig+0x2ec>)
 8005668:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800566c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005670:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005674:	d012      	beq.n	800569c <UART_SetConfig+0x26c>
 8005676:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800567a:	d802      	bhi.n	8005682 <UART_SetConfig+0x252>
 800567c:	2b00      	cmp	r3, #0
 800567e:	d007      	beq.n	8005690 <UART_SetConfig+0x260>
 8005680:	e012      	b.n	80056a8 <UART_SetConfig+0x278>
 8005682:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005686:	d006      	beq.n	8005696 <UART_SetConfig+0x266>
 8005688:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800568c:	d009      	beq.n	80056a2 <UART_SetConfig+0x272>
 800568e:	e00b      	b.n	80056a8 <UART_SetConfig+0x278>
 8005690:	2300      	movs	r3, #0
 8005692:	76fb      	strb	r3, [r7, #27]
 8005694:	e00e      	b.n	80056b4 <UART_SetConfig+0x284>
 8005696:	2302      	movs	r3, #2
 8005698:	76fb      	strb	r3, [r7, #27]
 800569a:	e00b      	b.n	80056b4 <UART_SetConfig+0x284>
 800569c:	2304      	movs	r3, #4
 800569e:	76fb      	strb	r3, [r7, #27]
 80056a0:	e008      	b.n	80056b4 <UART_SetConfig+0x284>
 80056a2:	2308      	movs	r3, #8
 80056a4:	76fb      	strb	r3, [r7, #27]
 80056a6:	e005      	b.n	80056b4 <UART_SetConfig+0x284>
 80056a8:	2310      	movs	r3, #16
 80056aa:	76fb      	strb	r3, [r7, #27]
 80056ac:	bf00      	nop
 80056ae:	e001      	b.n	80056b4 <UART_SetConfig+0x284>
 80056b0:	2310      	movs	r3, #16
 80056b2:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	4a16      	ldr	r2, [pc, #88]	; (8005714 <UART_SetConfig+0x2e4>)
 80056ba:	4293      	cmp	r3, r2
 80056bc:	f040 8087 	bne.w	80057ce <UART_SetConfig+0x39e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80056c0:	7efb      	ldrb	r3, [r7, #27]
 80056c2:	2b08      	cmp	r3, #8
 80056c4:	d836      	bhi.n	8005734 <UART_SetConfig+0x304>
 80056c6:	a201      	add	r2, pc, #4	; (adr r2, 80056cc <UART_SetConfig+0x29c>)
 80056c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056cc:	080056f1 	.word	0x080056f1
 80056d0:	08005735 	.word	0x08005735
 80056d4:	080056f9 	.word	0x080056f9
 80056d8:	08005735 	.word	0x08005735
 80056dc:	080056ff 	.word	0x080056ff
 80056e0:	08005735 	.word	0x08005735
 80056e4:	08005735 	.word	0x08005735
 80056e8:	08005735 	.word	0x08005735
 80056ec:	08005707 	.word	0x08005707
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80056f0:	f7fe fe96 	bl	8004420 <HAL_RCC_GetPCLK1Freq>
 80056f4:	6178      	str	r0, [r7, #20]
        break;
 80056f6:	e022      	b.n	800573e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80056f8:	4b0d      	ldr	r3, [pc, #52]	; (8005730 <UART_SetConfig+0x300>)
 80056fa:	617b      	str	r3, [r7, #20]
        break;
 80056fc:	e01f      	b.n	800573e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80056fe:	f7fe fdf9 	bl	80042f4 <HAL_RCC_GetSysClockFreq>
 8005702:	6178      	str	r0, [r7, #20]
        break;
 8005704:	e01b      	b.n	800573e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005706:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800570a:	617b      	str	r3, [r7, #20]
        break;
 800570c:	e017      	b.n	800573e <UART_SetConfig+0x30e>
 800570e:	bf00      	nop
 8005710:	efff69f3 	.word	0xefff69f3
 8005714:	40008000 	.word	0x40008000
 8005718:	40013800 	.word	0x40013800
 800571c:	40021000 	.word	0x40021000
 8005720:	40004400 	.word	0x40004400
 8005724:	40004800 	.word	0x40004800
 8005728:	40004c00 	.word	0x40004c00
 800572c:	40005000 	.word	0x40005000
 8005730:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8005734:	2300      	movs	r3, #0
 8005736:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005738:	2301      	movs	r3, #1
 800573a:	76bb      	strb	r3, [r7, #26]
        break;
 800573c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800573e:	697b      	ldr	r3, [r7, #20]
 8005740:	2b00      	cmp	r3, #0
 8005742:	f000 80f1 	beq.w	8005928 <UART_SetConfig+0x4f8>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	685a      	ldr	r2, [r3, #4]
 800574a:	4613      	mov	r3, r2
 800574c:	005b      	lsls	r3, r3, #1
 800574e:	4413      	add	r3, r2
 8005750:	697a      	ldr	r2, [r7, #20]
 8005752:	429a      	cmp	r2, r3
 8005754:	d305      	bcc.n	8005762 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	685b      	ldr	r3, [r3, #4]
 800575a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800575c:	697a      	ldr	r2, [r7, #20]
 800575e:	429a      	cmp	r2, r3
 8005760:	d902      	bls.n	8005768 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8005762:	2301      	movs	r3, #1
 8005764:	76bb      	strb	r3, [r7, #26]
 8005766:	e0df      	b.n	8005928 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 8005768:	697b      	ldr	r3, [r7, #20]
 800576a:	4619      	mov	r1, r3
 800576c:	f04f 0200 	mov.w	r2, #0
 8005770:	f04f 0300 	mov.w	r3, #0
 8005774:	f04f 0400 	mov.w	r4, #0
 8005778:	0214      	lsls	r4, r2, #8
 800577a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800577e:	020b      	lsls	r3, r1, #8
 8005780:	687a      	ldr	r2, [r7, #4]
 8005782:	6852      	ldr	r2, [r2, #4]
 8005784:	0852      	lsrs	r2, r2, #1
 8005786:	4611      	mov	r1, r2
 8005788:	f04f 0200 	mov.w	r2, #0
 800578c:	eb13 0b01 	adds.w	fp, r3, r1
 8005790:	eb44 0c02 	adc.w	ip, r4, r2
 8005794:	4658      	mov	r0, fp
 8005796:	4661      	mov	r1, ip
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	685b      	ldr	r3, [r3, #4]
 800579c:	f04f 0400 	mov.w	r4, #0
 80057a0:	461a      	mov	r2, r3
 80057a2:	4623      	mov	r3, r4
 80057a4:	f7fa fd64 	bl	8000270 <__aeabi_uldivmod>
 80057a8:	4603      	mov	r3, r0
 80057aa:	460c      	mov	r4, r1
 80057ac:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80057ae:	693b      	ldr	r3, [r7, #16]
 80057b0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80057b4:	d308      	bcc.n	80057c8 <UART_SetConfig+0x398>
 80057b6:	693b      	ldr	r3, [r7, #16]
 80057b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80057bc:	d204      	bcs.n	80057c8 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	693a      	ldr	r2, [r7, #16]
 80057c4:	60da      	str	r2, [r3, #12]
 80057c6:	e0af      	b.n	8005928 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 80057c8:	2301      	movs	r3, #1
 80057ca:	76bb      	strb	r3, [r7, #26]
 80057cc:	e0ac      	b.n	8005928 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	69db      	ldr	r3, [r3, #28]
 80057d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80057d6:	d15b      	bne.n	8005890 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 80057d8:	7efb      	ldrb	r3, [r7, #27]
 80057da:	2b08      	cmp	r3, #8
 80057dc:	d827      	bhi.n	800582e <UART_SetConfig+0x3fe>
 80057de:	a201      	add	r2, pc, #4	; (adr r2, 80057e4 <UART_SetConfig+0x3b4>)
 80057e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057e4:	08005809 	.word	0x08005809
 80057e8:	08005811 	.word	0x08005811
 80057ec:	08005819 	.word	0x08005819
 80057f0:	0800582f 	.word	0x0800582f
 80057f4:	0800581f 	.word	0x0800581f
 80057f8:	0800582f 	.word	0x0800582f
 80057fc:	0800582f 	.word	0x0800582f
 8005800:	0800582f 	.word	0x0800582f
 8005804:	08005827 	.word	0x08005827
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005808:	f7fe fe0a 	bl	8004420 <HAL_RCC_GetPCLK1Freq>
 800580c:	6178      	str	r0, [r7, #20]
        break;
 800580e:	e013      	b.n	8005838 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005810:	f7fe fe1c 	bl	800444c <HAL_RCC_GetPCLK2Freq>
 8005814:	6178      	str	r0, [r7, #20]
        break;
 8005816:	e00f      	b.n	8005838 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005818:	4b49      	ldr	r3, [pc, #292]	; (8005940 <UART_SetConfig+0x510>)
 800581a:	617b      	str	r3, [r7, #20]
        break;
 800581c:	e00c      	b.n	8005838 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800581e:	f7fe fd69 	bl	80042f4 <HAL_RCC_GetSysClockFreq>
 8005822:	6178      	str	r0, [r7, #20]
        break;
 8005824:	e008      	b.n	8005838 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005826:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800582a:	617b      	str	r3, [r7, #20]
        break;
 800582c:	e004      	b.n	8005838 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 800582e:	2300      	movs	r3, #0
 8005830:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005832:	2301      	movs	r3, #1
 8005834:	76bb      	strb	r3, [r7, #26]
        break;
 8005836:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005838:	697b      	ldr	r3, [r7, #20]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d074      	beq.n	8005928 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800583e:	697b      	ldr	r3, [r7, #20]
 8005840:	005a      	lsls	r2, r3, #1
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	685b      	ldr	r3, [r3, #4]
 8005846:	085b      	lsrs	r3, r3, #1
 8005848:	441a      	add	r2, r3
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	685b      	ldr	r3, [r3, #4]
 800584e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005852:	b29b      	uxth	r3, r3
 8005854:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005856:	693b      	ldr	r3, [r7, #16]
 8005858:	2b0f      	cmp	r3, #15
 800585a:	d916      	bls.n	800588a <UART_SetConfig+0x45a>
 800585c:	693b      	ldr	r3, [r7, #16]
 800585e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005862:	d212      	bcs.n	800588a <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005864:	693b      	ldr	r3, [r7, #16]
 8005866:	b29b      	uxth	r3, r3
 8005868:	f023 030f 	bic.w	r3, r3, #15
 800586c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800586e:	693b      	ldr	r3, [r7, #16]
 8005870:	085b      	lsrs	r3, r3, #1
 8005872:	b29b      	uxth	r3, r3
 8005874:	f003 0307 	and.w	r3, r3, #7
 8005878:	b29a      	uxth	r2, r3
 800587a:	89fb      	ldrh	r3, [r7, #14]
 800587c:	4313      	orrs	r3, r2
 800587e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	89fa      	ldrh	r2, [r7, #14]
 8005886:	60da      	str	r2, [r3, #12]
 8005888:	e04e      	b.n	8005928 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800588a:	2301      	movs	r3, #1
 800588c:	76bb      	strb	r3, [r7, #26]
 800588e:	e04b      	b.n	8005928 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005890:	7efb      	ldrb	r3, [r7, #27]
 8005892:	2b08      	cmp	r3, #8
 8005894:	d827      	bhi.n	80058e6 <UART_SetConfig+0x4b6>
 8005896:	a201      	add	r2, pc, #4	; (adr r2, 800589c <UART_SetConfig+0x46c>)
 8005898:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800589c:	080058c1 	.word	0x080058c1
 80058a0:	080058c9 	.word	0x080058c9
 80058a4:	080058d1 	.word	0x080058d1
 80058a8:	080058e7 	.word	0x080058e7
 80058ac:	080058d7 	.word	0x080058d7
 80058b0:	080058e7 	.word	0x080058e7
 80058b4:	080058e7 	.word	0x080058e7
 80058b8:	080058e7 	.word	0x080058e7
 80058bc:	080058df 	.word	0x080058df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80058c0:	f7fe fdae 	bl	8004420 <HAL_RCC_GetPCLK1Freq>
 80058c4:	6178      	str	r0, [r7, #20]
        break;
 80058c6:	e013      	b.n	80058f0 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80058c8:	f7fe fdc0 	bl	800444c <HAL_RCC_GetPCLK2Freq>
 80058cc:	6178      	str	r0, [r7, #20]
        break;
 80058ce:	e00f      	b.n	80058f0 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80058d0:	4b1b      	ldr	r3, [pc, #108]	; (8005940 <UART_SetConfig+0x510>)
 80058d2:	617b      	str	r3, [r7, #20]
        break;
 80058d4:	e00c      	b.n	80058f0 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80058d6:	f7fe fd0d 	bl	80042f4 <HAL_RCC_GetSysClockFreq>
 80058da:	6178      	str	r0, [r7, #20]
        break;
 80058dc:	e008      	b.n	80058f0 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80058de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80058e2:	617b      	str	r3, [r7, #20]
        break;
 80058e4:	e004      	b.n	80058f0 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 80058e6:	2300      	movs	r3, #0
 80058e8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80058ea:	2301      	movs	r3, #1
 80058ec:	76bb      	strb	r3, [r7, #26]
        break;
 80058ee:	bf00      	nop
    }

    if (pclk != 0U)
 80058f0:	697b      	ldr	r3, [r7, #20]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d018      	beq.n	8005928 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	685b      	ldr	r3, [r3, #4]
 80058fa:	085a      	lsrs	r2, r3, #1
 80058fc:	697b      	ldr	r3, [r7, #20]
 80058fe:	441a      	add	r2, r3
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	685b      	ldr	r3, [r3, #4]
 8005904:	fbb2 f3f3 	udiv	r3, r2, r3
 8005908:	b29b      	uxth	r3, r3
 800590a:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800590c:	693b      	ldr	r3, [r7, #16]
 800590e:	2b0f      	cmp	r3, #15
 8005910:	d908      	bls.n	8005924 <UART_SetConfig+0x4f4>
 8005912:	693b      	ldr	r3, [r7, #16]
 8005914:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005918:	d204      	bcs.n	8005924 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	693a      	ldr	r2, [r7, #16]
 8005920:	60da      	str	r2, [r3, #12]
 8005922:	e001      	b.n	8005928 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8005924:	2301      	movs	r3, #1
 8005926:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2200      	movs	r2, #0
 800592c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	2200      	movs	r2, #0
 8005932:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8005934:	7ebb      	ldrb	r3, [r7, #26]
}
 8005936:	4618      	mov	r0, r3
 8005938:	3720      	adds	r7, #32
 800593a:	46bd      	mov	sp, r7
 800593c:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8005940:	00f42400 	.word	0x00f42400

08005944 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005944:	b480      	push	{r7}
 8005946:	b083      	sub	sp, #12
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005950:	f003 0301 	and.w	r3, r3, #1
 8005954:	2b00      	cmp	r3, #0
 8005956:	d00a      	beq.n	800596e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	685b      	ldr	r3, [r3, #4]
 800595e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	430a      	orrs	r2, r1
 800596c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005972:	f003 0302 	and.w	r3, r3, #2
 8005976:	2b00      	cmp	r3, #0
 8005978:	d00a      	beq.n	8005990 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	685b      	ldr	r3, [r3, #4]
 8005980:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	430a      	orrs	r2, r1
 800598e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005994:	f003 0304 	and.w	r3, r3, #4
 8005998:	2b00      	cmp	r3, #0
 800599a:	d00a      	beq.n	80059b2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	685b      	ldr	r3, [r3, #4]
 80059a2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	430a      	orrs	r2, r1
 80059b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059b6:	f003 0308 	and.w	r3, r3, #8
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d00a      	beq.n	80059d4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	685b      	ldr	r3, [r3, #4]
 80059c4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	430a      	orrs	r2, r1
 80059d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059d8:	f003 0310 	and.w	r3, r3, #16
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d00a      	beq.n	80059f6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	689b      	ldr	r3, [r3, #8]
 80059e6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	430a      	orrs	r2, r1
 80059f4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059fa:	f003 0320 	and.w	r3, r3, #32
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d00a      	beq.n	8005a18 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	689b      	ldr	r3, [r3, #8]
 8005a08:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	430a      	orrs	r2, r1
 8005a16:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d01a      	beq.n	8005a5a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	685b      	ldr	r3, [r3, #4]
 8005a2a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	430a      	orrs	r2, r1
 8005a38:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a3e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005a42:	d10a      	bne.n	8005a5a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	685b      	ldr	r3, [r3, #4]
 8005a4a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	430a      	orrs	r2, r1
 8005a58:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d00a      	beq.n	8005a7c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	685b      	ldr	r3, [r3, #4]
 8005a6c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	430a      	orrs	r2, r1
 8005a7a:	605a      	str	r2, [r3, #4]
  }
}
 8005a7c:	bf00      	nop
 8005a7e:	370c      	adds	r7, #12
 8005a80:	46bd      	mov	sp, r7
 8005a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a86:	4770      	bx	lr

08005a88 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b086      	sub	sp, #24
 8005a8c:	af02      	add	r7, sp, #8
 8005a8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2200      	movs	r2, #0
 8005a94:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8005a96:	f7fb fae5 	bl	8001064 <HAL_GetTick>
 8005a9a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f003 0308 	and.w	r3, r3, #8
 8005aa6:	2b08      	cmp	r3, #8
 8005aa8:	d10e      	bne.n	8005ac8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005aaa:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005aae:	9300      	str	r3, [sp, #0]
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005ab8:	6878      	ldr	r0, [r7, #4]
 8005aba:	f000 f82a 	bl	8005b12 <UART_WaitOnFlagUntilTimeout>
 8005abe:	4603      	mov	r3, r0
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d001      	beq.n	8005ac8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005ac4:	2303      	movs	r3, #3
 8005ac6:	e020      	b.n	8005b0a <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f003 0304 	and.w	r3, r3, #4
 8005ad2:	2b04      	cmp	r3, #4
 8005ad4:	d10e      	bne.n	8005af4 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005ad6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005ada:	9300      	str	r3, [sp, #0]
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	2200      	movs	r2, #0
 8005ae0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005ae4:	6878      	ldr	r0, [r7, #4]
 8005ae6:	f000 f814 	bl	8005b12 <UART_WaitOnFlagUntilTimeout>
 8005aea:	4603      	mov	r3, r0
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d001      	beq.n	8005af4 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005af0:	2303      	movs	r3, #3
 8005af2:	e00a      	b.n	8005b0a <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2220      	movs	r2, #32
 8005af8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2220      	movs	r2, #32
 8005afe:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2200      	movs	r2, #0
 8005b04:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8005b08:	2300      	movs	r3, #0
}
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	3710      	adds	r7, #16
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	bd80      	pop	{r7, pc}

08005b12 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005b12:	b580      	push	{r7, lr}
 8005b14:	b084      	sub	sp, #16
 8005b16:	af00      	add	r7, sp, #0
 8005b18:	60f8      	str	r0, [r7, #12]
 8005b1a:	60b9      	str	r1, [r7, #8]
 8005b1c:	603b      	str	r3, [r7, #0]
 8005b1e:	4613      	mov	r3, r2
 8005b20:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b22:	e05d      	b.n	8005be0 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b24:	69bb      	ldr	r3, [r7, #24]
 8005b26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b2a:	d059      	beq.n	8005be0 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b2c:	f7fb fa9a 	bl	8001064 <HAL_GetTick>
 8005b30:	4602      	mov	r2, r0
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	1ad3      	subs	r3, r2, r3
 8005b36:	69ba      	ldr	r2, [r7, #24]
 8005b38:	429a      	cmp	r2, r3
 8005b3a:	d302      	bcc.n	8005b42 <UART_WaitOnFlagUntilTimeout+0x30>
 8005b3c:	69bb      	ldr	r3, [r7, #24]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d11b      	bne.n	8005b7a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	681a      	ldr	r2, [r3, #0]
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005b50:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	689a      	ldr	r2, [r3, #8]
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f022 0201 	bic.w	r2, r2, #1
 8005b60:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	2220      	movs	r2, #32
 8005b66:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	2220      	movs	r2, #32
 8005b6c:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	2200      	movs	r2, #0
 8005b72:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8005b76:	2303      	movs	r3, #3
 8005b78:	e042      	b.n	8005c00 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f003 0304 	and.w	r3, r3, #4
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d02b      	beq.n	8005be0 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	69db      	ldr	r3, [r3, #28]
 8005b8e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b92:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b96:	d123      	bne.n	8005be0 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005ba0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	681a      	ldr	r2, [r3, #0]
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005bb0:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	689a      	ldr	r2, [r3, #8]
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f022 0201 	bic.w	r2, r2, #1
 8005bc0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	2220      	movs	r2, #32
 8005bc6:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	2220      	movs	r2, #32
 8005bcc:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	2220      	movs	r2, #32
 8005bd2:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 8005bdc:	2303      	movs	r3, #3
 8005bde:	e00f      	b.n	8005c00 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	69da      	ldr	r2, [r3, #28]
 8005be6:	68bb      	ldr	r3, [r7, #8]
 8005be8:	4013      	ands	r3, r2
 8005bea:	68ba      	ldr	r2, [r7, #8]
 8005bec:	429a      	cmp	r2, r3
 8005bee:	bf0c      	ite	eq
 8005bf0:	2301      	moveq	r3, #1
 8005bf2:	2300      	movne	r3, #0
 8005bf4:	b2db      	uxtb	r3, r3
 8005bf6:	461a      	mov	r2, r3
 8005bf8:	79fb      	ldrb	r3, [r7, #7]
 8005bfa:	429a      	cmp	r2, r3
 8005bfc:	d092      	beq.n	8005b24 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005bfe:	2300      	movs	r3, #0
}
 8005c00:	4618      	mov	r0, r3
 8005c02:	3710      	adds	r7, #16
 8005c04:	46bd      	mov	sp, r7
 8005c06:	bd80      	pop	{r7, pc}

08005c08 <__errno>:
 8005c08:	4b01      	ldr	r3, [pc, #4]	; (8005c10 <__errno+0x8>)
 8005c0a:	6818      	ldr	r0, [r3, #0]
 8005c0c:	4770      	bx	lr
 8005c0e:	bf00      	nop
 8005c10:	2000001c 	.word	0x2000001c

08005c14 <__libc_init_array>:
 8005c14:	b570      	push	{r4, r5, r6, lr}
 8005c16:	4e0d      	ldr	r6, [pc, #52]	; (8005c4c <__libc_init_array+0x38>)
 8005c18:	4c0d      	ldr	r4, [pc, #52]	; (8005c50 <__libc_init_array+0x3c>)
 8005c1a:	1ba4      	subs	r4, r4, r6
 8005c1c:	10a4      	asrs	r4, r4, #2
 8005c1e:	2500      	movs	r5, #0
 8005c20:	42a5      	cmp	r5, r4
 8005c22:	d109      	bne.n	8005c38 <__libc_init_array+0x24>
 8005c24:	4e0b      	ldr	r6, [pc, #44]	; (8005c54 <__libc_init_array+0x40>)
 8005c26:	4c0c      	ldr	r4, [pc, #48]	; (8005c58 <__libc_init_array+0x44>)
 8005c28:	f000 ff04 	bl	8006a34 <_init>
 8005c2c:	1ba4      	subs	r4, r4, r6
 8005c2e:	10a4      	asrs	r4, r4, #2
 8005c30:	2500      	movs	r5, #0
 8005c32:	42a5      	cmp	r5, r4
 8005c34:	d105      	bne.n	8005c42 <__libc_init_array+0x2e>
 8005c36:	bd70      	pop	{r4, r5, r6, pc}
 8005c38:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005c3c:	4798      	blx	r3
 8005c3e:	3501      	adds	r5, #1
 8005c40:	e7ee      	b.n	8005c20 <__libc_init_array+0xc>
 8005c42:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005c46:	4798      	blx	r3
 8005c48:	3501      	adds	r5, #1
 8005c4a:	e7f2      	b.n	8005c32 <__libc_init_array+0x1e>
 8005c4c:	08006b4c 	.word	0x08006b4c
 8005c50:	08006b4c 	.word	0x08006b4c
 8005c54:	08006b4c 	.word	0x08006b4c
 8005c58:	08006b50 	.word	0x08006b50

08005c5c <memset>:
 8005c5c:	4402      	add	r2, r0
 8005c5e:	4603      	mov	r3, r0
 8005c60:	4293      	cmp	r3, r2
 8005c62:	d100      	bne.n	8005c66 <memset+0xa>
 8005c64:	4770      	bx	lr
 8005c66:	f803 1b01 	strb.w	r1, [r3], #1
 8005c6a:	e7f9      	b.n	8005c60 <memset+0x4>

08005c6c <iprintf>:
 8005c6c:	b40f      	push	{r0, r1, r2, r3}
 8005c6e:	4b0a      	ldr	r3, [pc, #40]	; (8005c98 <iprintf+0x2c>)
 8005c70:	b513      	push	{r0, r1, r4, lr}
 8005c72:	681c      	ldr	r4, [r3, #0]
 8005c74:	b124      	cbz	r4, 8005c80 <iprintf+0x14>
 8005c76:	69a3      	ldr	r3, [r4, #24]
 8005c78:	b913      	cbnz	r3, 8005c80 <iprintf+0x14>
 8005c7a:	4620      	mov	r0, r4
 8005c7c:	f000 f84e 	bl	8005d1c <__sinit>
 8005c80:	ab05      	add	r3, sp, #20
 8005c82:	9a04      	ldr	r2, [sp, #16]
 8005c84:	68a1      	ldr	r1, [r4, #8]
 8005c86:	9301      	str	r3, [sp, #4]
 8005c88:	4620      	mov	r0, r4
 8005c8a:	f000 f955 	bl	8005f38 <_vfiprintf_r>
 8005c8e:	b002      	add	sp, #8
 8005c90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c94:	b004      	add	sp, #16
 8005c96:	4770      	bx	lr
 8005c98:	2000001c 	.word	0x2000001c

08005c9c <std>:
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	b510      	push	{r4, lr}
 8005ca0:	4604      	mov	r4, r0
 8005ca2:	e9c0 3300 	strd	r3, r3, [r0]
 8005ca6:	6083      	str	r3, [r0, #8]
 8005ca8:	8181      	strh	r1, [r0, #12]
 8005caa:	6643      	str	r3, [r0, #100]	; 0x64
 8005cac:	81c2      	strh	r2, [r0, #14]
 8005cae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005cb2:	6183      	str	r3, [r0, #24]
 8005cb4:	4619      	mov	r1, r3
 8005cb6:	2208      	movs	r2, #8
 8005cb8:	305c      	adds	r0, #92	; 0x5c
 8005cba:	f7ff ffcf 	bl	8005c5c <memset>
 8005cbe:	4b05      	ldr	r3, [pc, #20]	; (8005cd4 <std+0x38>)
 8005cc0:	6263      	str	r3, [r4, #36]	; 0x24
 8005cc2:	4b05      	ldr	r3, [pc, #20]	; (8005cd8 <std+0x3c>)
 8005cc4:	62a3      	str	r3, [r4, #40]	; 0x28
 8005cc6:	4b05      	ldr	r3, [pc, #20]	; (8005cdc <std+0x40>)
 8005cc8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005cca:	4b05      	ldr	r3, [pc, #20]	; (8005ce0 <std+0x44>)
 8005ccc:	6224      	str	r4, [r4, #32]
 8005cce:	6323      	str	r3, [r4, #48]	; 0x30
 8005cd0:	bd10      	pop	{r4, pc}
 8005cd2:	bf00      	nop
 8005cd4:	08006495 	.word	0x08006495
 8005cd8:	080064b7 	.word	0x080064b7
 8005cdc:	080064ef 	.word	0x080064ef
 8005ce0:	08006513 	.word	0x08006513

08005ce4 <_cleanup_r>:
 8005ce4:	4901      	ldr	r1, [pc, #4]	; (8005cec <_cleanup_r+0x8>)
 8005ce6:	f000 b885 	b.w	8005df4 <_fwalk_reent>
 8005cea:	bf00      	nop
 8005cec:	080067ed 	.word	0x080067ed

08005cf0 <__sfmoreglue>:
 8005cf0:	b570      	push	{r4, r5, r6, lr}
 8005cf2:	1e4a      	subs	r2, r1, #1
 8005cf4:	2568      	movs	r5, #104	; 0x68
 8005cf6:	4355      	muls	r5, r2
 8005cf8:	460e      	mov	r6, r1
 8005cfa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005cfe:	f000 f897 	bl	8005e30 <_malloc_r>
 8005d02:	4604      	mov	r4, r0
 8005d04:	b140      	cbz	r0, 8005d18 <__sfmoreglue+0x28>
 8005d06:	2100      	movs	r1, #0
 8005d08:	e9c0 1600 	strd	r1, r6, [r0]
 8005d0c:	300c      	adds	r0, #12
 8005d0e:	60a0      	str	r0, [r4, #8]
 8005d10:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005d14:	f7ff ffa2 	bl	8005c5c <memset>
 8005d18:	4620      	mov	r0, r4
 8005d1a:	bd70      	pop	{r4, r5, r6, pc}

08005d1c <__sinit>:
 8005d1c:	6983      	ldr	r3, [r0, #24]
 8005d1e:	b510      	push	{r4, lr}
 8005d20:	4604      	mov	r4, r0
 8005d22:	bb33      	cbnz	r3, 8005d72 <__sinit+0x56>
 8005d24:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8005d28:	6503      	str	r3, [r0, #80]	; 0x50
 8005d2a:	4b12      	ldr	r3, [pc, #72]	; (8005d74 <__sinit+0x58>)
 8005d2c:	4a12      	ldr	r2, [pc, #72]	; (8005d78 <__sinit+0x5c>)
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	6282      	str	r2, [r0, #40]	; 0x28
 8005d32:	4298      	cmp	r0, r3
 8005d34:	bf04      	itt	eq
 8005d36:	2301      	moveq	r3, #1
 8005d38:	6183      	streq	r3, [r0, #24]
 8005d3a:	f000 f81f 	bl	8005d7c <__sfp>
 8005d3e:	6060      	str	r0, [r4, #4]
 8005d40:	4620      	mov	r0, r4
 8005d42:	f000 f81b 	bl	8005d7c <__sfp>
 8005d46:	60a0      	str	r0, [r4, #8]
 8005d48:	4620      	mov	r0, r4
 8005d4a:	f000 f817 	bl	8005d7c <__sfp>
 8005d4e:	2200      	movs	r2, #0
 8005d50:	60e0      	str	r0, [r4, #12]
 8005d52:	2104      	movs	r1, #4
 8005d54:	6860      	ldr	r0, [r4, #4]
 8005d56:	f7ff ffa1 	bl	8005c9c <std>
 8005d5a:	2201      	movs	r2, #1
 8005d5c:	2109      	movs	r1, #9
 8005d5e:	68a0      	ldr	r0, [r4, #8]
 8005d60:	f7ff ff9c 	bl	8005c9c <std>
 8005d64:	2202      	movs	r2, #2
 8005d66:	2112      	movs	r1, #18
 8005d68:	68e0      	ldr	r0, [r4, #12]
 8005d6a:	f7ff ff97 	bl	8005c9c <std>
 8005d6e:	2301      	movs	r3, #1
 8005d70:	61a3      	str	r3, [r4, #24]
 8005d72:	bd10      	pop	{r4, pc}
 8005d74:	08006aac 	.word	0x08006aac
 8005d78:	08005ce5 	.word	0x08005ce5

08005d7c <__sfp>:
 8005d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d7e:	4b1b      	ldr	r3, [pc, #108]	; (8005dec <__sfp+0x70>)
 8005d80:	681e      	ldr	r6, [r3, #0]
 8005d82:	69b3      	ldr	r3, [r6, #24]
 8005d84:	4607      	mov	r7, r0
 8005d86:	b913      	cbnz	r3, 8005d8e <__sfp+0x12>
 8005d88:	4630      	mov	r0, r6
 8005d8a:	f7ff ffc7 	bl	8005d1c <__sinit>
 8005d8e:	3648      	adds	r6, #72	; 0x48
 8005d90:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005d94:	3b01      	subs	r3, #1
 8005d96:	d503      	bpl.n	8005da0 <__sfp+0x24>
 8005d98:	6833      	ldr	r3, [r6, #0]
 8005d9a:	b133      	cbz	r3, 8005daa <__sfp+0x2e>
 8005d9c:	6836      	ldr	r6, [r6, #0]
 8005d9e:	e7f7      	b.n	8005d90 <__sfp+0x14>
 8005da0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005da4:	b16d      	cbz	r5, 8005dc2 <__sfp+0x46>
 8005da6:	3468      	adds	r4, #104	; 0x68
 8005da8:	e7f4      	b.n	8005d94 <__sfp+0x18>
 8005daa:	2104      	movs	r1, #4
 8005dac:	4638      	mov	r0, r7
 8005dae:	f7ff ff9f 	bl	8005cf0 <__sfmoreglue>
 8005db2:	6030      	str	r0, [r6, #0]
 8005db4:	2800      	cmp	r0, #0
 8005db6:	d1f1      	bne.n	8005d9c <__sfp+0x20>
 8005db8:	230c      	movs	r3, #12
 8005dba:	603b      	str	r3, [r7, #0]
 8005dbc:	4604      	mov	r4, r0
 8005dbe:	4620      	mov	r0, r4
 8005dc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005dc2:	4b0b      	ldr	r3, [pc, #44]	; (8005df0 <__sfp+0x74>)
 8005dc4:	6665      	str	r5, [r4, #100]	; 0x64
 8005dc6:	e9c4 5500 	strd	r5, r5, [r4]
 8005dca:	60a5      	str	r5, [r4, #8]
 8005dcc:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8005dd0:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8005dd4:	2208      	movs	r2, #8
 8005dd6:	4629      	mov	r1, r5
 8005dd8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005ddc:	f7ff ff3e 	bl	8005c5c <memset>
 8005de0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005de4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005de8:	e7e9      	b.n	8005dbe <__sfp+0x42>
 8005dea:	bf00      	nop
 8005dec:	08006aac 	.word	0x08006aac
 8005df0:	ffff0001 	.word	0xffff0001

08005df4 <_fwalk_reent>:
 8005df4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005df8:	4680      	mov	r8, r0
 8005dfa:	4689      	mov	r9, r1
 8005dfc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005e00:	2600      	movs	r6, #0
 8005e02:	b914      	cbnz	r4, 8005e0a <_fwalk_reent+0x16>
 8005e04:	4630      	mov	r0, r6
 8005e06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e0a:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8005e0e:	3f01      	subs	r7, #1
 8005e10:	d501      	bpl.n	8005e16 <_fwalk_reent+0x22>
 8005e12:	6824      	ldr	r4, [r4, #0]
 8005e14:	e7f5      	b.n	8005e02 <_fwalk_reent+0xe>
 8005e16:	89ab      	ldrh	r3, [r5, #12]
 8005e18:	2b01      	cmp	r3, #1
 8005e1a:	d907      	bls.n	8005e2c <_fwalk_reent+0x38>
 8005e1c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005e20:	3301      	adds	r3, #1
 8005e22:	d003      	beq.n	8005e2c <_fwalk_reent+0x38>
 8005e24:	4629      	mov	r1, r5
 8005e26:	4640      	mov	r0, r8
 8005e28:	47c8      	blx	r9
 8005e2a:	4306      	orrs	r6, r0
 8005e2c:	3568      	adds	r5, #104	; 0x68
 8005e2e:	e7ee      	b.n	8005e0e <_fwalk_reent+0x1a>

08005e30 <_malloc_r>:
 8005e30:	b570      	push	{r4, r5, r6, lr}
 8005e32:	1ccd      	adds	r5, r1, #3
 8005e34:	f025 0503 	bic.w	r5, r5, #3
 8005e38:	3508      	adds	r5, #8
 8005e3a:	2d0c      	cmp	r5, #12
 8005e3c:	bf38      	it	cc
 8005e3e:	250c      	movcc	r5, #12
 8005e40:	2d00      	cmp	r5, #0
 8005e42:	4606      	mov	r6, r0
 8005e44:	db01      	blt.n	8005e4a <_malloc_r+0x1a>
 8005e46:	42a9      	cmp	r1, r5
 8005e48:	d903      	bls.n	8005e52 <_malloc_r+0x22>
 8005e4a:	230c      	movs	r3, #12
 8005e4c:	6033      	str	r3, [r6, #0]
 8005e4e:	2000      	movs	r0, #0
 8005e50:	bd70      	pop	{r4, r5, r6, pc}
 8005e52:	f000 fd6b 	bl	800692c <__malloc_lock>
 8005e56:	4a21      	ldr	r2, [pc, #132]	; (8005edc <_malloc_r+0xac>)
 8005e58:	6814      	ldr	r4, [r2, #0]
 8005e5a:	4621      	mov	r1, r4
 8005e5c:	b991      	cbnz	r1, 8005e84 <_malloc_r+0x54>
 8005e5e:	4c20      	ldr	r4, [pc, #128]	; (8005ee0 <_malloc_r+0xb0>)
 8005e60:	6823      	ldr	r3, [r4, #0]
 8005e62:	b91b      	cbnz	r3, 8005e6c <_malloc_r+0x3c>
 8005e64:	4630      	mov	r0, r6
 8005e66:	f000 fb05 	bl	8006474 <_sbrk_r>
 8005e6a:	6020      	str	r0, [r4, #0]
 8005e6c:	4629      	mov	r1, r5
 8005e6e:	4630      	mov	r0, r6
 8005e70:	f000 fb00 	bl	8006474 <_sbrk_r>
 8005e74:	1c43      	adds	r3, r0, #1
 8005e76:	d124      	bne.n	8005ec2 <_malloc_r+0x92>
 8005e78:	230c      	movs	r3, #12
 8005e7a:	6033      	str	r3, [r6, #0]
 8005e7c:	4630      	mov	r0, r6
 8005e7e:	f000 fd56 	bl	800692e <__malloc_unlock>
 8005e82:	e7e4      	b.n	8005e4e <_malloc_r+0x1e>
 8005e84:	680b      	ldr	r3, [r1, #0]
 8005e86:	1b5b      	subs	r3, r3, r5
 8005e88:	d418      	bmi.n	8005ebc <_malloc_r+0x8c>
 8005e8a:	2b0b      	cmp	r3, #11
 8005e8c:	d90f      	bls.n	8005eae <_malloc_r+0x7e>
 8005e8e:	600b      	str	r3, [r1, #0]
 8005e90:	50cd      	str	r5, [r1, r3]
 8005e92:	18cc      	adds	r4, r1, r3
 8005e94:	4630      	mov	r0, r6
 8005e96:	f000 fd4a 	bl	800692e <__malloc_unlock>
 8005e9a:	f104 000b 	add.w	r0, r4, #11
 8005e9e:	1d23      	adds	r3, r4, #4
 8005ea0:	f020 0007 	bic.w	r0, r0, #7
 8005ea4:	1ac3      	subs	r3, r0, r3
 8005ea6:	d0d3      	beq.n	8005e50 <_malloc_r+0x20>
 8005ea8:	425a      	negs	r2, r3
 8005eaa:	50e2      	str	r2, [r4, r3]
 8005eac:	e7d0      	b.n	8005e50 <_malloc_r+0x20>
 8005eae:	428c      	cmp	r4, r1
 8005eb0:	684b      	ldr	r3, [r1, #4]
 8005eb2:	bf16      	itet	ne
 8005eb4:	6063      	strne	r3, [r4, #4]
 8005eb6:	6013      	streq	r3, [r2, #0]
 8005eb8:	460c      	movne	r4, r1
 8005eba:	e7eb      	b.n	8005e94 <_malloc_r+0x64>
 8005ebc:	460c      	mov	r4, r1
 8005ebe:	6849      	ldr	r1, [r1, #4]
 8005ec0:	e7cc      	b.n	8005e5c <_malloc_r+0x2c>
 8005ec2:	1cc4      	adds	r4, r0, #3
 8005ec4:	f024 0403 	bic.w	r4, r4, #3
 8005ec8:	42a0      	cmp	r0, r4
 8005eca:	d005      	beq.n	8005ed8 <_malloc_r+0xa8>
 8005ecc:	1a21      	subs	r1, r4, r0
 8005ece:	4630      	mov	r0, r6
 8005ed0:	f000 fad0 	bl	8006474 <_sbrk_r>
 8005ed4:	3001      	adds	r0, #1
 8005ed6:	d0cf      	beq.n	8005e78 <_malloc_r+0x48>
 8005ed8:	6025      	str	r5, [r4, #0]
 8005eda:	e7db      	b.n	8005e94 <_malloc_r+0x64>
 8005edc:	200000a4 	.word	0x200000a4
 8005ee0:	200000a8 	.word	0x200000a8

08005ee4 <__sfputc_r>:
 8005ee4:	6893      	ldr	r3, [r2, #8]
 8005ee6:	3b01      	subs	r3, #1
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	b410      	push	{r4}
 8005eec:	6093      	str	r3, [r2, #8]
 8005eee:	da08      	bge.n	8005f02 <__sfputc_r+0x1e>
 8005ef0:	6994      	ldr	r4, [r2, #24]
 8005ef2:	42a3      	cmp	r3, r4
 8005ef4:	db01      	blt.n	8005efa <__sfputc_r+0x16>
 8005ef6:	290a      	cmp	r1, #10
 8005ef8:	d103      	bne.n	8005f02 <__sfputc_r+0x1e>
 8005efa:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005efe:	f000 bb0d 	b.w	800651c <__swbuf_r>
 8005f02:	6813      	ldr	r3, [r2, #0]
 8005f04:	1c58      	adds	r0, r3, #1
 8005f06:	6010      	str	r0, [r2, #0]
 8005f08:	7019      	strb	r1, [r3, #0]
 8005f0a:	4608      	mov	r0, r1
 8005f0c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005f10:	4770      	bx	lr

08005f12 <__sfputs_r>:
 8005f12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f14:	4606      	mov	r6, r0
 8005f16:	460f      	mov	r7, r1
 8005f18:	4614      	mov	r4, r2
 8005f1a:	18d5      	adds	r5, r2, r3
 8005f1c:	42ac      	cmp	r4, r5
 8005f1e:	d101      	bne.n	8005f24 <__sfputs_r+0x12>
 8005f20:	2000      	movs	r0, #0
 8005f22:	e007      	b.n	8005f34 <__sfputs_r+0x22>
 8005f24:	463a      	mov	r2, r7
 8005f26:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f2a:	4630      	mov	r0, r6
 8005f2c:	f7ff ffda 	bl	8005ee4 <__sfputc_r>
 8005f30:	1c43      	adds	r3, r0, #1
 8005f32:	d1f3      	bne.n	8005f1c <__sfputs_r+0xa>
 8005f34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005f38 <_vfiprintf_r>:
 8005f38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f3c:	460c      	mov	r4, r1
 8005f3e:	b09d      	sub	sp, #116	; 0x74
 8005f40:	4617      	mov	r7, r2
 8005f42:	461d      	mov	r5, r3
 8005f44:	4606      	mov	r6, r0
 8005f46:	b118      	cbz	r0, 8005f50 <_vfiprintf_r+0x18>
 8005f48:	6983      	ldr	r3, [r0, #24]
 8005f4a:	b90b      	cbnz	r3, 8005f50 <_vfiprintf_r+0x18>
 8005f4c:	f7ff fee6 	bl	8005d1c <__sinit>
 8005f50:	4b7c      	ldr	r3, [pc, #496]	; (8006144 <_vfiprintf_r+0x20c>)
 8005f52:	429c      	cmp	r4, r3
 8005f54:	d158      	bne.n	8006008 <_vfiprintf_r+0xd0>
 8005f56:	6874      	ldr	r4, [r6, #4]
 8005f58:	89a3      	ldrh	r3, [r4, #12]
 8005f5a:	0718      	lsls	r0, r3, #28
 8005f5c:	d55e      	bpl.n	800601c <_vfiprintf_r+0xe4>
 8005f5e:	6923      	ldr	r3, [r4, #16]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d05b      	beq.n	800601c <_vfiprintf_r+0xe4>
 8005f64:	2300      	movs	r3, #0
 8005f66:	9309      	str	r3, [sp, #36]	; 0x24
 8005f68:	2320      	movs	r3, #32
 8005f6a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005f6e:	2330      	movs	r3, #48	; 0x30
 8005f70:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005f74:	9503      	str	r5, [sp, #12]
 8005f76:	f04f 0b01 	mov.w	fp, #1
 8005f7a:	46b8      	mov	r8, r7
 8005f7c:	4645      	mov	r5, r8
 8005f7e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005f82:	b10b      	cbz	r3, 8005f88 <_vfiprintf_r+0x50>
 8005f84:	2b25      	cmp	r3, #37	; 0x25
 8005f86:	d154      	bne.n	8006032 <_vfiprintf_r+0xfa>
 8005f88:	ebb8 0a07 	subs.w	sl, r8, r7
 8005f8c:	d00b      	beq.n	8005fa6 <_vfiprintf_r+0x6e>
 8005f8e:	4653      	mov	r3, sl
 8005f90:	463a      	mov	r2, r7
 8005f92:	4621      	mov	r1, r4
 8005f94:	4630      	mov	r0, r6
 8005f96:	f7ff ffbc 	bl	8005f12 <__sfputs_r>
 8005f9a:	3001      	adds	r0, #1
 8005f9c:	f000 80c2 	beq.w	8006124 <_vfiprintf_r+0x1ec>
 8005fa0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005fa2:	4453      	add	r3, sl
 8005fa4:	9309      	str	r3, [sp, #36]	; 0x24
 8005fa6:	f898 3000 	ldrb.w	r3, [r8]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	f000 80ba 	beq.w	8006124 <_vfiprintf_r+0x1ec>
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	f04f 32ff 	mov.w	r2, #4294967295
 8005fb6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005fba:	9304      	str	r3, [sp, #16]
 8005fbc:	9307      	str	r3, [sp, #28]
 8005fbe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005fc2:	931a      	str	r3, [sp, #104]	; 0x68
 8005fc4:	46a8      	mov	r8, r5
 8005fc6:	2205      	movs	r2, #5
 8005fc8:	f818 1b01 	ldrb.w	r1, [r8], #1
 8005fcc:	485e      	ldr	r0, [pc, #376]	; (8006148 <_vfiprintf_r+0x210>)
 8005fce:	f7fa f8ff 	bl	80001d0 <memchr>
 8005fd2:	9b04      	ldr	r3, [sp, #16]
 8005fd4:	bb78      	cbnz	r0, 8006036 <_vfiprintf_r+0xfe>
 8005fd6:	06d9      	lsls	r1, r3, #27
 8005fd8:	bf44      	itt	mi
 8005fda:	2220      	movmi	r2, #32
 8005fdc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005fe0:	071a      	lsls	r2, r3, #28
 8005fe2:	bf44      	itt	mi
 8005fe4:	222b      	movmi	r2, #43	; 0x2b
 8005fe6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005fea:	782a      	ldrb	r2, [r5, #0]
 8005fec:	2a2a      	cmp	r2, #42	; 0x2a
 8005fee:	d02a      	beq.n	8006046 <_vfiprintf_r+0x10e>
 8005ff0:	9a07      	ldr	r2, [sp, #28]
 8005ff2:	46a8      	mov	r8, r5
 8005ff4:	2000      	movs	r0, #0
 8005ff6:	250a      	movs	r5, #10
 8005ff8:	4641      	mov	r1, r8
 8005ffa:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005ffe:	3b30      	subs	r3, #48	; 0x30
 8006000:	2b09      	cmp	r3, #9
 8006002:	d969      	bls.n	80060d8 <_vfiprintf_r+0x1a0>
 8006004:	b360      	cbz	r0, 8006060 <_vfiprintf_r+0x128>
 8006006:	e024      	b.n	8006052 <_vfiprintf_r+0x11a>
 8006008:	4b50      	ldr	r3, [pc, #320]	; (800614c <_vfiprintf_r+0x214>)
 800600a:	429c      	cmp	r4, r3
 800600c:	d101      	bne.n	8006012 <_vfiprintf_r+0xda>
 800600e:	68b4      	ldr	r4, [r6, #8]
 8006010:	e7a2      	b.n	8005f58 <_vfiprintf_r+0x20>
 8006012:	4b4f      	ldr	r3, [pc, #316]	; (8006150 <_vfiprintf_r+0x218>)
 8006014:	429c      	cmp	r4, r3
 8006016:	bf08      	it	eq
 8006018:	68f4      	ldreq	r4, [r6, #12]
 800601a:	e79d      	b.n	8005f58 <_vfiprintf_r+0x20>
 800601c:	4621      	mov	r1, r4
 800601e:	4630      	mov	r0, r6
 8006020:	f000 fae0 	bl	80065e4 <__swsetup_r>
 8006024:	2800      	cmp	r0, #0
 8006026:	d09d      	beq.n	8005f64 <_vfiprintf_r+0x2c>
 8006028:	f04f 30ff 	mov.w	r0, #4294967295
 800602c:	b01d      	add	sp, #116	; 0x74
 800602e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006032:	46a8      	mov	r8, r5
 8006034:	e7a2      	b.n	8005f7c <_vfiprintf_r+0x44>
 8006036:	4a44      	ldr	r2, [pc, #272]	; (8006148 <_vfiprintf_r+0x210>)
 8006038:	1a80      	subs	r0, r0, r2
 800603a:	fa0b f000 	lsl.w	r0, fp, r0
 800603e:	4318      	orrs	r0, r3
 8006040:	9004      	str	r0, [sp, #16]
 8006042:	4645      	mov	r5, r8
 8006044:	e7be      	b.n	8005fc4 <_vfiprintf_r+0x8c>
 8006046:	9a03      	ldr	r2, [sp, #12]
 8006048:	1d11      	adds	r1, r2, #4
 800604a:	6812      	ldr	r2, [r2, #0]
 800604c:	9103      	str	r1, [sp, #12]
 800604e:	2a00      	cmp	r2, #0
 8006050:	db01      	blt.n	8006056 <_vfiprintf_r+0x11e>
 8006052:	9207      	str	r2, [sp, #28]
 8006054:	e004      	b.n	8006060 <_vfiprintf_r+0x128>
 8006056:	4252      	negs	r2, r2
 8006058:	f043 0302 	orr.w	r3, r3, #2
 800605c:	9207      	str	r2, [sp, #28]
 800605e:	9304      	str	r3, [sp, #16]
 8006060:	f898 3000 	ldrb.w	r3, [r8]
 8006064:	2b2e      	cmp	r3, #46	; 0x2e
 8006066:	d10e      	bne.n	8006086 <_vfiprintf_r+0x14e>
 8006068:	f898 3001 	ldrb.w	r3, [r8, #1]
 800606c:	2b2a      	cmp	r3, #42	; 0x2a
 800606e:	d138      	bne.n	80060e2 <_vfiprintf_r+0x1aa>
 8006070:	9b03      	ldr	r3, [sp, #12]
 8006072:	1d1a      	adds	r2, r3, #4
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	9203      	str	r2, [sp, #12]
 8006078:	2b00      	cmp	r3, #0
 800607a:	bfb8      	it	lt
 800607c:	f04f 33ff 	movlt.w	r3, #4294967295
 8006080:	f108 0802 	add.w	r8, r8, #2
 8006084:	9305      	str	r3, [sp, #20]
 8006086:	4d33      	ldr	r5, [pc, #204]	; (8006154 <_vfiprintf_r+0x21c>)
 8006088:	f898 1000 	ldrb.w	r1, [r8]
 800608c:	2203      	movs	r2, #3
 800608e:	4628      	mov	r0, r5
 8006090:	f7fa f89e 	bl	80001d0 <memchr>
 8006094:	b140      	cbz	r0, 80060a8 <_vfiprintf_r+0x170>
 8006096:	2340      	movs	r3, #64	; 0x40
 8006098:	1b40      	subs	r0, r0, r5
 800609a:	fa03 f000 	lsl.w	r0, r3, r0
 800609e:	9b04      	ldr	r3, [sp, #16]
 80060a0:	4303      	orrs	r3, r0
 80060a2:	f108 0801 	add.w	r8, r8, #1
 80060a6:	9304      	str	r3, [sp, #16]
 80060a8:	f898 1000 	ldrb.w	r1, [r8]
 80060ac:	482a      	ldr	r0, [pc, #168]	; (8006158 <_vfiprintf_r+0x220>)
 80060ae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80060b2:	2206      	movs	r2, #6
 80060b4:	f108 0701 	add.w	r7, r8, #1
 80060b8:	f7fa f88a 	bl	80001d0 <memchr>
 80060bc:	2800      	cmp	r0, #0
 80060be:	d037      	beq.n	8006130 <_vfiprintf_r+0x1f8>
 80060c0:	4b26      	ldr	r3, [pc, #152]	; (800615c <_vfiprintf_r+0x224>)
 80060c2:	bb1b      	cbnz	r3, 800610c <_vfiprintf_r+0x1d4>
 80060c4:	9b03      	ldr	r3, [sp, #12]
 80060c6:	3307      	adds	r3, #7
 80060c8:	f023 0307 	bic.w	r3, r3, #7
 80060cc:	3308      	adds	r3, #8
 80060ce:	9303      	str	r3, [sp, #12]
 80060d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060d2:	444b      	add	r3, r9
 80060d4:	9309      	str	r3, [sp, #36]	; 0x24
 80060d6:	e750      	b.n	8005f7a <_vfiprintf_r+0x42>
 80060d8:	fb05 3202 	mla	r2, r5, r2, r3
 80060dc:	2001      	movs	r0, #1
 80060de:	4688      	mov	r8, r1
 80060e0:	e78a      	b.n	8005ff8 <_vfiprintf_r+0xc0>
 80060e2:	2300      	movs	r3, #0
 80060e4:	f108 0801 	add.w	r8, r8, #1
 80060e8:	9305      	str	r3, [sp, #20]
 80060ea:	4619      	mov	r1, r3
 80060ec:	250a      	movs	r5, #10
 80060ee:	4640      	mov	r0, r8
 80060f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80060f4:	3a30      	subs	r2, #48	; 0x30
 80060f6:	2a09      	cmp	r2, #9
 80060f8:	d903      	bls.n	8006102 <_vfiprintf_r+0x1ca>
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d0c3      	beq.n	8006086 <_vfiprintf_r+0x14e>
 80060fe:	9105      	str	r1, [sp, #20]
 8006100:	e7c1      	b.n	8006086 <_vfiprintf_r+0x14e>
 8006102:	fb05 2101 	mla	r1, r5, r1, r2
 8006106:	2301      	movs	r3, #1
 8006108:	4680      	mov	r8, r0
 800610a:	e7f0      	b.n	80060ee <_vfiprintf_r+0x1b6>
 800610c:	ab03      	add	r3, sp, #12
 800610e:	9300      	str	r3, [sp, #0]
 8006110:	4622      	mov	r2, r4
 8006112:	4b13      	ldr	r3, [pc, #76]	; (8006160 <_vfiprintf_r+0x228>)
 8006114:	a904      	add	r1, sp, #16
 8006116:	4630      	mov	r0, r6
 8006118:	f3af 8000 	nop.w
 800611c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006120:	4681      	mov	r9, r0
 8006122:	d1d5      	bne.n	80060d0 <_vfiprintf_r+0x198>
 8006124:	89a3      	ldrh	r3, [r4, #12]
 8006126:	065b      	lsls	r3, r3, #25
 8006128:	f53f af7e 	bmi.w	8006028 <_vfiprintf_r+0xf0>
 800612c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800612e:	e77d      	b.n	800602c <_vfiprintf_r+0xf4>
 8006130:	ab03      	add	r3, sp, #12
 8006132:	9300      	str	r3, [sp, #0]
 8006134:	4622      	mov	r2, r4
 8006136:	4b0a      	ldr	r3, [pc, #40]	; (8006160 <_vfiprintf_r+0x228>)
 8006138:	a904      	add	r1, sp, #16
 800613a:	4630      	mov	r0, r6
 800613c:	f000 f888 	bl	8006250 <_printf_i>
 8006140:	e7ec      	b.n	800611c <_vfiprintf_r+0x1e4>
 8006142:	bf00      	nop
 8006144:	08006ad0 	.word	0x08006ad0
 8006148:	08006b10 	.word	0x08006b10
 800614c:	08006af0 	.word	0x08006af0
 8006150:	08006ab0 	.word	0x08006ab0
 8006154:	08006b16 	.word	0x08006b16
 8006158:	08006b1a 	.word	0x08006b1a
 800615c:	00000000 	.word	0x00000000
 8006160:	08005f13 	.word	0x08005f13

08006164 <_printf_common>:
 8006164:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006168:	4691      	mov	r9, r2
 800616a:	461f      	mov	r7, r3
 800616c:	688a      	ldr	r2, [r1, #8]
 800616e:	690b      	ldr	r3, [r1, #16]
 8006170:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006174:	4293      	cmp	r3, r2
 8006176:	bfb8      	it	lt
 8006178:	4613      	movlt	r3, r2
 800617a:	f8c9 3000 	str.w	r3, [r9]
 800617e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006182:	4606      	mov	r6, r0
 8006184:	460c      	mov	r4, r1
 8006186:	b112      	cbz	r2, 800618e <_printf_common+0x2a>
 8006188:	3301      	adds	r3, #1
 800618a:	f8c9 3000 	str.w	r3, [r9]
 800618e:	6823      	ldr	r3, [r4, #0]
 8006190:	0699      	lsls	r1, r3, #26
 8006192:	bf42      	ittt	mi
 8006194:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006198:	3302      	addmi	r3, #2
 800619a:	f8c9 3000 	strmi.w	r3, [r9]
 800619e:	6825      	ldr	r5, [r4, #0]
 80061a0:	f015 0506 	ands.w	r5, r5, #6
 80061a4:	d107      	bne.n	80061b6 <_printf_common+0x52>
 80061a6:	f104 0a19 	add.w	sl, r4, #25
 80061aa:	68e3      	ldr	r3, [r4, #12]
 80061ac:	f8d9 2000 	ldr.w	r2, [r9]
 80061b0:	1a9b      	subs	r3, r3, r2
 80061b2:	42ab      	cmp	r3, r5
 80061b4:	dc28      	bgt.n	8006208 <_printf_common+0xa4>
 80061b6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80061ba:	6822      	ldr	r2, [r4, #0]
 80061bc:	3300      	adds	r3, #0
 80061be:	bf18      	it	ne
 80061c0:	2301      	movne	r3, #1
 80061c2:	0692      	lsls	r2, r2, #26
 80061c4:	d42d      	bmi.n	8006222 <_printf_common+0xbe>
 80061c6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80061ca:	4639      	mov	r1, r7
 80061cc:	4630      	mov	r0, r6
 80061ce:	47c0      	blx	r8
 80061d0:	3001      	adds	r0, #1
 80061d2:	d020      	beq.n	8006216 <_printf_common+0xb2>
 80061d4:	6823      	ldr	r3, [r4, #0]
 80061d6:	68e5      	ldr	r5, [r4, #12]
 80061d8:	f8d9 2000 	ldr.w	r2, [r9]
 80061dc:	f003 0306 	and.w	r3, r3, #6
 80061e0:	2b04      	cmp	r3, #4
 80061e2:	bf08      	it	eq
 80061e4:	1aad      	subeq	r5, r5, r2
 80061e6:	68a3      	ldr	r3, [r4, #8]
 80061e8:	6922      	ldr	r2, [r4, #16]
 80061ea:	bf0c      	ite	eq
 80061ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80061f0:	2500      	movne	r5, #0
 80061f2:	4293      	cmp	r3, r2
 80061f4:	bfc4      	itt	gt
 80061f6:	1a9b      	subgt	r3, r3, r2
 80061f8:	18ed      	addgt	r5, r5, r3
 80061fa:	f04f 0900 	mov.w	r9, #0
 80061fe:	341a      	adds	r4, #26
 8006200:	454d      	cmp	r5, r9
 8006202:	d11a      	bne.n	800623a <_printf_common+0xd6>
 8006204:	2000      	movs	r0, #0
 8006206:	e008      	b.n	800621a <_printf_common+0xb6>
 8006208:	2301      	movs	r3, #1
 800620a:	4652      	mov	r2, sl
 800620c:	4639      	mov	r1, r7
 800620e:	4630      	mov	r0, r6
 8006210:	47c0      	blx	r8
 8006212:	3001      	adds	r0, #1
 8006214:	d103      	bne.n	800621e <_printf_common+0xba>
 8006216:	f04f 30ff 	mov.w	r0, #4294967295
 800621a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800621e:	3501      	adds	r5, #1
 8006220:	e7c3      	b.n	80061aa <_printf_common+0x46>
 8006222:	18e1      	adds	r1, r4, r3
 8006224:	1c5a      	adds	r2, r3, #1
 8006226:	2030      	movs	r0, #48	; 0x30
 8006228:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800622c:	4422      	add	r2, r4
 800622e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006232:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006236:	3302      	adds	r3, #2
 8006238:	e7c5      	b.n	80061c6 <_printf_common+0x62>
 800623a:	2301      	movs	r3, #1
 800623c:	4622      	mov	r2, r4
 800623e:	4639      	mov	r1, r7
 8006240:	4630      	mov	r0, r6
 8006242:	47c0      	blx	r8
 8006244:	3001      	adds	r0, #1
 8006246:	d0e6      	beq.n	8006216 <_printf_common+0xb2>
 8006248:	f109 0901 	add.w	r9, r9, #1
 800624c:	e7d8      	b.n	8006200 <_printf_common+0x9c>
	...

08006250 <_printf_i>:
 8006250:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006254:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8006258:	460c      	mov	r4, r1
 800625a:	7e09      	ldrb	r1, [r1, #24]
 800625c:	b085      	sub	sp, #20
 800625e:	296e      	cmp	r1, #110	; 0x6e
 8006260:	4617      	mov	r7, r2
 8006262:	4606      	mov	r6, r0
 8006264:	4698      	mov	r8, r3
 8006266:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006268:	f000 80b3 	beq.w	80063d2 <_printf_i+0x182>
 800626c:	d822      	bhi.n	80062b4 <_printf_i+0x64>
 800626e:	2963      	cmp	r1, #99	; 0x63
 8006270:	d036      	beq.n	80062e0 <_printf_i+0x90>
 8006272:	d80a      	bhi.n	800628a <_printf_i+0x3a>
 8006274:	2900      	cmp	r1, #0
 8006276:	f000 80b9 	beq.w	80063ec <_printf_i+0x19c>
 800627a:	2958      	cmp	r1, #88	; 0x58
 800627c:	f000 8083 	beq.w	8006386 <_printf_i+0x136>
 8006280:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006284:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8006288:	e032      	b.n	80062f0 <_printf_i+0xa0>
 800628a:	2964      	cmp	r1, #100	; 0x64
 800628c:	d001      	beq.n	8006292 <_printf_i+0x42>
 800628e:	2969      	cmp	r1, #105	; 0x69
 8006290:	d1f6      	bne.n	8006280 <_printf_i+0x30>
 8006292:	6820      	ldr	r0, [r4, #0]
 8006294:	6813      	ldr	r3, [r2, #0]
 8006296:	0605      	lsls	r5, r0, #24
 8006298:	f103 0104 	add.w	r1, r3, #4
 800629c:	d52a      	bpl.n	80062f4 <_printf_i+0xa4>
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	6011      	str	r1, [r2, #0]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	da03      	bge.n	80062ae <_printf_i+0x5e>
 80062a6:	222d      	movs	r2, #45	; 0x2d
 80062a8:	425b      	negs	r3, r3
 80062aa:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80062ae:	486f      	ldr	r0, [pc, #444]	; (800646c <_printf_i+0x21c>)
 80062b0:	220a      	movs	r2, #10
 80062b2:	e039      	b.n	8006328 <_printf_i+0xd8>
 80062b4:	2973      	cmp	r1, #115	; 0x73
 80062b6:	f000 809d 	beq.w	80063f4 <_printf_i+0x1a4>
 80062ba:	d808      	bhi.n	80062ce <_printf_i+0x7e>
 80062bc:	296f      	cmp	r1, #111	; 0x6f
 80062be:	d020      	beq.n	8006302 <_printf_i+0xb2>
 80062c0:	2970      	cmp	r1, #112	; 0x70
 80062c2:	d1dd      	bne.n	8006280 <_printf_i+0x30>
 80062c4:	6823      	ldr	r3, [r4, #0]
 80062c6:	f043 0320 	orr.w	r3, r3, #32
 80062ca:	6023      	str	r3, [r4, #0]
 80062cc:	e003      	b.n	80062d6 <_printf_i+0x86>
 80062ce:	2975      	cmp	r1, #117	; 0x75
 80062d0:	d017      	beq.n	8006302 <_printf_i+0xb2>
 80062d2:	2978      	cmp	r1, #120	; 0x78
 80062d4:	d1d4      	bne.n	8006280 <_printf_i+0x30>
 80062d6:	2378      	movs	r3, #120	; 0x78
 80062d8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80062dc:	4864      	ldr	r0, [pc, #400]	; (8006470 <_printf_i+0x220>)
 80062de:	e055      	b.n	800638c <_printf_i+0x13c>
 80062e0:	6813      	ldr	r3, [r2, #0]
 80062e2:	1d19      	adds	r1, r3, #4
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	6011      	str	r1, [r2, #0]
 80062e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80062ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80062f0:	2301      	movs	r3, #1
 80062f2:	e08c      	b.n	800640e <_printf_i+0x1be>
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	6011      	str	r1, [r2, #0]
 80062f8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80062fc:	bf18      	it	ne
 80062fe:	b21b      	sxthne	r3, r3
 8006300:	e7cf      	b.n	80062a2 <_printf_i+0x52>
 8006302:	6813      	ldr	r3, [r2, #0]
 8006304:	6825      	ldr	r5, [r4, #0]
 8006306:	1d18      	adds	r0, r3, #4
 8006308:	6010      	str	r0, [r2, #0]
 800630a:	0628      	lsls	r0, r5, #24
 800630c:	d501      	bpl.n	8006312 <_printf_i+0xc2>
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	e002      	b.n	8006318 <_printf_i+0xc8>
 8006312:	0668      	lsls	r0, r5, #25
 8006314:	d5fb      	bpl.n	800630e <_printf_i+0xbe>
 8006316:	881b      	ldrh	r3, [r3, #0]
 8006318:	4854      	ldr	r0, [pc, #336]	; (800646c <_printf_i+0x21c>)
 800631a:	296f      	cmp	r1, #111	; 0x6f
 800631c:	bf14      	ite	ne
 800631e:	220a      	movne	r2, #10
 8006320:	2208      	moveq	r2, #8
 8006322:	2100      	movs	r1, #0
 8006324:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006328:	6865      	ldr	r5, [r4, #4]
 800632a:	60a5      	str	r5, [r4, #8]
 800632c:	2d00      	cmp	r5, #0
 800632e:	f2c0 8095 	blt.w	800645c <_printf_i+0x20c>
 8006332:	6821      	ldr	r1, [r4, #0]
 8006334:	f021 0104 	bic.w	r1, r1, #4
 8006338:	6021      	str	r1, [r4, #0]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d13d      	bne.n	80063ba <_printf_i+0x16a>
 800633e:	2d00      	cmp	r5, #0
 8006340:	f040 808e 	bne.w	8006460 <_printf_i+0x210>
 8006344:	4665      	mov	r5, ip
 8006346:	2a08      	cmp	r2, #8
 8006348:	d10b      	bne.n	8006362 <_printf_i+0x112>
 800634a:	6823      	ldr	r3, [r4, #0]
 800634c:	07db      	lsls	r3, r3, #31
 800634e:	d508      	bpl.n	8006362 <_printf_i+0x112>
 8006350:	6923      	ldr	r3, [r4, #16]
 8006352:	6862      	ldr	r2, [r4, #4]
 8006354:	429a      	cmp	r2, r3
 8006356:	bfde      	ittt	le
 8006358:	2330      	movle	r3, #48	; 0x30
 800635a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800635e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006362:	ebac 0305 	sub.w	r3, ip, r5
 8006366:	6123      	str	r3, [r4, #16]
 8006368:	f8cd 8000 	str.w	r8, [sp]
 800636c:	463b      	mov	r3, r7
 800636e:	aa03      	add	r2, sp, #12
 8006370:	4621      	mov	r1, r4
 8006372:	4630      	mov	r0, r6
 8006374:	f7ff fef6 	bl	8006164 <_printf_common>
 8006378:	3001      	adds	r0, #1
 800637a:	d14d      	bne.n	8006418 <_printf_i+0x1c8>
 800637c:	f04f 30ff 	mov.w	r0, #4294967295
 8006380:	b005      	add	sp, #20
 8006382:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006386:	4839      	ldr	r0, [pc, #228]	; (800646c <_printf_i+0x21c>)
 8006388:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800638c:	6813      	ldr	r3, [r2, #0]
 800638e:	6821      	ldr	r1, [r4, #0]
 8006390:	1d1d      	adds	r5, r3, #4
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	6015      	str	r5, [r2, #0]
 8006396:	060a      	lsls	r2, r1, #24
 8006398:	d50b      	bpl.n	80063b2 <_printf_i+0x162>
 800639a:	07ca      	lsls	r2, r1, #31
 800639c:	bf44      	itt	mi
 800639e:	f041 0120 	orrmi.w	r1, r1, #32
 80063a2:	6021      	strmi	r1, [r4, #0]
 80063a4:	b91b      	cbnz	r3, 80063ae <_printf_i+0x15e>
 80063a6:	6822      	ldr	r2, [r4, #0]
 80063a8:	f022 0220 	bic.w	r2, r2, #32
 80063ac:	6022      	str	r2, [r4, #0]
 80063ae:	2210      	movs	r2, #16
 80063b0:	e7b7      	b.n	8006322 <_printf_i+0xd2>
 80063b2:	064d      	lsls	r5, r1, #25
 80063b4:	bf48      	it	mi
 80063b6:	b29b      	uxthmi	r3, r3
 80063b8:	e7ef      	b.n	800639a <_printf_i+0x14a>
 80063ba:	4665      	mov	r5, ip
 80063bc:	fbb3 f1f2 	udiv	r1, r3, r2
 80063c0:	fb02 3311 	mls	r3, r2, r1, r3
 80063c4:	5cc3      	ldrb	r3, [r0, r3]
 80063c6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80063ca:	460b      	mov	r3, r1
 80063cc:	2900      	cmp	r1, #0
 80063ce:	d1f5      	bne.n	80063bc <_printf_i+0x16c>
 80063d0:	e7b9      	b.n	8006346 <_printf_i+0xf6>
 80063d2:	6813      	ldr	r3, [r2, #0]
 80063d4:	6825      	ldr	r5, [r4, #0]
 80063d6:	6961      	ldr	r1, [r4, #20]
 80063d8:	1d18      	adds	r0, r3, #4
 80063da:	6010      	str	r0, [r2, #0]
 80063dc:	0628      	lsls	r0, r5, #24
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	d501      	bpl.n	80063e6 <_printf_i+0x196>
 80063e2:	6019      	str	r1, [r3, #0]
 80063e4:	e002      	b.n	80063ec <_printf_i+0x19c>
 80063e6:	066a      	lsls	r2, r5, #25
 80063e8:	d5fb      	bpl.n	80063e2 <_printf_i+0x192>
 80063ea:	8019      	strh	r1, [r3, #0]
 80063ec:	2300      	movs	r3, #0
 80063ee:	6123      	str	r3, [r4, #16]
 80063f0:	4665      	mov	r5, ip
 80063f2:	e7b9      	b.n	8006368 <_printf_i+0x118>
 80063f4:	6813      	ldr	r3, [r2, #0]
 80063f6:	1d19      	adds	r1, r3, #4
 80063f8:	6011      	str	r1, [r2, #0]
 80063fa:	681d      	ldr	r5, [r3, #0]
 80063fc:	6862      	ldr	r2, [r4, #4]
 80063fe:	2100      	movs	r1, #0
 8006400:	4628      	mov	r0, r5
 8006402:	f7f9 fee5 	bl	80001d0 <memchr>
 8006406:	b108      	cbz	r0, 800640c <_printf_i+0x1bc>
 8006408:	1b40      	subs	r0, r0, r5
 800640a:	6060      	str	r0, [r4, #4]
 800640c:	6863      	ldr	r3, [r4, #4]
 800640e:	6123      	str	r3, [r4, #16]
 8006410:	2300      	movs	r3, #0
 8006412:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006416:	e7a7      	b.n	8006368 <_printf_i+0x118>
 8006418:	6923      	ldr	r3, [r4, #16]
 800641a:	462a      	mov	r2, r5
 800641c:	4639      	mov	r1, r7
 800641e:	4630      	mov	r0, r6
 8006420:	47c0      	blx	r8
 8006422:	3001      	adds	r0, #1
 8006424:	d0aa      	beq.n	800637c <_printf_i+0x12c>
 8006426:	6823      	ldr	r3, [r4, #0]
 8006428:	079b      	lsls	r3, r3, #30
 800642a:	d413      	bmi.n	8006454 <_printf_i+0x204>
 800642c:	68e0      	ldr	r0, [r4, #12]
 800642e:	9b03      	ldr	r3, [sp, #12]
 8006430:	4298      	cmp	r0, r3
 8006432:	bfb8      	it	lt
 8006434:	4618      	movlt	r0, r3
 8006436:	e7a3      	b.n	8006380 <_printf_i+0x130>
 8006438:	2301      	movs	r3, #1
 800643a:	464a      	mov	r2, r9
 800643c:	4639      	mov	r1, r7
 800643e:	4630      	mov	r0, r6
 8006440:	47c0      	blx	r8
 8006442:	3001      	adds	r0, #1
 8006444:	d09a      	beq.n	800637c <_printf_i+0x12c>
 8006446:	3501      	adds	r5, #1
 8006448:	68e3      	ldr	r3, [r4, #12]
 800644a:	9a03      	ldr	r2, [sp, #12]
 800644c:	1a9b      	subs	r3, r3, r2
 800644e:	42ab      	cmp	r3, r5
 8006450:	dcf2      	bgt.n	8006438 <_printf_i+0x1e8>
 8006452:	e7eb      	b.n	800642c <_printf_i+0x1dc>
 8006454:	2500      	movs	r5, #0
 8006456:	f104 0919 	add.w	r9, r4, #25
 800645a:	e7f5      	b.n	8006448 <_printf_i+0x1f8>
 800645c:	2b00      	cmp	r3, #0
 800645e:	d1ac      	bne.n	80063ba <_printf_i+0x16a>
 8006460:	7803      	ldrb	r3, [r0, #0]
 8006462:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006466:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800646a:	e76c      	b.n	8006346 <_printf_i+0xf6>
 800646c:	08006b21 	.word	0x08006b21
 8006470:	08006b32 	.word	0x08006b32

08006474 <_sbrk_r>:
 8006474:	b538      	push	{r3, r4, r5, lr}
 8006476:	4c06      	ldr	r4, [pc, #24]	; (8006490 <_sbrk_r+0x1c>)
 8006478:	2300      	movs	r3, #0
 800647a:	4605      	mov	r5, r0
 800647c:	4608      	mov	r0, r1
 800647e:	6023      	str	r3, [r4, #0]
 8006480:	f7fa fc20 	bl	8000cc4 <_sbrk>
 8006484:	1c43      	adds	r3, r0, #1
 8006486:	d102      	bne.n	800648e <_sbrk_r+0x1a>
 8006488:	6823      	ldr	r3, [r4, #0]
 800648a:	b103      	cbz	r3, 800648e <_sbrk_r+0x1a>
 800648c:	602b      	str	r3, [r5, #0]
 800648e:	bd38      	pop	{r3, r4, r5, pc}
 8006490:	20000240 	.word	0x20000240

08006494 <__sread>:
 8006494:	b510      	push	{r4, lr}
 8006496:	460c      	mov	r4, r1
 8006498:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800649c:	f000 fa96 	bl	80069cc <_read_r>
 80064a0:	2800      	cmp	r0, #0
 80064a2:	bfab      	itete	ge
 80064a4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80064a6:	89a3      	ldrhlt	r3, [r4, #12]
 80064a8:	181b      	addge	r3, r3, r0
 80064aa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80064ae:	bfac      	ite	ge
 80064b0:	6563      	strge	r3, [r4, #84]	; 0x54
 80064b2:	81a3      	strhlt	r3, [r4, #12]
 80064b4:	bd10      	pop	{r4, pc}

080064b6 <__swrite>:
 80064b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80064ba:	461f      	mov	r7, r3
 80064bc:	898b      	ldrh	r3, [r1, #12]
 80064be:	05db      	lsls	r3, r3, #23
 80064c0:	4605      	mov	r5, r0
 80064c2:	460c      	mov	r4, r1
 80064c4:	4616      	mov	r6, r2
 80064c6:	d505      	bpl.n	80064d4 <__swrite+0x1e>
 80064c8:	2302      	movs	r3, #2
 80064ca:	2200      	movs	r2, #0
 80064cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80064d0:	f000 f9b6 	bl	8006840 <_lseek_r>
 80064d4:	89a3      	ldrh	r3, [r4, #12]
 80064d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80064da:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80064de:	81a3      	strh	r3, [r4, #12]
 80064e0:	4632      	mov	r2, r6
 80064e2:	463b      	mov	r3, r7
 80064e4:	4628      	mov	r0, r5
 80064e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80064ea:	f000 b869 	b.w	80065c0 <_write_r>

080064ee <__sseek>:
 80064ee:	b510      	push	{r4, lr}
 80064f0:	460c      	mov	r4, r1
 80064f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80064f6:	f000 f9a3 	bl	8006840 <_lseek_r>
 80064fa:	1c43      	adds	r3, r0, #1
 80064fc:	89a3      	ldrh	r3, [r4, #12]
 80064fe:	bf15      	itete	ne
 8006500:	6560      	strne	r0, [r4, #84]	; 0x54
 8006502:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006506:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800650a:	81a3      	strheq	r3, [r4, #12]
 800650c:	bf18      	it	ne
 800650e:	81a3      	strhne	r3, [r4, #12]
 8006510:	bd10      	pop	{r4, pc}

08006512 <__sclose>:
 8006512:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006516:	f000 b8d3 	b.w	80066c0 <_close_r>
	...

0800651c <__swbuf_r>:
 800651c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800651e:	460e      	mov	r6, r1
 8006520:	4614      	mov	r4, r2
 8006522:	4605      	mov	r5, r0
 8006524:	b118      	cbz	r0, 800652e <__swbuf_r+0x12>
 8006526:	6983      	ldr	r3, [r0, #24]
 8006528:	b90b      	cbnz	r3, 800652e <__swbuf_r+0x12>
 800652a:	f7ff fbf7 	bl	8005d1c <__sinit>
 800652e:	4b21      	ldr	r3, [pc, #132]	; (80065b4 <__swbuf_r+0x98>)
 8006530:	429c      	cmp	r4, r3
 8006532:	d12a      	bne.n	800658a <__swbuf_r+0x6e>
 8006534:	686c      	ldr	r4, [r5, #4]
 8006536:	69a3      	ldr	r3, [r4, #24]
 8006538:	60a3      	str	r3, [r4, #8]
 800653a:	89a3      	ldrh	r3, [r4, #12]
 800653c:	071a      	lsls	r2, r3, #28
 800653e:	d52e      	bpl.n	800659e <__swbuf_r+0x82>
 8006540:	6923      	ldr	r3, [r4, #16]
 8006542:	b363      	cbz	r3, 800659e <__swbuf_r+0x82>
 8006544:	6923      	ldr	r3, [r4, #16]
 8006546:	6820      	ldr	r0, [r4, #0]
 8006548:	1ac0      	subs	r0, r0, r3
 800654a:	6963      	ldr	r3, [r4, #20]
 800654c:	b2f6      	uxtb	r6, r6
 800654e:	4283      	cmp	r3, r0
 8006550:	4637      	mov	r7, r6
 8006552:	dc04      	bgt.n	800655e <__swbuf_r+0x42>
 8006554:	4621      	mov	r1, r4
 8006556:	4628      	mov	r0, r5
 8006558:	f000 f948 	bl	80067ec <_fflush_r>
 800655c:	bb28      	cbnz	r0, 80065aa <__swbuf_r+0x8e>
 800655e:	68a3      	ldr	r3, [r4, #8]
 8006560:	3b01      	subs	r3, #1
 8006562:	60a3      	str	r3, [r4, #8]
 8006564:	6823      	ldr	r3, [r4, #0]
 8006566:	1c5a      	adds	r2, r3, #1
 8006568:	6022      	str	r2, [r4, #0]
 800656a:	701e      	strb	r6, [r3, #0]
 800656c:	6963      	ldr	r3, [r4, #20]
 800656e:	3001      	adds	r0, #1
 8006570:	4283      	cmp	r3, r0
 8006572:	d004      	beq.n	800657e <__swbuf_r+0x62>
 8006574:	89a3      	ldrh	r3, [r4, #12]
 8006576:	07db      	lsls	r3, r3, #31
 8006578:	d519      	bpl.n	80065ae <__swbuf_r+0x92>
 800657a:	2e0a      	cmp	r6, #10
 800657c:	d117      	bne.n	80065ae <__swbuf_r+0x92>
 800657e:	4621      	mov	r1, r4
 8006580:	4628      	mov	r0, r5
 8006582:	f000 f933 	bl	80067ec <_fflush_r>
 8006586:	b190      	cbz	r0, 80065ae <__swbuf_r+0x92>
 8006588:	e00f      	b.n	80065aa <__swbuf_r+0x8e>
 800658a:	4b0b      	ldr	r3, [pc, #44]	; (80065b8 <__swbuf_r+0x9c>)
 800658c:	429c      	cmp	r4, r3
 800658e:	d101      	bne.n	8006594 <__swbuf_r+0x78>
 8006590:	68ac      	ldr	r4, [r5, #8]
 8006592:	e7d0      	b.n	8006536 <__swbuf_r+0x1a>
 8006594:	4b09      	ldr	r3, [pc, #36]	; (80065bc <__swbuf_r+0xa0>)
 8006596:	429c      	cmp	r4, r3
 8006598:	bf08      	it	eq
 800659a:	68ec      	ldreq	r4, [r5, #12]
 800659c:	e7cb      	b.n	8006536 <__swbuf_r+0x1a>
 800659e:	4621      	mov	r1, r4
 80065a0:	4628      	mov	r0, r5
 80065a2:	f000 f81f 	bl	80065e4 <__swsetup_r>
 80065a6:	2800      	cmp	r0, #0
 80065a8:	d0cc      	beq.n	8006544 <__swbuf_r+0x28>
 80065aa:	f04f 37ff 	mov.w	r7, #4294967295
 80065ae:	4638      	mov	r0, r7
 80065b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80065b2:	bf00      	nop
 80065b4:	08006ad0 	.word	0x08006ad0
 80065b8:	08006af0 	.word	0x08006af0
 80065bc:	08006ab0 	.word	0x08006ab0

080065c0 <_write_r>:
 80065c0:	b538      	push	{r3, r4, r5, lr}
 80065c2:	4c07      	ldr	r4, [pc, #28]	; (80065e0 <_write_r+0x20>)
 80065c4:	4605      	mov	r5, r0
 80065c6:	4608      	mov	r0, r1
 80065c8:	4611      	mov	r1, r2
 80065ca:	2200      	movs	r2, #0
 80065cc:	6022      	str	r2, [r4, #0]
 80065ce:	461a      	mov	r2, r3
 80065d0:	f7fa f9cc 	bl	800096c <_write>
 80065d4:	1c43      	adds	r3, r0, #1
 80065d6:	d102      	bne.n	80065de <_write_r+0x1e>
 80065d8:	6823      	ldr	r3, [r4, #0]
 80065da:	b103      	cbz	r3, 80065de <_write_r+0x1e>
 80065dc:	602b      	str	r3, [r5, #0]
 80065de:	bd38      	pop	{r3, r4, r5, pc}
 80065e0:	20000240 	.word	0x20000240

080065e4 <__swsetup_r>:
 80065e4:	4b32      	ldr	r3, [pc, #200]	; (80066b0 <__swsetup_r+0xcc>)
 80065e6:	b570      	push	{r4, r5, r6, lr}
 80065e8:	681d      	ldr	r5, [r3, #0]
 80065ea:	4606      	mov	r6, r0
 80065ec:	460c      	mov	r4, r1
 80065ee:	b125      	cbz	r5, 80065fa <__swsetup_r+0x16>
 80065f0:	69ab      	ldr	r3, [r5, #24]
 80065f2:	b913      	cbnz	r3, 80065fa <__swsetup_r+0x16>
 80065f4:	4628      	mov	r0, r5
 80065f6:	f7ff fb91 	bl	8005d1c <__sinit>
 80065fa:	4b2e      	ldr	r3, [pc, #184]	; (80066b4 <__swsetup_r+0xd0>)
 80065fc:	429c      	cmp	r4, r3
 80065fe:	d10f      	bne.n	8006620 <__swsetup_r+0x3c>
 8006600:	686c      	ldr	r4, [r5, #4]
 8006602:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006606:	b29a      	uxth	r2, r3
 8006608:	0715      	lsls	r5, r2, #28
 800660a:	d42c      	bmi.n	8006666 <__swsetup_r+0x82>
 800660c:	06d0      	lsls	r0, r2, #27
 800660e:	d411      	bmi.n	8006634 <__swsetup_r+0x50>
 8006610:	2209      	movs	r2, #9
 8006612:	6032      	str	r2, [r6, #0]
 8006614:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006618:	81a3      	strh	r3, [r4, #12]
 800661a:	f04f 30ff 	mov.w	r0, #4294967295
 800661e:	e03e      	b.n	800669e <__swsetup_r+0xba>
 8006620:	4b25      	ldr	r3, [pc, #148]	; (80066b8 <__swsetup_r+0xd4>)
 8006622:	429c      	cmp	r4, r3
 8006624:	d101      	bne.n	800662a <__swsetup_r+0x46>
 8006626:	68ac      	ldr	r4, [r5, #8]
 8006628:	e7eb      	b.n	8006602 <__swsetup_r+0x1e>
 800662a:	4b24      	ldr	r3, [pc, #144]	; (80066bc <__swsetup_r+0xd8>)
 800662c:	429c      	cmp	r4, r3
 800662e:	bf08      	it	eq
 8006630:	68ec      	ldreq	r4, [r5, #12]
 8006632:	e7e6      	b.n	8006602 <__swsetup_r+0x1e>
 8006634:	0751      	lsls	r1, r2, #29
 8006636:	d512      	bpl.n	800665e <__swsetup_r+0x7a>
 8006638:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800663a:	b141      	cbz	r1, 800664e <__swsetup_r+0x6a>
 800663c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006640:	4299      	cmp	r1, r3
 8006642:	d002      	beq.n	800664a <__swsetup_r+0x66>
 8006644:	4630      	mov	r0, r6
 8006646:	f000 f973 	bl	8006930 <_free_r>
 800664a:	2300      	movs	r3, #0
 800664c:	6363      	str	r3, [r4, #52]	; 0x34
 800664e:	89a3      	ldrh	r3, [r4, #12]
 8006650:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006654:	81a3      	strh	r3, [r4, #12]
 8006656:	2300      	movs	r3, #0
 8006658:	6063      	str	r3, [r4, #4]
 800665a:	6923      	ldr	r3, [r4, #16]
 800665c:	6023      	str	r3, [r4, #0]
 800665e:	89a3      	ldrh	r3, [r4, #12]
 8006660:	f043 0308 	orr.w	r3, r3, #8
 8006664:	81a3      	strh	r3, [r4, #12]
 8006666:	6923      	ldr	r3, [r4, #16]
 8006668:	b94b      	cbnz	r3, 800667e <__swsetup_r+0x9a>
 800666a:	89a3      	ldrh	r3, [r4, #12]
 800666c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006670:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006674:	d003      	beq.n	800667e <__swsetup_r+0x9a>
 8006676:	4621      	mov	r1, r4
 8006678:	4630      	mov	r0, r6
 800667a:	f000 f917 	bl	80068ac <__smakebuf_r>
 800667e:	89a2      	ldrh	r2, [r4, #12]
 8006680:	f012 0301 	ands.w	r3, r2, #1
 8006684:	d00c      	beq.n	80066a0 <__swsetup_r+0xbc>
 8006686:	2300      	movs	r3, #0
 8006688:	60a3      	str	r3, [r4, #8]
 800668a:	6963      	ldr	r3, [r4, #20]
 800668c:	425b      	negs	r3, r3
 800668e:	61a3      	str	r3, [r4, #24]
 8006690:	6923      	ldr	r3, [r4, #16]
 8006692:	b953      	cbnz	r3, 80066aa <__swsetup_r+0xc6>
 8006694:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006698:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800669c:	d1ba      	bne.n	8006614 <__swsetup_r+0x30>
 800669e:	bd70      	pop	{r4, r5, r6, pc}
 80066a0:	0792      	lsls	r2, r2, #30
 80066a2:	bf58      	it	pl
 80066a4:	6963      	ldrpl	r3, [r4, #20]
 80066a6:	60a3      	str	r3, [r4, #8]
 80066a8:	e7f2      	b.n	8006690 <__swsetup_r+0xac>
 80066aa:	2000      	movs	r0, #0
 80066ac:	e7f7      	b.n	800669e <__swsetup_r+0xba>
 80066ae:	bf00      	nop
 80066b0:	2000001c 	.word	0x2000001c
 80066b4:	08006ad0 	.word	0x08006ad0
 80066b8:	08006af0 	.word	0x08006af0
 80066bc:	08006ab0 	.word	0x08006ab0

080066c0 <_close_r>:
 80066c0:	b538      	push	{r3, r4, r5, lr}
 80066c2:	4c06      	ldr	r4, [pc, #24]	; (80066dc <_close_r+0x1c>)
 80066c4:	2300      	movs	r3, #0
 80066c6:	4605      	mov	r5, r0
 80066c8:	4608      	mov	r0, r1
 80066ca:	6023      	str	r3, [r4, #0]
 80066cc:	f7fa fac5 	bl	8000c5a <_close>
 80066d0:	1c43      	adds	r3, r0, #1
 80066d2:	d102      	bne.n	80066da <_close_r+0x1a>
 80066d4:	6823      	ldr	r3, [r4, #0]
 80066d6:	b103      	cbz	r3, 80066da <_close_r+0x1a>
 80066d8:	602b      	str	r3, [r5, #0]
 80066da:	bd38      	pop	{r3, r4, r5, pc}
 80066dc:	20000240 	.word	0x20000240

080066e0 <__sflush_r>:
 80066e0:	898a      	ldrh	r2, [r1, #12]
 80066e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80066e6:	4605      	mov	r5, r0
 80066e8:	0710      	lsls	r0, r2, #28
 80066ea:	460c      	mov	r4, r1
 80066ec:	d458      	bmi.n	80067a0 <__sflush_r+0xc0>
 80066ee:	684b      	ldr	r3, [r1, #4]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	dc05      	bgt.n	8006700 <__sflush_r+0x20>
 80066f4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	dc02      	bgt.n	8006700 <__sflush_r+0x20>
 80066fa:	2000      	movs	r0, #0
 80066fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006700:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006702:	2e00      	cmp	r6, #0
 8006704:	d0f9      	beq.n	80066fa <__sflush_r+0x1a>
 8006706:	2300      	movs	r3, #0
 8006708:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800670c:	682f      	ldr	r7, [r5, #0]
 800670e:	6a21      	ldr	r1, [r4, #32]
 8006710:	602b      	str	r3, [r5, #0]
 8006712:	d032      	beq.n	800677a <__sflush_r+0x9a>
 8006714:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006716:	89a3      	ldrh	r3, [r4, #12]
 8006718:	075a      	lsls	r2, r3, #29
 800671a:	d505      	bpl.n	8006728 <__sflush_r+0x48>
 800671c:	6863      	ldr	r3, [r4, #4]
 800671e:	1ac0      	subs	r0, r0, r3
 8006720:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006722:	b10b      	cbz	r3, 8006728 <__sflush_r+0x48>
 8006724:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006726:	1ac0      	subs	r0, r0, r3
 8006728:	2300      	movs	r3, #0
 800672a:	4602      	mov	r2, r0
 800672c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800672e:	6a21      	ldr	r1, [r4, #32]
 8006730:	4628      	mov	r0, r5
 8006732:	47b0      	blx	r6
 8006734:	1c43      	adds	r3, r0, #1
 8006736:	89a3      	ldrh	r3, [r4, #12]
 8006738:	d106      	bne.n	8006748 <__sflush_r+0x68>
 800673a:	6829      	ldr	r1, [r5, #0]
 800673c:	291d      	cmp	r1, #29
 800673e:	d848      	bhi.n	80067d2 <__sflush_r+0xf2>
 8006740:	4a29      	ldr	r2, [pc, #164]	; (80067e8 <__sflush_r+0x108>)
 8006742:	40ca      	lsrs	r2, r1
 8006744:	07d6      	lsls	r6, r2, #31
 8006746:	d544      	bpl.n	80067d2 <__sflush_r+0xf2>
 8006748:	2200      	movs	r2, #0
 800674a:	6062      	str	r2, [r4, #4]
 800674c:	04d9      	lsls	r1, r3, #19
 800674e:	6922      	ldr	r2, [r4, #16]
 8006750:	6022      	str	r2, [r4, #0]
 8006752:	d504      	bpl.n	800675e <__sflush_r+0x7e>
 8006754:	1c42      	adds	r2, r0, #1
 8006756:	d101      	bne.n	800675c <__sflush_r+0x7c>
 8006758:	682b      	ldr	r3, [r5, #0]
 800675a:	b903      	cbnz	r3, 800675e <__sflush_r+0x7e>
 800675c:	6560      	str	r0, [r4, #84]	; 0x54
 800675e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006760:	602f      	str	r7, [r5, #0]
 8006762:	2900      	cmp	r1, #0
 8006764:	d0c9      	beq.n	80066fa <__sflush_r+0x1a>
 8006766:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800676a:	4299      	cmp	r1, r3
 800676c:	d002      	beq.n	8006774 <__sflush_r+0x94>
 800676e:	4628      	mov	r0, r5
 8006770:	f000 f8de 	bl	8006930 <_free_r>
 8006774:	2000      	movs	r0, #0
 8006776:	6360      	str	r0, [r4, #52]	; 0x34
 8006778:	e7c0      	b.n	80066fc <__sflush_r+0x1c>
 800677a:	2301      	movs	r3, #1
 800677c:	4628      	mov	r0, r5
 800677e:	47b0      	blx	r6
 8006780:	1c41      	adds	r1, r0, #1
 8006782:	d1c8      	bne.n	8006716 <__sflush_r+0x36>
 8006784:	682b      	ldr	r3, [r5, #0]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d0c5      	beq.n	8006716 <__sflush_r+0x36>
 800678a:	2b1d      	cmp	r3, #29
 800678c:	d001      	beq.n	8006792 <__sflush_r+0xb2>
 800678e:	2b16      	cmp	r3, #22
 8006790:	d101      	bne.n	8006796 <__sflush_r+0xb6>
 8006792:	602f      	str	r7, [r5, #0]
 8006794:	e7b1      	b.n	80066fa <__sflush_r+0x1a>
 8006796:	89a3      	ldrh	r3, [r4, #12]
 8006798:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800679c:	81a3      	strh	r3, [r4, #12]
 800679e:	e7ad      	b.n	80066fc <__sflush_r+0x1c>
 80067a0:	690f      	ldr	r7, [r1, #16]
 80067a2:	2f00      	cmp	r7, #0
 80067a4:	d0a9      	beq.n	80066fa <__sflush_r+0x1a>
 80067a6:	0793      	lsls	r3, r2, #30
 80067a8:	680e      	ldr	r6, [r1, #0]
 80067aa:	bf08      	it	eq
 80067ac:	694b      	ldreq	r3, [r1, #20]
 80067ae:	600f      	str	r7, [r1, #0]
 80067b0:	bf18      	it	ne
 80067b2:	2300      	movne	r3, #0
 80067b4:	eba6 0807 	sub.w	r8, r6, r7
 80067b8:	608b      	str	r3, [r1, #8]
 80067ba:	f1b8 0f00 	cmp.w	r8, #0
 80067be:	dd9c      	ble.n	80066fa <__sflush_r+0x1a>
 80067c0:	4643      	mov	r3, r8
 80067c2:	463a      	mov	r2, r7
 80067c4:	6a21      	ldr	r1, [r4, #32]
 80067c6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80067c8:	4628      	mov	r0, r5
 80067ca:	47b0      	blx	r6
 80067cc:	2800      	cmp	r0, #0
 80067ce:	dc06      	bgt.n	80067de <__sflush_r+0xfe>
 80067d0:	89a3      	ldrh	r3, [r4, #12]
 80067d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80067d6:	81a3      	strh	r3, [r4, #12]
 80067d8:	f04f 30ff 	mov.w	r0, #4294967295
 80067dc:	e78e      	b.n	80066fc <__sflush_r+0x1c>
 80067de:	4407      	add	r7, r0
 80067e0:	eba8 0800 	sub.w	r8, r8, r0
 80067e4:	e7e9      	b.n	80067ba <__sflush_r+0xda>
 80067e6:	bf00      	nop
 80067e8:	20400001 	.word	0x20400001

080067ec <_fflush_r>:
 80067ec:	b538      	push	{r3, r4, r5, lr}
 80067ee:	690b      	ldr	r3, [r1, #16]
 80067f0:	4605      	mov	r5, r0
 80067f2:	460c      	mov	r4, r1
 80067f4:	b1db      	cbz	r3, 800682e <_fflush_r+0x42>
 80067f6:	b118      	cbz	r0, 8006800 <_fflush_r+0x14>
 80067f8:	6983      	ldr	r3, [r0, #24]
 80067fa:	b90b      	cbnz	r3, 8006800 <_fflush_r+0x14>
 80067fc:	f7ff fa8e 	bl	8005d1c <__sinit>
 8006800:	4b0c      	ldr	r3, [pc, #48]	; (8006834 <_fflush_r+0x48>)
 8006802:	429c      	cmp	r4, r3
 8006804:	d109      	bne.n	800681a <_fflush_r+0x2e>
 8006806:	686c      	ldr	r4, [r5, #4]
 8006808:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800680c:	b17b      	cbz	r3, 800682e <_fflush_r+0x42>
 800680e:	4621      	mov	r1, r4
 8006810:	4628      	mov	r0, r5
 8006812:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006816:	f7ff bf63 	b.w	80066e0 <__sflush_r>
 800681a:	4b07      	ldr	r3, [pc, #28]	; (8006838 <_fflush_r+0x4c>)
 800681c:	429c      	cmp	r4, r3
 800681e:	d101      	bne.n	8006824 <_fflush_r+0x38>
 8006820:	68ac      	ldr	r4, [r5, #8]
 8006822:	e7f1      	b.n	8006808 <_fflush_r+0x1c>
 8006824:	4b05      	ldr	r3, [pc, #20]	; (800683c <_fflush_r+0x50>)
 8006826:	429c      	cmp	r4, r3
 8006828:	bf08      	it	eq
 800682a:	68ec      	ldreq	r4, [r5, #12]
 800682c:	e7ec      	b.n	8006808 <_fflush_r+0x1c>
 800682e:	2000      	movs	r0, #0
 8006830:	bd38      	pop	{r3, r4, r5, pc}
 8006832:	bf00      	nop
 8006834:	08006ad0 	.word	0x08006ad0
 8006838:	08006af0 	.word	0x08006af0
 800683c:	08006ab0 	.word	0x08006ab0

08006840 <_lseek_r>:
 8006840:	b538      	push	{r3, r4, r5, lr}
 8006842:	4c07      	ldr	r4, [pc, #28]	; (8006860 <_lseek_r+0x20>)
 8006844:	4605      	mov	r5, r0
 8006846:	4608      	mov	r0, r1
 8006848:	4611      	mov	r1, r2
 800684a:	2200      	movs	r2, #0
 800684c:	6022      	str	r2, [r4, #0]
 800684e:	461a      	mov	r2, r3
 8006850:	f7fa fa2a 	bl	8000ca8 <_lseek>
 8006854:	1c43      	adds	r3, r0, #1
 8006856:	d102      	bne.n	800685e <_lseek_r+0x1e>
 8006858:	6823      	ldr	r3, [r4, #0]
 800685a:	b103      	cbz	r3, 800685e <_lseek_r+0x1e>
 800685c:	602b      	str	r3, [r5, #0]
 800685e:	bd38      	pop	{r3, r4, r5, pc}
 8006860:	20000240 	.word	0x20000240

08006864 <__swhatbuf_r>:
 8006864:	b570      	push	{r4, r5, r6, lr}
 8006866:	460e      	mov	r6, r1
 8006868:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800686c:	2900      	cmp	r1, #0
 800686e:	b096      	sub	sp, #88	; 0x58
 8006870:	4614      	mov	r4, r2
 8006872:	461d      	mov	r5, r3
 8006874:	da07      	bge.n	8006886 <__swhatbuf_r+0x22>
 8006876:	2300      	movs	r3, #0
 8006878:	602b      	str	r3, [r5, #0]
 800687a:	89b3      	ldrh	r3, [r6, #12]
 800687c:	061a      	lsls	r2, r3, #24
 800687e:	d410      	bmi.n	80068a2 <__swhatbuf_r+0x3e>
 8006880:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006884:	e00e      	b.n	80068a4 <__swhatbuf_r+0x40>
 8006886:	466a      	mov	r2, sp
 8006888:	f000 f8b2 	bl	80069f0 <_fstat_r>
 800688c:	2800      	cmp	r0, #0
 800688e:	dbf2      	blt.n	8006876 <__swhatbuf_r+0x12>
 8006890:	9a01      	ldr	r2, [sp, #4]
 8006892:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006896:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800689a:	425a      	negs	r2, r3
 800689c:	415a      	adcs	r2, r3
 800689e:	602a      	str	r2, [r5, #0]
 80068a0:	e7ee      	b.n	8006880 <__swhatbuf_r+0x1c>
 80068a2:	2340      	movs	r3, #64	; 0x40
 80068a4:	2000      	movs	r0, #0
 80068a6:	6023      	str	r3, [r4, #0]
 80068a8:	b016      	add	sp, #88	; 0x58
 80068aa:	bd70      	pop	{r4, r5, r6, pc}

080068ac <__smakebuf_r>:
 80068ac:	898b      	ldrh	r3, [r1, #12]
 80068ae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80068b0:	079d      	lsls	r5, r3, #30
 80068b2:	4606      	mov	r6, r0
 80068b4:	460c      	mov	r4, r1
 80068b6:	d507      	bpl.n	80068c8 <__smakebuf_r+0x1c>
 80068b8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80068bc:	6023      	str	r3, [r4, #0]
 80068be:	6123      	str	r3, [r4, #16]
 80068c0:	2301      	movs	r3, #1
 80068c2:	6163      	str	r3, [r4, #20]
 80068c4:	b002      	add	sp, #8
 80068c6:	bd70      	pop	{r4, r5, r6, pc}
 80068c8:	ab01      	add	r3, sp, #4
 80068ca:	466a      	mov	r2, sp
 80068cc:	f7ff ffca 	bl	8006864 <__swhatbuf_r>
 80068d0:	9900      	ldr	r1, [sp, #0]
 80068d2:	4605      	mov	r5, r0
 80068d4:	4630      	mov	r0, r6
 80068d6:	f7ff faab 	bl	8005e30 <_malloc_r>
 80068da:	b948      	cbnz	r0, 80068f0 <__smakebuf_r+0x44>
 80068dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80068e0:	059a      	lsls	r2, r3, #22
 80068e2:	d4ef      	bmi.n	80068c4 <__smakebuf_r+0x18>
 80068e4:	f023 0303 	bic.w	r3, r3, #3
 80068e8:	f043 0302 	orr.w	r3, r3, #2
 80068ec:	81a3      	strh	r3, [r4, #12]
 80068ee:	e7e3      	b.n	80068b8 <__smakebuf_r+0xc>
 80068f0:	4b0d      	ldr	r3, [pc, #52]	; (8006928 <__smakebuf_r+0x7c>)
 80068f2:	62b3      	str	r3, [r6, #40]	; 0x28
 80068f4:	89a3      	ldrh	r3, [r4, #12]
 80068f6:	6020      	str	r0, [r4, #0]
 80068f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068fc:	81a3      	strh	r3, [r4, #12]
 80068fe:	9b00      	ldr	r3, [sp, #0]
 8006900:	6163      	str	r3, [r4, #20]
 8006902:	9b01      	ldr	r3, [sp, #4]
 8006904:	6120      	str	r0, [r4, #16]
 8006906:	b15b      	cbz	r3, 8006920 <__smakebuf_r+0x74>
 8006908:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800690c:	4630      	mov	r0, r6
 800690e:	f000 f881 	bl	8006a14 <_isatty_r>
 8006912:	b128      	cbz	r0, 8006920 <__smakebuf_r+0x74>
 8006914:	89a3      	ldrh	r3, [r4, #12]
 8006916:	f023 0303 	bic.w	r3, r3, #3
 800691a:	f043 0301 	orr.w	r3, r3, #1
 800691e:	81a3      	strh	r3, [r4, #12]
 8006920:	89a3      	ldrh	r3, [r4, #12]
 8006922:	431d      	orrs	r5, r3
 8006924:	81a5      	strh	r5, [r4, #12]
 8006926:	e7cd      	b.n	80068c4 <__smakebuf_r+0x18>
 8006928:	08005ce5 	.word	0x08005ce5

0800692c <__malloc_lock>:
 800692c:	4770      	bx	lr

0800692e <__malloc_unlock>:
 800692e:	4770      	bx	lr

08006930 <_free_r>:
 8006930:	b538      	push	{r3, r4, r5, lr}
 8006932:	4605      	mov	r5, r0
 8006934:	2900      	cmp	r1, #0
 8006936:	d045      	beq.n	80069c4 <_free_r+0x94>
 8006938:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800693c:	1f0c      	subs	r4, r1, #4
 800693e:	2b00      	cmp	r3, #0
 8006940:	bfb8      	it	lt
 8006942:	18e4      	addlt	r4, r4, r3
 8006944:	f7ff fff2 	bl	800692c <__malloc_lock>
 8006948:	4a1f      	ldr	r2, [pc, #124]	; (80069c8 <_free_r+0x98>)
 800694a:	6813      	ldr	r3, [r2, #0]
 800694c:	4610      	mov	r0, r2
 800694e:	b933      	cbnz	r3, 800695e <_free_r+0x2e>
 8006950:	6063      	str	r3, [r4, #4]
 8006952:	6014      	str	r4, [r2, #0]
 8006954:	4628      	mov	r0, r5
 8006956:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800695a:	f7ff bfe8 	b.w	800692e <__malloc_unlock>
 800695e:	42a3      	cmp	r3, r4
 8006960:	d90c      	bls.n	800697c <_free_r+0x4c>
 8006962:	6821      	ldr	r1, [r4, #0]
 8006964:	1862      	adds	r2, r4, r1
 8006966:	4293      	cmp	r3, r2
 8006968:	bf04      	itt	eq
 800696a:	681a      	ldreq	r2, [r3, #0]
 800696c:	685b      	ldreq	r3, [r3, #4]
 800696e:	6063      	str	r3, [r4, #4]
 8006970:	bf04      	itt	eq
 8006972:	1852      	addeq	r2, r2, r1
 8006974:	6022      	streq	r2, [r4, #0]
 8006976:	6004      	str	r4, [r0, #0]
 8006978:	e7ec      	b.n	8006954 <_free_r+0x24>
 800697a:	4613      	mov	r3, r2
 800697c:	685a      	ldr	r2, [r3, #4]
 800697e:	b10a      	cbz	r2, 8006984 <_free_r+0x54>
 8006980:	42a2      	cmp	r2, r4
 8006982:	d9fa      	bls.n	800697a <_free_r+0x4a>
 8006984:	6819      	ldr	r1, [r3, #0]
 8006986:	1858      	adds	r0, r3, r1
 8006988:	42a0      	cmp	r0, r4
 800698a:	d10b      	bne.n	80069a4 <_free_r+0x74>
 800698c:	6820      	ldr	r0, [r4, #0]
 800698e:	4401      	add	r1, r0
 8006990:	1858      	adds	r0, r3, r1
 8006992:	4282      	cmp	r2, r0
 8006994:	6019      	str	r1, [r3, #0]
 8006996:	d1dd      	bne.n	8006954 <_free_r+0x24>
 8006998:	6810      	ldr	r0, [r2, #0]
 800699a:	6852      	ldr	r2, [r2, #4]
 800699c:	605a      	str	r2, [r3, #4]
 800699e:	4401      	add	r1, r0
 80069a0:	6019      	str	r1, [r3, #0]
 80069a2:	e7d7      	b.n	8006954 <_free_r+0x24>
 80069a4:	d902      	bls.n	80069ac <_free_r+0x7c>
 80069a6:	230c      	movs	r3, #12
 80069a8:	602b      	str	r3, [r5, #0]
 80069aa:	e7d3      	b.n	8006954 <_free_r+0x24>
 80069ac:	6820      	ldr	r0, [r4, #0]
 80069ae:	1821      	adds	r1, r4, r0
 80069b0:	428a      	cmp	r2, r1
 80069b2:	bf04      	itt	eq
 80069b4:	6811      	ldreq	r1, [r2, #0]
 80069b6:	6852      	ldreq	r2, [r2, #4]
 80069b8:	6062      	str	r2, [r4, #4]
 80069ba:	bf04      	itt	eq
 80069bc:	1809      	addeq	r1, r1, r0
 80069be:	6021      	streq	r1, [r4, #0]
 80069c0:	605c      	str	r4, [r3, #4]
 80069c2:	e7c7      	b.n	8006954 <_free_r+0x24>
 80069c4:	bd38      	pop	{r3, r4, r5, pc}
 80069c6:	bf00      	nop
 80069c8:	200000a4 	.word	0x200000a4

080069cc <_read_r>:
 80069cc:	b538      	push	{r3, r4, r5, lr}
 80069ce:	4c07      	ldr	r4, [pc, #28]	; (80069ec <_read_r+0x20>)
 80069d0:	4605      	mov	r5, r0
 80069d2:	4608      	mov	r0, r1
 80069d4:	4611      	mov	r1, r2
 80069d6:	2200      	movs	r2, #0
 80069d8:	6022      	str	r2, [r4, #0]
 80069da:	461a      	mov	r2, r3
 80069dc:	f7fa f920 	bl	8000c20 <_read>
 80069e0:	1c43      	adds	r3, r0, #1
 80069e2:	d102      	bne.n	80069ea <_read_r+0x1e>
 80069e4:	6823      	ldr	r3, [r4, #0]
 80069e6:	b103      	cbz	r3, 80069ea <_read_r+0x1e>
 80069e8:	602b      	str	r3, [r5, #0]
 80069ea:	bd38      	pop	{r3, r4, r5, pc}
 80069ec:	20000240 	.word	0x20000240

080069f0 <_fstat_r>:
 80069f0:	b538      	push	{r3, r4, r5, lr}
 80069f2:	4c07      	ldr	r4, [pc, #28]	; (8006a10 <_fstat_r+0x20>)
 80069f4:	2300      	movs	r3, #0
 80069f6:	4605      	mov	r5, r0
 80069f8:	4608      	mov	r0, r1
 80069fa:	4611      	mov	r1, r2
 80069fc:	6023      	str	r3, [r4, #0]
 80069fe:	f7fa f938 	bl	8000c72 <_fstat>
 8006a02:	1c43      	adds	r3, r0, #1
 8006a04:	d102      	bne.n	8006a0c <_fstat_r+0x1c>
 8006a06:	6823      	ldr	r3, [r4, #0]
 8006a08:	b103      	cbz	r3, 8006a0c <_fstat_r+0x1c>
 8006a0a:	602b      	str	r3, [r5, #0]
 8006a0c:	bd38      	pop	{r3, r4, r5, pc}
 8006a0e:	bf00      	nop
 8006a10:	20000240 	.word	0x20000240

08006a14 <_isatty_r>:
 8006a14:	b538      	push	{r3, r4, r5, lr}
 8006a16:	4c06      	ldr	r4, [pc, #24]	; (8006a30 <_isatty_r+0x1c>)
 8006a18:	2300      	movs	r3, #0
 8006a1a:	4605      	mov	r5, r0
 8006a1c:	4608      	mov	r0, r1
 8006a1e:	6023      	str	r3, [r4, #0]
 8006a20:	f7fa f937 	bl	8000c92 <_isatty>
 8006a24:	1c43      	adds	r3, r0, #1
 8006a26:	d102      	bne.n	8006a2e <_isatty_r+0x1a>
 8006a28:	6823      	ldr	r3, [r4, #0]
 8006a2a:	b103      	cbz	r3, 8006a2e <_isatty_r+0x1a>
 8006a2c:	602b      	str	r3, [r5, #0]
 8006a2e:	bd38      	pop	{r3, r4, r5, pc}
 8006a30:	20000240 	.word	0x20000240

08006a34 <_init>:
 8006a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a36:	bf00      	nop
 8006a38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a3a:	bc08      	pop	{r3}
 8006a3c:	469e      	mov	lr, r3
 8006a3e:	4770      	bx	lr

08006a40 <_fini>:
 8006a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a42:	bf00      	nop
 8006a44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a46:	bc08      	pop	{r3}
 8006a48:	469e      	mov	lr, r3
 8006a4a:	4770      	bx	lr
